<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Look Think Make</title><link href="http://www.elfnor.com/" rel="alternate"></link><link href="http://www.elfnor.com/feeds/think.atom.xml" rel="self"></link><id>http://www.elfnor.com/</id><updated>2014-12-20T22:00:00+13:00</updated><entry><title>Simple Sverchok - Centers Polygons</title><link href="http://www.elfnor.com/simple-sverchok-centers-polygons.html" rel="alternate"></link><updated>2014-12-20T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-12-20:simple-sverchok-centers-polygons.html</id><summary type="html">&lt;p&gt;&lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; is an add-on for Blender. It allows you to generate geometry in Blender in a parametric way by wiring visual nodes together rather than programming in Blender python.&lt;/p&gt;
&lt;p&gt;This is the first of hopefully a series on very simple examples of using Sverchok. I'm learning this as I blog about it (the best way of learning something is to try and teach someone else) so if I make mistakes or find a better way of doing something later I'll try and come back and update these posts.&lt;/p&gt;
&lt;h2&gt;Installation and setup&lt;/h2&gt;
&lt;p&gt;Get the latest version of Sverchok from github.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download Sverchok from github &lt;a href="https://github.com/nortikin/sverchok/archive/master.zip"&gt;https://github.com/nortikin/sverchok/archive/master.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;User Preferences &amp;gt; Addons &amp;gt; install from file &amp;gt;&lt;/li&gt;
&lt;li&gt;Choose zip-archive &amp;gt; activate flag beside Sverchok&lt;/li&gt;
&lt;li&gt;Enable permanently in the startup.blend using Ctrl + U and Save User Settings from the  Addons menu. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My preferred layout for working in Sverchok is to start with the Compositing screen layout and change the bottom left window to a Text Editor. At the bottom of the Node Editor select the node tree type to Sverchok and add a new node tree.&lt;/p&gt;
&lt;h2&gt;Centers Polygons&lt;/h2&gt;
&lt;p&gt;Here is the first node set up we're going to look at.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.elfnor.com/images/centers_polygons1.blend.png"&gt;&lt;img alt="centers polygons node example" src="images/centers_polygons1.blend_low_res.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a very simple node diagram. All it does is copy one object from the scene onto the centers' of the polygons of another object in the scene.&lt;/p&gt;
&lt;p&gt;I'll explain it in some detail to help us get a feel for how Sverchok handles the data for a mesh.&lt;/p&gt;
&lt;p&gt;The two green "Objects_in" Scene nodes allow access to the data from objects in the scene. Select the scene object and press the "Get Selection" button to read in the data.&lt;/p&gt;
&lt;p&gt;Each of the "Object_in" nodes outputs some of the mesh data for its object. To see what this data looks like connect a "Viewer_text" Text node to one of the outputs. Change one of  the panels in the blender window to a  text editor and select  the "Sverchok_viewer" from the data block selector. When the "VIEW" button on the "Viewer_text" node is pressed the data stream connected to the node will be written to this panel.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewer text node" src="/images/centers_polygons1a.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;A blender mesh is described as the (x, y, z) coordinates of the vertices of the object. These are given relative to the origin of the object.&lt;/p&gt;
&lt;p&gt;The edges and polygons describe how the vertices are connected to form the mesh. The edges are list of pairs that are connected by an edge. For instances (1, 5) means there is an edge between the &lt;code&gt;obj.data.vertices[1]&lt;/code&gt; and &lt;code&gt;obj.data.vertices[5]&lt;/code&gt;*. The polygons are similarly a list of the vertices connected by each polygon in the mesh.&lt;/p&gt;
&lt;p&gt;In Sverchok it only makes sense to wire the same colored nodes together. Orange vertices coordinates  to orange vertices coordinates, Green lists of vertices (edges or polygons) to other lists etc.&lt;/p&gt;
&lt;p&gt;The matrix of an object describes the position, scale and rotation of the object. The position is given as the position of the object's origin with respect to the Scene origin. "Get Selection" the data from a simple cube and look at its matrix with a "Viewer_text" node. Move, rotate and scale the cube and compare the values in the "Transform" panel to the matrix that Sverchok displays. (You'll need to use the "Get Selection" and "VIEW" buttons to update the data after each change to the object).&lt;/p&gt;
&lt;p&gt;A little playing will show that the location and scale are stored in the matrix&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[sx, 0,  0, x]&lt;/span&gt;
&lt;span class="k"&gt;[0, sy,  0, y]&lt;/span&gt;
&lt;span class="k"&gt;[0,  0, sz, z]&lt;/span&gt;
&lt;span class="k"&gt;[0,  0,  0, 1]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where x, y, z are the location and sx, sy, sz, are the scale values.&lt;/p&gt;
&lt;p&gt;Rotations affect the 3 x 3 top left corner of the matrix. If you're interested in more detail on how transform matrices really work see these &lt;a href="http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/geometry/geo-tran.html"&gt;notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To separate out the various parts of the transform matrix use the "Matrix out" node from the "Matrix" node set.  This takes a matrix (or many matrices) and outputs separately the location, scale, rotation and angle represented by that transform matrix. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Matrix out node" src="/images/centers_polygons1b.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;The rotation output of the node is a list of three numbers which correspond to the X, Y, Z values of the rotation given in the transform panel of the 3D view when the "Axis Angle" display option is selected. The Angle  output of the node is the W value (in degrees) from the transform panel. In the "Axis Angle" mode,  X, Y, Z describe an axis and W describes a angle that the object is rotated about this axis. &lt;/p&gt;
&lt;p&gt;If you apply the transform (CTRL-A) (location, scale and rotation to the object the transfrom matrix will be reset to the identity matrix (diagonal 1s, 0s everywhere else), the origin of the object will be moved to the scene origin and the vertices of the object will be recalculated to reflect this change in origin. The edges and polygons do not need to be updated through any of these transforms as they are only lists of the connections between vertices and as such contain no positional information.&lt;/p&gt;
&lt;p&gt;Also play with moving, rotating or scaling the mesh in "EDIT" mode. You will find that this effects the vertex coordinates but not the transform matrix.&lt;/p&gt;
&lt;p&gt;Getting back to the "Centers Polygons" node from the "Analysers" node set. It takes a set of vertex coordinates and a list of polygon connections as its inputs and outputs data about the centers of each of those polygons.&lt;/p&gt;
&lt;p&gt;&lt;img alt="centers polygon nodes only" src="/images/centers_polygons1.blend_diagram.png" /&gt;&lt;/p&gt;
&lt;p&gt;The "Centers" output of the node is colored blue, meaning its going to output matrices. 
In the node diagram the "Centers" output from the "Centers Polygons" node is connected to the matrix input of a "Viewer Draw" node. Connecting another mesh to the "Vertices" "Edge pol" inputs produces a copy of the second mesh at the center of each polygon on the first mesh.&lt;/p&gt;
&lt;p&gt;Moving the second mesh with respect to its own origin will move (when everything is updated) the copies with respect to the polygon on the second mesh. The orientation of the copy is such that the copied objects z-direction is normal to the face. To see how the x and y directions map to the face select a face of the first object and change the transformation display to "Normal" mode. A little experimentation will show that the x axis of the second object is mapped to the y axis of the face normal.&lt;/p&gt;
&lt;p&gt;The origins output of the "Centers Polygons" node output just a list of the centers of each polygon. The "Normals" and "Norm_abs" outputs are as described in the &lt;a href="http://sverchok.readthedocs.org/en/latest/main.html"&gt;docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Normals is normals from global zero coordinates, vector. Norm_abs is normals shifted to centers of polygons. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To turn the output of the "Viewer Draw" node into ordinary Blender meshes click the "Bake" button on the node. If its not showing check the properties in the right hand panel.&lt;/p&gt;
&lt;p&gt;Alternatively if a "Viewer Bmesh" node is used instead of the "Viewer Draw" node, SV will update Blender meshes as changes are made. (Still need to click the "Update" button on the right hand panel.&lt;/p&gt;
&lt;p&gt;&lt;img alt="final render sverchok centres polygon demo" src="/images/centers_polygon_demo_image.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; I've used the python code here that you could use to access the same data in the python console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;active_object&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Translate cache descriptions and logs</title><link href="http://www.elfnor.com/translate-cache-descriptions-and-logs.html" rel="alternate"></link><updated>2014-11-16T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-11-16:translate-cache-descriptions-and-logs.html</id><summary type="html">&lt;p&gt;I recently did a European cycle trip and as described &lt;a href="http://www.elfnor.com/off-line-caching-along-a-route.html"&gt;here&lt;/a&gt; I made some gpx files of geocaches along my intended route. &lt;/p&gt;
&lt;p&gt;The trouble is most of the cache descriptions were in German and my German is practically non-existent. I wanted to do all my caching offline so I wrote a small python script to use Google Translate to translate all the descriptions and logs in the GPX file.&lt;/p&gt;
&lt;p&gt;The code uses the &lt;code&gt;minidom&lt;/code&gt; module in the python standard library to parse the &lt;code&gt;xml&lt;/code&gt; in the GPX file.    &lt;/p&gt;
&lt;p&gt;It uses the &lt;a href="http://pythonhosted.org/goslate/"&gt;goslate&lt;/a&gt; library to query Google translate. The &lt;code&gt;codecs&lt;/code&gt; module also in the python standard library is used to correctly write out the unicode characters.&lt;/p&gt;
&lt;p&gt;The script attempts to translate the description and logs for each geocache into English and append them after the original text.&lt;/p&gt;
&lt;p&gt;WARNING: This code only translates some descriptions and logs, if there is a lot of formatting in the description it fails to translate and just returns a second copy of the original text. I haven't spent much time trying to resolve this bug. Feel welcome to improve the script for your on use. Also use at your own discretion after reading Google Translate's terms and conditions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.dom&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;minidom&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;goslate&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;gs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;goslate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Goslate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;route-caches.gpx&amp;#39;&lt;/span&gt;


&lt;span class="n"&gt;xmldoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minidom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;descs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;xmldoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;groundspeak:long_description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;descs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;descs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstChild&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;endesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstChild&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;lt;hr&amp;gt; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;endesc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; of &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;texts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmldoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;groundspeak:text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstChild&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;entext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstChild&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;lt;hr&amp;gt; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;entext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; of &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;route-caches-en.gpx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;xmldoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writexml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;</summary><category term="think"></category><category term="geocaching"></category></entry><entry><title>Off-line caching along a route</title><link href="http://www.elfnor.com/off-line-caching-along-a-route.html" rel="alternate"></link><updated>2014-11-09T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-11-09:off-line-caching-along-a-route.html</id><summary type="html">&lt;p&gt;I recently did a European cycle trip and wanted the opportunity to collect a few geocaches along the way. This post and the next &lt;a href="http://www.elfnor.com/translate-cache-descriptions-and-logs.html"&gt;one on translation&lt;/a&gt;, describe the tools I used to wrangle the data from &lt;a href="http://www.geocaching.com"&gt;geocaching.com&lt;/a&gt; in to a GPX file and attempt to translate the cache descriptions and logs into English.&lt;/p&gt;
&lt;p&gt;First the tools I use for geocaaching:&lt;/p&gt;
&lt;p&gt;I use an android phone (rooted with cyanogenmod, but these tools all work on an unrooted phone) for geocaching. When I wanted something more suitable for geocaching than my old Garmin Etrex I looked at Garmin and other dedicated GPS, but decided a phone was more flexible and one third the price. My Motorola Defy+ is reasonably robust, and supposedly waterproof (not tested (yet!) although I use it happily in the rain). The GPS appears more accurate and works better than the Etrex when signals are weak (inside buildings) but can take along time to get a fix without access to the AGPS  data via wifi.&lt;/p&gt;
&lt;p&gt;I use off-line maps from &lt;a href="http://www.openandromaps.org"&gt;www.openandromaps.org&lt;/a&gt;. These are based on data from the &lt;a href="http://www.openstreetmap.org"&gt;openstreetmap&lt;/a&gt; project. I use &lt;a href="http://www.locusmap.eu/"&gt;Locus Pro&lt;/a&gt; for viewing the maps on the phone, but &lt;a href="http://cgeo.org/"&gt;c:geo&lt;/a&gt; and &lt;a href="http://www.oruxmaps.com/index_en.html"&gt;Orux maps&lt;/a&gt; are also very good.&lt;/p&gt;
&lt;p&gt;Locus Pro can import caches stored in GPX format files. &lt;/p&gt;
&lt;p&gt;Below I describe how I created a GPX file of the caches I expected to cycle past on my trip.&lt;/p&gt;
&lt;p&gt;All this is described for running on a Linux machine with &lt;a href="http://code.google.com/p/geotoad/"&gt;geotoad&lt;/a&gt; and &lt;a href="http://www.gpsbabel.org/"&gt;GPSBabel&lt;/a&gt; installed, and assumes you're reasonably adept at working out how to use various bits of software.&lt;/p&gt;
&lt;p&gt;The first step is to get a KML file of the the cycle trip route.&lt;/p&gt;
&lt;h2&gt;Using Google maps to get a KML file of the route&lt;/h2&gt;
&lt;p&gt;The ways to save directions from Google maps and export them to a KML seems to vary and change depending on exactly which interface to Google maps you are using. The following worked on 2014-11-09.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go to &lt;a href="https://mapsengine.google.com/map/"&gt;https://mapsengine.google.com/map/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;create a new map&lt;/li&gt;
&lt;li&gt;select the icon for add directions&lt;/li&gt;
&lt;li&gt;enter the start and end points for your cycle trip, and change the mode to cycle.&lt;/li&gt;
&lt;li&gt;click on the folder icon near the top left, and select export to KML&lt;/li&gt;
&lt;li&gt;select directions and download the file.&lt;/li&gt;
&lt;li&gt;this file is a KMZ file which is just a zipped up KML file, extract the KML file using an appropriate archive tool&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Convert the KML file to a GPX file&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Either use an on-line tool such as &lt;a href="http://kml2gpx.com"&gt;kml2gpx&lt;/a&gt; or &lt;a href="http://www.gpsvisualizer.com/"&gt;gpsvisualizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or use GPSBabel &lt;a href="http://www.gpsbabel.org/"&gt;http://www.gpsbabel.org/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other methods&lt;/h2&gt;
&lt;p&gt;An alternative using the ordinary Google maps interface and gpsbabel is described &lt;a href="http://www.gpsbabel.org/htmldoc-1.5.1/fmt_google.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.openrouteservice.org"&gt;openrouteservice.org&lt;/a&gt; allows you to save a route directly as a GPX file, but only works for places in Europe.&lt;/p&gt;
&lt;h2&gt;Get the caches along the route in the GPX file&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install geotoad and follow &lt;a href="https://code.google.com/p/geotoad/wiki/OtherSearches#Searches_along_a_given_track/route"&gt;these instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Copy the geotoad instruction output by the script, add your own login name and password for geocaching.com, save this new command as a bash file, make executable and run.&lt;/li&gt;
&lt;li&gt;The output of this last step should be a GPX file that can be importing into your caching software. It should contain all the caches within the specified distance of your cycle route.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See this &lt;a href="http://www.elfnor.com/translate-cache-descriptions-and-logs.html"&gt;next blog post&lt;/a&gt; if you want to translate the cache descriptions and logs into English (or another language). &lt;/p&gt;
&lt;p&gt;Note: Use geotoad at your own discretion it may not be strictly compatible with the terms of service of geocaching.com.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="think"></category><category term="geocaching"></category></entry><entry><title>Drop down and button select menus for Blender Operator add-ons</title><link href="http://www.elfnor.com/drop-down-and-button-select-menus-for-blender-operator-add-ons.html" rel="alternate"></link><updated>2014-09-14T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-09-14:drop-down-and-button-select-menus-for-blender-operator-add-ons.html</id><summary type="html">&lt;p&gt;Note: Examples were tested in Blender 2.71 running on Linux Mint.&lt;/p&gt;
&lt;p&gt;While making the fancy new interface for my &lt;a href="http://elfnor.com/copy-2-add-on-for-blender.html"&gt;copy2 add-on&lt;/a&gt; I needed to work out how to display choices to the user. There are many examples around for drop down menus etc. So many examples that I got rather confused to start with. Here is my best attempt at simplifying this to the essentials.&lt;/p&gt;
&lt;p&gt;If you're new to writing an operator add-on this is the best place to start is with this add-on tutorial at &lt;a href="http://www.blender.org/documentation/blender_python_api_2_71_release/info_tutorial_addon.html"&gt;blender.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Any add-on tool you write to add new objects or manipulate objects will typically be a blender &lt;code&gt;Operator&lt;/code&gt; class. This will give you a tool that can be accessed from the existing menus or via a keyboard shortcut. This class gives heaps of functionality such as an easily constructed options panel for the user to interact with and automatically see their changes update.  &lt;/p&gt;
&lt;h2&gt;Simple drop down&lt;/h2&gt;
&lt;p&gt;The following add-on has a simple drop down menu. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;    

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="n"&gt;fixed_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The zeroth item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    
                                                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The first item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    
                                                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The second item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    
                                                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The third item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                                                 &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fixed list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fixed item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixed_items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All we had to do was add the &lt;code&gt;bpy.props.EnumProperty&lt;/code&gt; as a class attribute. When this code is run blender adds an item &lt;code&gt;Drop Downs&lt;/code&gt; (the name is defined by &lt;code&gt;bl_label&lt;/code&gt;) to the &lt;code&gt;Object&lt;/code&gt; menu in the &lt;code&gt;VIEW3D&lt;/code&gt;. When clicked this new menu item runs the add-on, and blender creates a sub-panel in the tool panel automatically constructing a drop down with the defined items on it. Each time the user changes the selection on the drop down the &lt;code&gt;execute&lt;/code&gt; method is called. In this case it simply prints the value of the selection to the terminal (if blender was started from a terminal). &lt;/p&gt;
&lt;p&gt;The items list contains a list of tuples like so: &lt;code&gt;(value, label, description)&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; is what blender return when the attribute is referenced as in the &lt;code&gt;print(self.fixed_items)&lt;/code&gt; will print the &lt;code&gt;value&lt;/code&gt; of the selected item. The &lt;code&gt;label&lt;/code&gt; is what blender displays on the drop down. The &lt;code&gt;description&lt;/code&gt; is what the user sees when they hover the mouse over the item.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; is the label displayed above the drop down. Set this to an empty string to have no label.&lt;/p&gt;
&lt;p&gt;&lt;img alt="drop down 01" src="images/Screenshot-drop_down_01.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Selection buttons&lt;/h2&gt;
&lt;p&gt;You can have more control over how the &lt;code&gt;EnumProperty&lt;/code&gt; is displayed to the user by adding a &lt;code&gt;draw&lt;/code&gt; method to the class. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;layout.prop(self, "radio", expand=True)&lt;/code&gt; changes the drop down to what are sometimes called "radio buttons".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;    

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="n"&gt;radio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SW&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shortwave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The zeroth item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;      
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;AM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;AM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The first item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;      
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;FM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;FM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The second item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Internet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The third item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;  
                                   &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;radio buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;radio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fixed item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="drop down 02" src="images/Screenshot-drop_down_02.png" /&gt;&lt;/p&gt;
&lt;p&gt;Within the draw method quite complex layouts can be defined if necessary. See these &lt;a href="http://wiki.blender.org/index.php/Dev:2.5/Py/Scripts/Cookbook/Code_snippets/Interface"&gt;examples&lt;/a&gt; on the blender site.&lt;/p&gt;
&lt;h2&gt;Icons&lt;/h2&gt;
&lt;p&gt;The text can be replaced with icons if desired. In this case each item tuple now has 5 entries.&lt;br /&gt;
&lt;code&gt;(value, label, description, icon name, unique number)&lt;/code&gt;&lt;br /&gt;
The icons avaliable and their names can be found using the &lt;code&gt;Development: Icons&lt;/code&gt; add-on. This adds a panel to the properties panel (&lt;code&gt;CTRL-T&lt;/code&gt;) of the Text Editor view. Hovering the mouse over an icon gives it name and clicking and icon copies its name to the clipboard. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;    

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 


    &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;V&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;use vertices&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;VERTEXSEL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;use edges&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;EDGESEL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;use faces&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;FACESEL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;  
                                   &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Copy To:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
                                   &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;place to copy to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fixed item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="drop down 03" src="images/Screenshot-drop_down_03.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Dynamic Lists&lt;/h2&gt;
&lt;p&gt;A callback function can be used to generate the items for the list dynamically. This is useful, for example, for making a list of the objects in the scene for the user to select from. The callback needs to go at the top of the class above the &lt;code&gt;bpy.props.EnumProperty&lt;/code&gt; that uses it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;  

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;item_cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;ob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ob&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

    &lt;span class="n"&gt;objname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;item_cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
                                         &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
                                         &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Choose object here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                               

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;object name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_PT_tools_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_PT_tools_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="drop down 04" src="images/Screenshot-drop_down_04.png" /&gt;&lt;/p&gt;
&lt;p&gt;The callback should return a list of tuples. The above example will update the list of objects every time the user changes the selection. This may not be what you want if the add-on adds lots of new objects to a scene. For the Copy2 add-on I wanted the list to only contain objects that were in the scene when the user started the add-on.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;invoke&lt;/code&gt; method of the class is only called when the add-on is started. In the following example this is the only place the object list is updated. I've added some code that duplicates the object selected in the drop down 10 times. The new objects are not added to the drop down list until the add-on is rerun from the menu. Note also that as you change which object is selected in the drop down any previously duplicated objects are removed from the scene. This is part of the default undo behaviour of an Operator.&lt;/p&gt;
&lt;p&gt;Of course if you where to make this into a real add-on, it would be best to add the number of objects and the vector direction as user selections. These would be a &lt;code&gt;bpy.props.IntProperty&lt;/code&gt; and a &lt;code&gt;bpy.props.FloatVectorProperty&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mathutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="n"&gt;obj_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;obj_list_cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;DropDownExample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj_list&lt;/span&gt; 

    &lt;span class="n"&gt;objname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;obj_list_cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                         &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
                                         &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Choose object here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;DropDownExample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;                             

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;object name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;copy_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;copy_obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy_obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_PT_tools_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_PT_tools_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you add the duplication code to the 1st example in this section, the list will update with all the new objects. Not only does this clutter up the list, strange things happen to which item blender thinks is selected.&lt;/p&gt;
&lt;h2&gt;Selections changing other list items.&lt;/h2&gt;
&lt;p&gt;A callback function for the items list can be used to make one list update its items in response to a user selection in another list.  I needed this in the Copy2 add-on where the user needs to select a primary and secondary axis. The primary and secondary axes can't be the same. I could of offered the user a single choice of one of the six pairs but I decided to make the secondary axis list update in response to the primary axis choice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;    

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sec_axes_list_cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;priaxes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;sec_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;priaxes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;sec_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;priaxes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;sec_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;       
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sec_list&lt;/span&gt;

    &lt;span class="n"&gt;priaxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;along X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
                                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;along Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
                                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;along Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;  
                                             &lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="n"&gt;secaxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sec_axes_list_cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Secondary Axis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;  

        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;primary axis:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;priaxes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;secondary axis:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;secaxes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

        &lt;span class="k"&gt;return&lt;/span&gt;                   


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;axes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;priaxes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secaxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Selections changing which properties are displayed&lt;/h2&gt;
&lt;p&gt;Another way the panel can be made responsive to user selection, is to offer additional properties based on what selections are already made. In the Copy2 plugin the scale options only work in edge mode, so I made it so they are only drawn when edge mode is selected. This is done with some &lt;code&gt;if&lt;/code&gt; statements in the draw method.&lt;/p&gt;
&lt;p&gt;For a example of all these ideas in a real add-on have a look at the source code of the &lt;a href=""&gt;Copy2 add-on&lt;/a&gt;&lt;/p&gt;</summary><category term="make"></category><category term="think"></category><category term="copy2"></category></entry><entry><title>Copy 2 add-on for blender</title><link href="http://www.elfnor.com/copy-2-add-on-for-blender.html" rel="alternate"></link><updated>2014-09-02T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-09-02:copy-2-add-on-for-blender.html</id><summary type="html">&lt;p&gt;After forgetting about it for a few years I found my old "copy 2" blender python script. (there's an old thread &lt;a href="http://blenderartists.org/forum/showthread.php?193616-Copy-object-to-face-edge-or-vertex-script-%28updated-to-2-5-3-1%29"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I've completely rewritten it into a proper add-on with a panel interface. It now works in Blender 2.71. It can be downloaded from my github repository &lt;a href="https://github.com/elfnor/copy2_blender_addon"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The add-on copies an object to either the selected vertices, edges or faces of another object. Here are a couple of examples of the kind of output possible.&lt;/p&gt;
&lt;p&gt;&lt;img alt="radiolaria" src="images/radiolaria.png" /&gt;&lt;/p&gt;
&lt;p&gt;To produce this image an icosphere with a single subdivision was used as the destination object. The spike is an edited cone and was copied to the vertices, the silver torus was copied to the faces and the gold rings to the edges of the icosphere. The icosphere was then deleted.&lt;/p&gt;
&lt;p&gt;By making use of the random select in edit mode prior to using Copy 2 and the randomize transform afterwards, the add-on can be used to quickly greeble objects.&lt;/p&gt;
&lt;p&gt;It can also be used to make ball and stick models of a mesh. Copy a sphere to the vertices and a cylinder to the edges. When copy to an edge is selected, the additional option to scale an object to the edge length is given.&lt;/p&gt;
&lt;p&gt;&lt;img alt="twisted torus" src="images/twisted_torus.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Basic steps&lt;/h2&gt;
&lt;p&gt;&lt;img alt="screenshot" src="images/screenshot.png" /&gt;&lt;/p&gt;
&lt;p&gt;Install the add-on through the User Preferences dialog.&lt;/p&gt;
&lt;p&gt;Create a destination object, use &lt;code&gt;CTRL-A&lt;/code&gt; to apply any scale and rotation to the object.&lt;br /&gt;
In &lt;code&gt;EDIT&lt;/code&gt; mode select the vertices, edges or faces to which you want to copy the source object.  &lt;/p&gt;
&lt;p&gt;Create a source object,&lt;br /&gt;
In &lt;code&gt;EDIT&lt;/code&gt; mode move the object relative to the object origin. The object origin is the point that is copied onto the mesh.&lt;br /&gt;
In &lt;code&gt;OBJECT&lt;/code&gt; mode use &lt;code&gt;CTRL-A&lt;/code&gt; to apply any scale and rotation to the source object.  &lt;/p&gt;
&lt;p&gt;Select the destination object, and run the add-on, &lt;code&gt;Object &amp;gt; Copy 2&lt;/code&gt;.&lt;br /&gt;
A sub panel will appear on the tool panel.&lt;br /&gt;
Choose the source object from the drop down menu.&lt;br /&gt;
Choose by selecting the appropriate icon, whether to copy to the vertices, edges or faces of the destination object.&lt;br /&gt;
Select the primary and secondary axes to determine the orientation of the source object with respect to the normals of the destination object.  &lt;/p&gt;
&lt;p&gt;For the vertex option;&lt;br /&gt;
the primary axis is aligned along the vertex normal;&lt;br /&gt;
the secondary axis is aligned to point along one edge of the mesh.&lt;/p&gt;
&lt;p&gt;For the edge option;&lt;br /&gt;
the primary axis is aligned along the average of the edge's vertex normals;&lt;br /&gt;
the secondary axis is aligned along the edge.&lt;/p&gt;
&lt;p&gt;In edge mode, the option to scale the source object to the length of the edge appears.
One can also change the scale factor.&lt;/p&gt;
&lt;p&gt;For the face option; &lt;br /&gt;
the primary axis is aligned along the face normal;&lt;br /&gt;
the secondary axis is aligned to point to one vertex of the face.&lt;/p&gt;
&lt;p&gt;Otherwise click the axes alignment buttons until it looks right.&lt;/p&gt;
&lt;p&gt;When finished the copied objects are selected, if desired further operators can be applied such as the &lt;code&gt;Object &amp;gt; Transform &amp;gt; Randomize Transform&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The copied objects' data are also linked to the source object.  This is useful to make further refinements to the scale or position of the source mesh relative to the source object origin.  If this is not desired they can easily be unlinked. Select them all (select one, then &lt;code&gt;Select &amp;gt; Linked &amp;gt; Object Data&lt;/code&gt;) then &lt;code&gt;Object &amp;gt; Make Single User &amp;gt; Object &amp;amp; Data&lt;/code&gt; for one mesh per object.&lt;/p&gt;</summary><category term="make"></category><category term="think"></category><category term="copy2"></category></entry><entry><title>Parametric Surfaces in Blender</title><link href="http://www.elfnor.com/parametric-surfaces-in-blender.html" rel="alternate"></link><updated>2014-08-03T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-08-03:parametric-surfaces-in-blender.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://www.blender.org/"&gt;Blender&lt;/a&gt; 3D modeling and rendering package has an add-on for mathematically defined surfaces. It is enabled via the Extra Objects add-on under &lt;code&gt;File &amp;gt; User Preferences&amp;gt; Addons&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;XYZ Math Surface&lt;/code&gt; can be used to construct meshes for parametric surfaces. The parametric surface is defined by three functions of two variables &lt;mathjax&gt;$u$&lt;/mathjax&gt; and &lt;mathjax&gt;$v$&lt;/mathjax&gt;:&lt;/p&gt;
&lt;p&gt;&lt;mathjax&gt;$$
x = X(u,v)
$$&lt;/mathjax&gt;
&lt;mathjax&gt;$$
y = Y(u,v)
$$&lt;/mathjax&gt;
&lt;mathjax&gt;$$
z = Z(u,v)
$$&lt;/mathjax&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://wiki.blender.org/index.php/Extensions:2.6/Py/Scripts/Add_Mesh/Add_3d_Function_Surface"&gt;documentation page&lt;/a&gt; for the add-on has a number of example surfaces, but there are a lot more interesting named surfaces out there.&lt;/p&gt;
&lt;p&gt;Its fairly easy to enter any formulae you find for a parametric 3D surface into Blender and save it as an &lt;code&gt;Operator Preset&lt;/code&gt;. I've uploaded my collection of saved presets to a github &lt;a href="https://github.com/elfnor/blender_XYZ_surface_presets"&gt;repo&lt;/a&gt;. I haven't included every named surface out there, just ones I think might make interesting images. &lt;/p&gt;
&lt;p&gt;Here are a couple of images produced using the XYZ Math Surface add-on.&lt;/p&gt;
&lt;h2&gt;Dini&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Dini Surface" src="images/dini_01.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Twisted Torus&lt;/h2&gt;
&lt;p&gt;&lt;img alt="twisted torus" src="images/twisted_torus_02.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Stereosphere&lt;/h2&gt;
&lt;p&gt;A stereosphere is the projection of a plane grid onto a sphere with the projection lines going through the top pole of the sphere. In the following image there is a point source light at the north pole of the stereosphere (the light is represented by the yellow dot). This light then does a stereographic projection of the sphere back onto the plane producing the grid present on the ground plane.&lt;/p&gt;
&lt;p&gt;&lt;img alt="stereosphere" src="images/stereosphere_01.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div&gt;&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['$','$'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
        "    } " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;/div&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category></entry><entry><title>Responsive Theme for gthumb Web Albums</title><link href="http://www.elfnor.com/responsive-theme-for-gthumb-web-albums.html" rel="alternate"></link><updated>2014-07-26T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-07-26:responsive-theme-for-gthumb-web-albums.html</id><summary type="html">&lt;p&gt;I want to include a lot of the art works stuff I have on my &lt;a href="http://elfnor.deviantart.com/"&gt;Deviant Art&lt;/a&gt; on this site. I'm looking at the basic format of a static web album with a title, image and description for each art work. I looked at a number of packages including &lt;a href="https://github.com/saimn/sigal"&gt;sigal&lt;/a&gt; and &lt;a href="http://home.gna.org/llgal/"&gt;llgal&lt;/a&gt; but settled on &lt;a href="https://wiki.gnome.org/Apps/gthumb"&gt;gthumb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Gthumb is mainly a image viewer and browser for the GNOME desktop, but it also includes a static web album generator. It has themes based on a set of templates and CSS files. &lt;/p&gt;
&lt;p&gt;Of course I couldn't help fiddling with the templates and the Responsive Dark theme is the result. On a wide screen the description is to the right of the image, on a narrow screen the description is below the image. &lt;/p&gt;
&lt;p&gt;The theme requires the description and title for each image to be entered into their respective exif tags. This is easy to do using gthumb itself. You can use some basic html such as &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tags in the description field to give basic formatting.&lt;/p&gt;
&lt;p&gt;To install the theme, download this &lt;a href="https://github.com/elfnor/gthumb_responsive_theme"&gt;repository&lt;/a&gt; (see download zip button on the right of the github page). Unzip and copy the &lt;code&gt;Responsive_Dark&lt;/code&gt; folder to the gthumb theme location. On my Linux Mint installation this is &lt;code&gt;/usr/share/gthumb/albumthemes/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Start gthumb, choose the files for the web album, select &lt;code&gt;File&amp;gt;Export To&amp;gt;Web Album&lt;/code&gt;. Select the &lt;code&gt;Responsive Dark&lt;/code&gt; theme from the Theme box. Make sure &lt;code&gt;Adapt to the window width&lt;/code&gt; is set on the &lt;code&gt;Index Page&lt;/code&gt; tab.&lt;/p&gt;
&lt;p&gt;Other settings I also used:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Index Page&lt;/code&gt; tab:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Thumbnail Caption&lt;/code&gt;  set to &lt;code&gt;Title&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;All images on a single page&lt;/code&gt; set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Image Page&lt;/code&gt; tab:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Show the description, if available&lt;/code&gt; set&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Show the following attributes:&lt;/code&gt; set to &lt;code&gt;Title&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Screenshots&lt;/h2&gt;
&lt;h3&gt;Index Page&lt;/h3&gt;
&lt;p&gt;&lt;img alt="index screen shots" src="http://www.elfnor.com/images/index_screen.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Image Page&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image screen shots" src="http://www.elfnor.com/images/image_screen.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Demo Album&lt;/h2&gt;
&lt;p&gt;There's a demo album &lt;a href="http://elfnor.github.io/artworksgallery/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="webalbum"></category></entry><entry><title>Symmetry Group Links and Notation</title><link href="http://www.elfnor.com/Symmetry%20Group%20Links%20and%20Notation.html" rel="alternate"></link><updated>2014-07-18T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-07-18:Symmetry Group Links and Notation.html</id><summary type="html">&lt;p&gt;There are many great resources on the 17 plane symmetry groups.&lt;/p&gt;
&lt;p&gt;I made great use of a couple of on-line apps while writing my &lt;a href="http://www.elfnor.com/Symmetry Tile plug-in for GIMP.html"&gt;Symmetry Tile plug-in.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Morenaments&lt;/h2&gt;
&lt;p&gt;&lt;img alt="morenaments" src="http://www.elfnor.com/images/morenaments.png" /&gt;&lt;/p&gt;
&lt;p&gt;This great Java applet can either be used &lt;a href="http://www.morenaments.de/euc/applet"&gt;here on-line&lt;/a&gt; or &lt;a href="http://www.morenaments.de/euc/"&gt;downloaded&lt;/a&gt; as a &lt;code&gt;jar&lt;/code&gt; file and run locally.&lt;/p&gt;
&lt;p&gt;It allows you to draw on a canvas that automatically completes the chosen symmetry group.Be sure to investigate the menu on the top-right. Selecting tile and/or cell under the grid menu will show these on the pattern canvas and help with seeing the structure underlying a particular symmetry. Look in the manual under help for more information. Be sure to try dragging the coloured dots in the tile view around. These can show how the same symmetry pattern can have different shaped cell or tile.&lt;/p&gt;
&lt;h2&gt;Kali&lt;/h2&gt;
&lt;p&gt;&lt;img alt="kali" src="http://www.elfnor.com/images/kali.png" /&gt;&lt;/p&gt;
&lt;p&gt;This on-line Java applet can be used &lt;a href="http://www.scienceu.com/geometry/handson/kali/"&gt;here&lt;/a&gt;. Its much easier to do straight lines in this app. It uses the orbifold notation for the symmetry groups.&lt;/p&gt;
&lt;h2&gt;Books&lt;/h2&gt;
&lt;p&gt;The two books I consulted the most while working on this plug-in were:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Handbook-Regular-Patterns-Introduction-Dimensions/dp/0262690888"&gt;"Handbook of Regular Patterns: An Introduction to Symmetry in Two Dimensions" by Peter S. Stevens&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Designing-Tessellations-Secrets-Interlocking-Patterns/dp/0809228661/"&gt;"Designing Tessellations: The Secret of Interlocking Patterns" by Jinny Beyer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these references use different notations and descriptions for the symmetry groups. I've summarised them in the following table for easy reference. The Symmetry Tile plug-in uses the notation in the left most column.&lt;/p&gt;
&lt;h2&gt;Notation for Symmetry Groups&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Crystallography&lt;/th&gt;
&lt;th&gt;full&lt;/th&gt;
&lt;th&gt;Terrazo&lt;/th&gt;
&lt;th&gt;Jinny Beyer's description&lt;/th&gt;
&lt;th&gt;Orbifold&lt;/th&gt;
&lt;th&gt;Peter S. Stevens's description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;p1&lt;/td&gt;
&lt;td&gt;p1&lt;/td&gt;
&lt;td&gt;Gold Brick&lt;/td&gt;
&lt;td&gt;Translation&lt;/td&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;td&gt;Two Nonparallel Translations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p2&lt;/td&gt;
&lt;td&gt;p211&lt;/td&gt;
&lt;td&gt;Hither &amp;amp; Yon&lt;/td&gt;
&lt;td&gt;Midpoint or Half-Turn Rotation&lt;/td&gt;
&lt;td&gt;2222&lt;/td&gt;
&lt;td&gt;Four Half-Turns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pm&lt;/td&gt;
&lt;td&gt;p1m1&lt;/td&gt;
&lt;td&gt;Wings&lt;/td&gt;
&lt;td&gt;Mirror&lt;/td&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;Two Parallel Mirrors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pg&lt;/td&gt;
&lt;td&gt;p1g1&lt;/td&gt;
&lt;td&gt;Card Tricks&lt;/td&gt;
&lt;td&gt;Glide&lt;/td&gt;
&lt;td&gt;xx&lt;/td&gt;
&lt;td&gt;Two Parallel Glide Reflections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pgg&lt;/td&gt;
&lt;td&gt;p2gg&lt;/td&gt;
&lt;td&gt;Honey Bees&lt;/td&gt;
&lt;td&gt;Double Glide&lt;/td&gt;
&lt;td&gt;22x&lt;/td&gt;
&lt;td&gt;Two Perpendicular Glide Reflections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pmm&lt;/td&gt;
&lt;td&gt;p2mm&lt;/td&gt;
&lt;td&gt;Prickly Pear&lt;/td&gt;
&lt;td&gt;Double Mirror&lt;/td&gt;
&lt;td&gt;*2222&lt;/td&gt;
&lt;td&gt;Reflections in Four Sides of a Rectangle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pmg&lt;/td&gt;
&lt;td&gt;p2mg&lt;/td&gt;
&lt;td&gt;Lightning&lt;/td&gt;
&lt;td&gt;Glided Staggered Mirror&lt;/td&gt;
&lt;td&gt;22*&lt;/td&gt;
&lt;td&gt;A Mirror and a Perpendicular Reflection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cm&lt;/td&gt;
&lt;td&gt;c1m1&lt;/td&gt;
&lt;td&gt;Crab Claws&lt;/td&gt;
&lt;td&gt;Staggered Mirror&lt;/td&gt;
&lt;td&gt;*x&lt;/td&gt;
&lt;td&gt;A Reflection and a Parallel Glide Reflection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmm&lt;/td&gt;
&lt;td&gt;c2mm&lt;/td&gt;
&lt;td&gt;Spider Web&lt;/td&gt;
&lt;td&gt;Staggered Double Mirror&lt;/td&gt;
&lt;td&gt;2*22&lt;/td&gt;
&lt;td&gt;Perpendicular Mirrors and Perpendicular Glide Reflections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p4&lt;/td&gt;
&lt;td&gt;p4gm&lt;/td&gt;
&lt;td&gt;Pinwheel&lt;/td&gt;
&lt;td&gt;Pinwheel or Quarter-Turn Rotation&lt;/td&gt;
&lt;td&gt;442&lt;/td&gt;
&lt;td&gt;Quarter-Turns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p3m1&lt;/td&gt;
&lt;td&gt;p3m1&lt;/td&gt;
&lt;td&gt;Winding Ways&lt;/td&gt;
&lt;td&gt;Mirror and Three Rotations&lt;/td&gt;
&lt;td&gt;*333&lt;/td&gt;
&lt;td&gt;Reflections in an Equilateral Triangle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p3&lt;/td&gt;
&lt;td&gt;p3&lt;/td&gt;
&lt;td&gt;Storm at Sea&lt;/td&gt;
&lt;td&gt;Three Rotation&lt;/td&gt;
&lt;td&gt;333&lt;/td&gt;
&lt;td&gt;Three Rotations through 120°&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p4g&lt;/td&gt;
&lt;td&gt;p4gm&lt;/td&gt;
&lt;td&gt;Primrose Path&lt;/td&gt;
&lt;td&gt;Mirrored Pinwheel&lt;/td&gt;
&lt;td&gt;4*2&lt;/td&gt;
&lt;td&gt;Reflections of Quarter-Turns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p4m&lt;/td&gt;
&lt;td&gt;p4mm&lt;/td&gt;
&lt;td&gt;Sunflower&lt;/td&gt;
&lt;td&gt;Traditional Block&lt;/td&gt;
&lt;td&gt;*442&lt;/td&gt;
&lt;td&gt;Reflections on the Sides of a 45°-45°-90° Triangle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p6&lt;/td&gt;
&lt;td&gt;p6&lt;/td&gt;
&lt;td&gt;Whirlpool&lt;/td&gt;
&lt;td&gt;Six Rotation&lt;/td&gt;
&lt;td&gt;632&lt;/td&gt;
&lt;td&gt;Sixfold Rotation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p31m&lt;/td&gt;
&lt;td&gt;p31m&lt;/td&gt;
&lt;td&gt;Monkey Wrench&lt;/td&gt;
&lt;td&gt;Three Rotations and a Mirror&lt;/td&gt;
&lt;td&gt;3*3&lt;/td&gt;
&lt;td&gt;Refections of 120° Turns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p6m&lt;/td&gt;
&lt;td&gt;p6mm&lt;/td&gt;
&lt;td&gt;Turnstile&lt;/td&gt;
&lt;td&gt;Kaleidoscope&lt;/td&gt;
&lt;td&gt;*632&lt;/td&gt;
&lt;td&gt;Refections in the Sides of a 30°-60°-90° Triangle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The symmetry groups that can be made with rectangular or square cells can be defined using the &lt;a href="http://www.elfnor.com/Symmetry Tile plug-in for GIMP.html#bdpq"&gt;"bdpq" notation&lt;/a&gt;. If the "bdpq" string contains a plus sign then the cell must be square. The strings for all the symmetry groups start with a "b". Each of the symmetry groups could be created with an alternative string starting with one of the other letters.&lt;/p&gt;
&lt;p&gt;The 32 strings here are this produced by the Symmetry Tile plugin when "all square cells" is selected and "Multiple" is set to "Yes". When "Multiple" is set to "No" only one string from each symmetry group is used.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Symmetry Group&lt;/th&gt;
    &lt;th&gt;bdpq string&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;p1&lt;/td&gt;
    &lt;td&gt;b&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;p2&lt;/td&gt;
    &lt;td&gt;bq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b|q&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bq|qb&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pm&lt;/td&gt;
    &lt;td&gt;bd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b|p&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;cm&lt;/td&gt;
    &lt;td&gt;bp|pb&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bd|db&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;cmm&lt;/td&gt;
    &lt;td&gt;bdpq|pqbd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bd|qp|db|pq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bqpd|pdbq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bd|pq|db|qp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pg&lt;/td&gt;
    &lt;td&gt;bp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b|d&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bd+|d+b&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bp+|p+b&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pgg&lt;/td&gt;
    &lt;td&gt;bp|dq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bq|dp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bp|qd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pmg&lt;/td&gt;
    &lt;td&gt;bd|qp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b|p|d|q&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b|q|d|p&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bdpq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bqpd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bq|pd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pmm&lt;/td&gt;
    &lt;td&gt;bd|pq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;p4&lt;/td&gt;
    &lt;td&gt;bb+|q+q&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bq+|b+q&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;p4g&lt;/td&gt;
    &lt;td&gt;bdp+b+|pqq+d+|p+b+bd|q+d+pq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bdd+q+|b+p+pq|d+q+bd|pqb+p+&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bb+p+d|q+qpd+|p+dbb+|pd+q+q&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bq+d+d|pp+b+q|d+dbq+|b+qpp+&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="symmetrytile"></category></entry><entry><title>Symmetry Tile with non-rectangular cells</title><link href="http://www.elfnor.com/Symmetry%20Tile%20with%20non-rectangular%20cells.html" rel="alternate"></link><updated>2014-07-13T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-07-13:Symmetry Tile with non-rectangular cells.html</id><summary type="html">&lt;p&gt;With the Symmetry Tile plug-in the user selects an area using the rectangle select tool, before running the plug-in. The plug-in then derives a cell to use to form the user's choice of symmetry pattern. For many of the symmetries that derived cell is the same as the selected rectangle. Some of the symmetries need a cell shape other than the rectangle. Those cell shapes and their relation to the user's rectangle are shown below, along with the symmetry groups that use that cell shape.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Derived Cells" src="images/derived_cells.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Square&lt;/strong&gt; - p4, p4g, pg (some)&lt;br /&gt;
&lt;strong&gt;Equilateral Triangle&lt;/strong&gt; - p3m1, p6&lt;br /&gt;
&lt;strong&gt;Half square triangle&lt;/strong&gt; - p4m&lt;br /&gt;
&lt;strong&gt;90, 60 and 30 degree triangle&lt;/strong&gt; - p6m&lt;br /&gt;
&lt;strong&gt;Diamond&lt;/strong&gt; - p3&lt;br /&gt;
&lt;strong&gt;Kite&lt;/strong&gt; - p31m  &lt;/p&gt;
&lt;p&gt;In many cases the user may want to create specific content to fill the required cell shape. It would be easier to have this shape on the screen to help you to draw the cell content in the correct place. Here's how to do that. I'll use the kite shaped cell here as an example but this method applies to any of the non-rectangular cells.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new image with a transparent background. &lt;/li&gt;
&lt;li&gt;Select a rectangle about the size you want your cell to be. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="odd_cells_01" src="images/Screenshot-GIMP-odd_cells_01.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run the Symmetry Tile plug-in, choosing a symmetry group that uses the desired cell (p31m for the kite). This will produce a blank transparent image which can be discarded. The plug-in will also leave the correct shaped cell selected in the original image.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="odd_cells_02" src="images/Screenshot-GIMP-odd_cells_02.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert that selection to a path. (Select&amp;gt; To Path). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="odd_cells_03" src="images/Screenshot-GIMP-odd_cells_03.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The path can now be used as a guide to the cell shape. Use it to draw the cell content in the correct place, filling the cell area with brush strokes etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="odd_cells_04" src="images/Screenshot-GIMP-odd_cells_04.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the path, convert it back to a selection  and re run the plug-in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="odd_cells_05" src="images/Screenshot-GIMP-odd_cells_05.png" /&gt;&lt;/p&gt;
&lt;p&gt;Credit for this method is due to lylejk who posted it over on &lt;a href="http://www.gimpchat.com/viewtopic.php?f=9&amp;amp;t=10683&amp;amp;start=30#p141775"&gt;gimpchat&lt;/a&gt;.&lt;/p&gt;</summary><category term="make"></category><category term="think"></category><category term="symmetrytile"></category></entry><entry><title>Using the Symmetry Tile plug-in for Quilt Design</title><link href="http://www.elfnor.com/Using%20the%20Symmetry%20Tile%20plug-in%20for%20Quilt%20Design.html" rel="alternate"></link><updated>2014-07-12T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-07-12:Using the Symmetry Tile plug-in for Quilt Design.html</id><summary type="html">&lt;p&gt;The block patterns used in quilts are a great example of a pattern with repeating symmetry. Using a computer to play with these repeating symmetry patterns is a great way to design quilts. &lt;/p&gt;
&lt;p&gt;I've written a plug-in for a image editing program called &lt;a href="http://www.gimp.org/"&gt;GIMP&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GIMP is an acronym for GNU Image Manipulation Program. It is a freely distributed program for such tasks as photo retouching, image composition and image authoring.&lt;/p&gt;
&lt;p&gt;It has many capabilities. It can be used as a simple paint program, an expert quality photo retouching program, an online batch processing system, a mass production image renderer, an image format converter, etc.&lt;/p&gt;
&lt;p&gt;GIMP is expandable and extensible. It is designed to be augmented with plug-ins and extensions to do just about anything. The advanced scripting interface allows everything from the simplest task to the most complex image manipulation procedures to be easily scripted.&lt;/p&gt;
&lt;p&gt;GIMP is written and developed under X11 on UNIX platforms. But basically the same code also runs on MS Windows and Mac OS X. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The plug-in I've written is called Symmetry Tile and instructions on downloading and installing it can be found &lt;a href="http://elfnor.github.io/lookthinkmake/Symmetry%20Tile%20plug-in%20for%20GIMP.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This plug-in takes the selection from an image ("cell") and produces a new image according to 
one of the &lt;a href="http://en.wikipedia.org/wiki/Wallpaper_groups"&gt;17 plane symmetry groups &lt;/a&gt;. These are also known as wallpaper groups or plane crystallographic groups. &lt;/p&gt;
&lt;p&gt;Basically it rotates and or flips copies of the cell, combines them to form a tile and then copies that tile to fill a new image.&lt;/p&gt;
&lt;p&gt;Some galleries of images produced with this plug-in can be found &lt;a href="http://elfnor.github.io/symmetrytilegallery"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post gives some examples of how you might use Symmetry Tile for quilt design. It presumes you're familiar with the basics of using GIMP, but should be able to be followed by someone who has used similar programs such as Photoshop or Photopaint.&lt;/p&gt;
&lt;h2&gt;The basic block element of the design.&lt;/h2&gt;
&lt;p&gt;Create a new image from the file menu. Start off fairly small say 200 x 200 pixels. We're going to end up with lots of copies of this across the screen, and there's not a lot of point in working at very high resolution.&lt;/p&gt;
&lt;p&gt;Turn on the grid and 'snap to grid' from the edit menu. Choose the pencil from the toolbox and set it to maybe 1 or 2 pixels in size.&lt;/p&gt;
&lt;p&gt;Draw a square 120 X 120 pixels, and then some straight lines inside to make the seam lines on a basic block. You'll make more different patterns if your basic block is non-symmetric. The block on the left is non-symmetric. The block on the right would look the same if it was flipped or mirrored about the dotted blue line. &lt;/p&gt;
&lt;p&gt;&lt;img alt="line blocks" src="images/two_cells_lines.png" /&gt;&lt;/p&gt;
&lt;p&gt;Use the fill tool (bucket) to fill each piece with a colour or pattern. Once coloured in a symmetric block can become non-symmetric. The block on the right with the coloured fill, no longer looks the same if it is flipped or mirrored. &lt;/p&gt;
&lt;p&gt;&lt;img alt="filled blocks" src="images/two_cells.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Playing with symmetry&lt;/h2&gt;
&lt;p&gt;Use the rectangular select tool to select the block. Find the Symmetry Tile Plug-in under Render on the Filters menu.
Choose the image size to be a multiple of the block size, say 720 x 720 pixels. Choose one of the symmetry groups and click OK to see the result. Experiment with different symmetry groups to see what they do. For the complete effect choose &lt;code&gt;all square cells&lt;/code&gt; from the Symmetry Groups menu and set Multiple images to &lt;code&gt;Yes&lt;/code&gt;. Your screen should fill up with 32 images (they may all be hiding under the top image). &lt;/p&gt;
&lt;p&gt;If you used the original cell, I used above, then amongst all those images will be some familiar to traditional quilters. &lt;/p&gt;
&lt;h3&gt;Pinwheels&lt;/h3&gt;
&lt;p&gt;&lt;img alt="pinwheels" src="images/p4_bbtlqtq.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Flying Geese&lt;/h3&gt;
&lt;p&gt;&lt;img alt="flying geese" src="images/cm_bplpb.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Double Zigzag&lt;/h3&gt;
&lt;p&gt;&lt;img alt="double zigzag" src="images/cmm_bdlqpldblpq.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Hourglass&lt;/h3&gt;
&lt;p&gt;&lt;img alt="hourglass" src="images/p4g_bbtptdlqtqpdtlptdbbtlpdtqtq.png" /&gt;&lt;/p&gt;
&lt;p&gt;Where you go from here is up to you. A sampler quilt with a selection of these design separated by borders is one possibility. &lt;/p&gt;
&lt;p&gt;I next opened a new much larger image and copied then pasted as layer some of the designs I liked the look of. With each designed as a separate layer they can be moved around and under each other until a potential quilt design is arrived at. The design below has about 5 different patterns arranged so the design morphs from one pattern to the next. It takes a little bit of time to catch on that only one basic block is used to achieve the different patterns.&lt;/p&gt;
&lt;p&gt;&lt;img alt="quilt design" src="images/quilt_02.png" /&gt;&lt;/p&gt;</summary><category term="make"></category><category term="think"></category><category term="symmetrytile"></category></entry><entry><title>Symmetry Tile plug-in for GIMP</title><link href="http://www.elfnor.com/Symmetry%20Tile%20plug-in%20for%20GIMP.html" rel="alternate"></link><updated>2014-07-05T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-07-05:Symmetry Tile plug-in for GIMP.html</id><summary type="html">&lt;p&gt;These are the docs for my Symmetry Tile plug-in for GIMP.&lt;/p&gt;
&lt;p&gt;The plug-in can be obtained &lt;a href="https://www.github.com/elfnor/symmetrytile"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This plug-in takes the selection from an image ("cell") and produces a new image according to 
one of the &lt;a href="http://en.wikipedia.org/wiki/Wallpaper_groups"&gt;17 plane symmetry groups &lt;/a&gt;. These are also known as wallpaper groups or plane crystallographic groups. &lt;/p&gt;
&lt;p&gt;Basically it rotates and or flips copies of the cell, combines them to form a tile and then copies that tile to fill a new image.&lt;/p&gt;
&lt;p&gt;Some galleries of images produced with this plug-in can be found &lt;a href="http://elfnor.github.io/symmetrytilegallery"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Requires &lt;a href="http://www.gimp.org/"&gt;GIMP&lt;/a&gt; to be installed.&lt;/p&gt;
&lt;p&gt;From within GIMP find out where your plug-in directory is:&lt;/p&gt;
&lt;p&gt;Edit&amp;gt;Preferences&amp;gt;Folders&amp;gt;Plug-ins&lt;/p&gt;
&lt;p&gt;For Linux the plug-in directory will probably be &lt;code&gt;~/.gimp-2.8/plugins&lt;/code&gt;
Copy the file &lt;code&gt;symmetry_tile.py&lt;/code&gt; to this folder and make it "executable". To do this: select the plug-in from your file browser, click properties and check the box "Allow executable" under the permissions tab.&lt;/p&gt;
&lt;p&gt;For Windows the plug-in directory will be probably be &lt;code&gt;C:\Users\username\gimp-2.8\plug-ins&lt;/code&gt;. Copy the file &lt;code&gt;symmetry_tile.py&lt;/code&gt; to this folder.&lt;/p&gt;
&lt;p&gt;Restart GIMP to activate the plugin.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Select an area on an image using the rectangle select tool.
Start the plug-in via Filters&amp;gt;Render&amp;gt;Symmetry Tile&lt;/p&gt;
&lt;p&gt;You should see the following dialog. &lt;/p&gt;
&lt;p&gt;&lt;img alt="plugin dialog" src="images/plugin_dialog.png" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Height&lt;/code&gt; and &lt;code&gt;Width&lt;/code&gt; parameters determine the size of the new image.
The &lt;code&gt;Symmetry group&lt;/code&gt; drop down gives you the choice of one of the 17 symmetry groups p1, p2 through to p6m. The last three entries I'll cover later. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Multiple Images&lt;/code&gt; toggle is set by default to &lt;code&gt;No&lt;/code&gt;. In this mode it produces one image for the chosen symmetry group. Some groups (p2, pm, cm, cmm, pg, pgg, pmg, p4, p4g, p6) can produce different patterns depending on, for example, which corner of the cell a copy is rotated around to form the tile. If the &lt;code&gt;Multiple Images&lt;/code&gt; toogle is set to &lt;code&gt;Yes&lt;/code&gt;, a separate image is produced for each of these different patterns.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;bdpq string&lt;/code&gt; entry box is covered below under Escher's Potato Game.&lt;/p&gt;
&lt;h3&gt;Deriving the initial cell&lt;/h3&gt;
&lt;p&gt;Many of the symmetry groups can be produced from a rectangular cell (p1, p2, pm, cm, cmm, pg, pgg, pmg, pmm). These groups use the user selection unmodified. Some groups (p4, p4g) require an initial square cell. In this case, a square primary cell is derived from the user's initial rectangular selection. The left most side of the rectangle is used as the left edge of the square.&lt;/p&gt;
&lt;p&gt;Two groups (p3m1, p6) are produced from a equilateral triangle shaped cell. This cell is derived from the user's rectangular selection with the triangle sharing the rectangle's left side, and the triangle pointing to the right.&lt;/p&gt;
&lt;p&gt;The p4m group requires a half square triangle for the initial cell.  The left most side of the user's rectangle is used as the left edge of the triangle, with the rectangle and triangle sharing the top left corner.&lt;/p&gt;
&lt;p&gt;The p6m group requires a triangle with internal angles of 90, 60 and 30 degrees for the initial cell. The left most side of the rectangle is used as the left longer edge of the triangle, with the rectangle and triangle sharing the top left corner. &lt;/p&gt;
&lt;p&gt;The p3 group needs a diamond shape (rhombus) with internal angles of 30 and 60 degrees for the initial cell. The diamond shares the rectangle's left side and the diamond points down and to the right.&lt;/p&gt;
&lt;p&gt;The p31m group uses a kite shape for the initial cell. The kite shares the rectangle's left side and the top left corner.&lt;/p&gt;
&lt;p&gt;The figure below  illustrates this, with the user's rectangular selection shown as a dotted line and the derived initial cell as a solid line.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Derived Cells" src="images/derived_cells.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Last 3 Symmetry group options&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;17 groups&lt;/code&gt; option makes all the patterns from the same user selection. If &lt;code&gt;Multiple Images&lt;/code&gt; is set to &lt;code&gt;No&lt;/code&gt; this will produce 17 images. If it is set to &lt;code&gt;Yes&lt;/code&gt;, 40 images will be produced. Depending on your machine's capability its probably not a good idea to make 40 very large images!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;all square cells&lt;/code&gt; option derives a square cell and uses it for all the groups that can be made with a square cell. There are 11 images produced without &lt;code&gt;Multiple Images&lt;/code&gt; set and 32 images when &lt;code&gt;Multiple Images&lt;/code&gt; is set.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Escher's Potato Game&lt;/code&gt; is briefly described &lt;a href="http://www.eschertiles.com/index.html"&gt;here&lt;/a&gt; along with an interactive app. This paper &lt;a href="http://www.combinatorics.org/Volume_4/PDF/v4i2r17.pdf"&gt;(pdf)&lt;/a&gt; by Doris Schattschneider describes the idea more fully. In the Symmetry Tile plug-in, if the &lt;code&gt;bdpq string&lt;/code&gt; entry is left blank, choosing the &lt;code&gt;Escher's Potato Game&lt;/code&gt; option will produce from the user's selection a random pattern conforming to the rules of the Potato Game.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;bdpq string&lt;/code&gt; entry is filled with an appropriate string that string will be used to construct an image from the user's selection.&lt;/p&gt;
&lt;p&gt;&lt;a name="bdpq"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;How to write a bdpq string&lt;/h3&gt;
&lt;p&gt;The "bdpq" notation is a useful shorthand to describe patterns built from square and rectangular cells.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;bdpq string&lt;/code&gt; entry takes a string similar  to &lt;code&gt;bq|qb&lt;/code&gt; and builds a tile for a pattern based on the user selected rectangular cell.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;syntax&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;b&lt;/span&gt;  &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="n"&gt;flipped&lt;/span&gt; &lt;span class="n"&gt;horizontally&lt;/span&gt;  
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="n"&gt;flipped&lt;/span&gt; &lt;span class="n"&gt;vertically&lt;/span&gt;  
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="n"&gt;rotated&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt; &lt;span class="n"&gt;deg&lt;/span&gt;

    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;denotes&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;

&lt;span class="n"&gt;That&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bq&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;qb&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;tile&lt;/span&gt;

&lt;span class="n"&gt;bq&lt;/span&gt;  
&lt;span class="n"&gt;qb&lt;/span&gt;

&lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;hence&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symmetry&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bqbqbq&lt;/span&gt;
&lt;span class="n"&gt;qbqbqb&lt;/span&gt;
&lt;span class="n"&gt;bqbqbq&lt;/span&gt;
&lt;span class="n"&gt;qbqbqb&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="n"&gt;represent&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="n"&gt;rotated&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="n"&gt;deg&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clockwise&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the original user selection contains the letter 'b', then if the cell is flipped around a vertical axis it will look like the letter 'd'. If the letter 'b' is flipped around the horizontal axis it will look like the letter 'p'. if the letter 'b' is rotated 180 degrees it will look like the letter 'q'. (this depends a bit on the font of course).&lt;/p&gt;
&lt;p&gt;If the original cell is square then 90 degree rotations of copies of it can also be used to build a tile from the cell. Unfortunately there are no suitable letters to easily describe these and I've chosen to call these cells 'b+', 'd+', 'p+' and 'q+'. Each is the respective cell rotated 90 degrees clockwise.&lt;/p&gt;
&lt;p&gt;The eight different variations of the original tile are shown here.&lt;/p&gt;
&lt;p&gt;&lt;img alt="bdpq cells" src="images/bdpq_cells.png" /&gt;&lt;/p&gt;
&lt;p&gt;The string can be arbitrarily long, but each row should have the same number of cells. The plug-in does not check to see whether the bdpq string is properly formed. Odd results will probably occur for odd strings.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;bdpq string&lt;/code&gt; entry is blank when the &lt;code&gt;Escher's Potato Game&lt;/code&gt; option is chosen the plug-in will make up a tile from  4 cells in 2 rows of 2. Each cell will be picked from a random selection of the b, b+, d, d+, p, p+, q, q+ transformations of the original selection. The string used can be seen in the file name of the new image. (the '+' sign is replaced by a 't' and the '|' by a 'l')&lt;/p&gt;
&lt;p&gt;As an example this initial cell.&lt;/p&gt;
&lt;p&gt;&lt;img alt="epg_cell.png" src="images/epg_cell.png" /&gt;&lt;/p&gt;
&lt;p&gt;and &lt;code&gt;bdb+d+|pqp+q+&lt;/code&gt; entered into the &lt;code&gt;bdpq string&lt;/code&gt; entry, produces this pattern&lt;/p&gt;
&lt;p&gt;&lt;img alt="epg_bdbtdtlpqptqt.png" src="images/epg_bdbtdtlpqptqt.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Extra tip:&lt;/h3&gt;
&lt;p&gt;If after generating 40 images you want to save them all, here is some code to type into the python console. (Filters&amp;gt;Python-Fu&amp;gt;Console)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;img&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;gimp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;image_list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
   &lt;span class="s-Atom"&gt;new_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/tmp/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s-Atom"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[:-&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.png&amp;quot;&lt;/span&gt;
   &lt;span class="s-Atom"&gt;pdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gimp_file_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s-Atom"&gt;new_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;new_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There ought to be a plug-in for saving all the images...&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="symmetrytile"></category></entry><entry><title>Pelican and markdown styling cheat-sheet</title><link href="http://www.elfnor.com/pelican-and-markdown-styling-cheat-sheet.html" rel="alternate"></link><updated>2014-06-19T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-06-19:pelican-and-markdown-styling-cheat-sheet.html</id><summary type="html">&lt;p&gt;A &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; blog consists of:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;markdown&lt;/strong&gt; text files containing &lt;strong&gt;content&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; jinga2&lt;/strong&gt; html template files defining the pages &lt;strong&gt;layout&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS&lt;/strong&gt; style file that determine how the page elements &lt;strong&gt;look&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These elements are processed by the Pelican python software to produce the static html pages that make up this blog.&lt;/p&gt;
&lt;p&gt;Lots of blogs (I used &lt;a href="http://www.circuidipity.com/github-pages.html"&gt;this one&lt;/a&gt; mainly) have very good information on installing Pelican. Many &lt;a href="http://www.krisyu.org/blog/posts/2013/06/markdown-and-latex-reference"&gt;for example&lt;/a&gt; also have the markdown codes used in text files to define what parts of the text are code blocks, what parts are quotes. But I couldn't find a post that described where and how to edit the CSS style files that determine how the the different elements look on the finished blog.&lt;/p&gt;
&lt;p&gt;I'll try and write that post. &lt;/p&gt;
&lt;p&gt;A warning: I'm fairly new and no expert on html or CSS and most of this information comes from poking pelican themes and seeing what happens. Most of this should apply to any Pelican theme, but mostly I'll be fiddling about with the pelican-simplegrey theme.&lt;/p&gt;
&lt;h2&gt;In-line Code&lt;/h2&gt;
&lt;p&gt;This is text such as &lt;code&gt;this&lt;/code&gt; that is normally used for a short piece of code in a a paragraph. It is enclosed in back quote marks, the key in the extreme top left of a US keyboard.&lt;/p&gt;
&lt;p&gt;It might also be used when a variable name or file name &lt;code&gt;~\file.txt&lt;/code&gt; is referred to in a paragraph.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;This is text such as `this` that is normally...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The static html produced by Pelican is:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is text such as &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;this&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; that is normally used for a short piece of code in a a paragraph. &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This format of the in-line code element is given by a piece of CSS such as this, included in the theme &lt;code&gt;main.css&lt;/code&gt; or &lt;code&gt;style.css&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;code&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Source Code Pro&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.9em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;letter-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.015em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Code Blocks&lt;/h2&gt;
&lt;p&gt;This is a block set of from the main text, normally containing a longer piece of code.
The blocks can be defined in a number of different ways, indenting, four &lt;code&gt;~~~~&lt;/code&gt;, but I'll show examples with triple back quote marks (```).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;```  
# python code  
mystr = &amp;#39;Hello world&amp;#39;  
print(&amp;#39;%s&amp;#39;%(mystr))  
```   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produces this html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;# python code&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;mystr&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;=&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;Hello world&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;si&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;%s&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;%&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;mystr&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;))&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and this output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# python code&lt;/span&gt;
&lt;span class="n"&gt;mystr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mystr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The style for the &lt;code&gt;pre&lt;/code&gt; element is defined in the &lt;code&gt;main.css&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;pre&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Source Code Pro&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt; &lt;span class="k"&gt;repeat&lt;/span&gt; &lt;span class="k"&gt;scroll&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;#F0F0F0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.9em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;letter-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.015em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;130&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.7em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;white-space&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;break&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and mostly defines fonts and backgrounds. All the span elements are produced by pygments code and coloured according to the css normally stored in &lt;code&gt;pygments.css&lt;/code&gt;.  The easiest way to change this is to use a predefined css from another style (pelican-bootstrap3 has lots).&lt;/p&gt;
&lt;p&gt;To add line numbers to the displayed code block use &lt;code&gt;#!&lt;/code&gt; at the start of the first line of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;```python  
#! python code  
mystr = &amp;#39;Hello world&amp;#39;  
print(&amp;#39;%s&amp;#39;%(mystr))  
```   
&lt;/pre&gt;&lt;/div&gt;


&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#! python code  &lt;/span&gt;
&lt;span class="n"&gt;mystr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mystr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Block Quotes&lt;/h2&gt;
&lt;p&gt;Blockquotes can be indicated with &amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here's a blockquote.&lt;/p&gt;
&lt;p&gt;This a much longer multi paragraph block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; Here&amp;#39;s a blockquote.

&amp;gt; This a much longer multi paragraph block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines. 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produced by this html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;blockquote&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Here&amp;#39;s a blockquote.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This a much longer multi paragraph block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines. &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The style for the &lt;code&gt;blockquote&lt;/code&gt; element is defined in the &lt;code&gt;main.css&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;italic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Attribute lists&lt;/h2&gt;
&lt;p&gt;If you want to have several different types of an element, each with its own style, you can use attribute lists. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;For example different coloured in-line `code in red`{: .red} and `green`{: .green}.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example different coloured in-line &lt;code class="red"&gt;code in red&lt;/code&gt; and &lt;code class="green"&gt;green&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;For example different coloured in-line &lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;code in red&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; and &lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;green&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Along with the following css in &lt;code&gt;main.css&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="nc"&gt;.red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="nc"&gt;.green&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Headings&lt;/h2&gt;
&lt;p&gt;Headings can be made in markdown by underlining with equal signs (===========) to give h1 tags, underlining with underscores (---------) to give h2 tags, or by enclosing the headings with hash (#Heading#) symbols. The number of hash symbols gives the heading depth.&lt;/p&gt;
&lt;h1&gt;H1&lt;/h1&gt;
&lt;h1&gt;H1&lt;/h1&gt;
&lt;h2&gt;H2&lt;/h2&gt;
&lt;h2&gt;H2&lt;/h2&gt;
&lt;h3&gt;H3&lt;/h3&gt;
&lt;p&gt;markdown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#H1#
H1
==
##H2##
H2
--
###H3###
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HTML&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;H1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;H1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;H2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;H2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;H3&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CSS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#711&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Source Sans Pro&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="k"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;text-shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1em&lt;/span&gt; &lt;span class="m"&gt;0.1em&lt;/span&gt; &lt;span class="m"&gt;0.1em&lt;/span&gt; &lt;span class="m"&gt;#EFEFEF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.67em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.7em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Learning more&lt;/h2&gt;
&lt;p&gt;I could carry on with examples for styling other elements such as lists and links, but the learning process is fairly straight forward.
On your blog, or someone else's, right click on an element (Firefox or Chrome) and choose inspect element. A window opens at the bottom of the screen with the html for the element highlighted on the left and the style css highlighted on the right. If the element has its own css, look that up in your theme's css files and alter it to suit. A web search will give you lots of examples for styling each element. If all of the css is inherited from &lt;code&gt;body&lt;/code&gt; for your chosen element then look at the tags that wrap the element in the html file. Add a section to the css for that type of element tag and continue as above.&lt;/p&gt;
&lt;p&gt;I'll follow this up with a post on the basics of layout using Jinja2 templates.&lt;/p&gt;</summary><category term="pelican"></category><category term="markdown"></category></entry></feed>