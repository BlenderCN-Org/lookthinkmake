<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Look Think Make</title><link href="http://elfnor.github.io/lookthinkmake/" rel="alternate"></link><link href="http://elfnor.github.io/lookthinkmake/feeds/all.atom.xml" rel="self"></link><id>http://elfnor.github.io/lookthinkmake/</id><updated>2014-06-19T22:00:00+12:00</updated><entry><title>Pelican and markdown styling cheat-sheet</title><link href="http://elfnor.github.io/lookthinkmake/pelican-and-markdown-styling-cheat-sheet.html" rel="alternate"></link><updated>2014-06-19T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:elfnor.github.io/lookthinkmake,2014-06-19:pelican-and-markdown-styling-cheat-sheet.html</id><summary type="html">&lt;p&gt;A &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; blog consists of:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;markdown&lt;/strong&gt; text files containing &lt;strong&gt;content&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; jinga2&lt;/strong&gt; html template files defining the pages &lt;strong&gt;layout&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS&lt;/strong&gt; style file that determine how the page elements &lt;strong&gt;look&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These elements are processed by the Pelican python software to produce the static html pages that make up this blog.&lt;/p&gt;
&lt;p&gt;Lots of blogs (I used &lt;a href="http://www.circuidipity.com/github-pages.html"&gt;this one&lt;/a&gt; mainly) have very good information on installing Pelican. Many &lt;a href="http://www.krisyu.org/blog/posts/2013/06/markdown-and-latex-reference"&gt;for example&lt;/a&gt; also have the markdown codes used in text files to define what parts of the text are code blocks, what parts are quotes. But I couldn't find a post that described where and how to edit the CSS style files that determine how the the different elements look on the finished blog.&lt;/p&gt;
&lt;p&gt;I'll try and write that post. &lt;/p&gt;
&lt;p&gt;A warning: I'm fairly new and no expert on html or CSS and most of this information comes from poking pelican themes and seeing what happens. Most of this should apply to any Pelican theme, but mostly I'll be fiddling about with the pelican-simplegrey theme.&lt;/p&gt;
&lt;h2&gt;In-line Code&lt;/h2&gt;
&lt;p&gt;This is text such as &lt;code&gt;this&lt;/code&gt; that is normally used for a short piece of code in a a paragraph. It is enclosed in back quote marks, the key in the extreme top left of a US keyboard.&lt;/p&gt;
&lt;p&gt;It might also be used when a variable name or file name &lt;code&gt;~\file.txt&lt;/code&gt; is referred to in a paragraph.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;This is text such as `this` that is normally...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The static html produced by Pelican is:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is text such as &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;this&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; that is normally used for a short piece of code in a a paragraph. &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This format of the in-line code element is given by a piece of CSS such as this, included in the theme &lt;code&gt;main.css&lt;/code&gt; or &lt;code&gt;style.css&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;code&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Source Code Pro&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.9em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;letter-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.015em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Code Blocks&lt;/h2&gt;
&lt;p&gt;This is a block set of from the main text, normally containing a longer piece of code.
The blocks can be defined in a number of different ways, indenting, four &lt;code&gt;~~~~&lt;/code&gt;, but I'll show examples with triple back quote marks (```).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;```  
# python code  
mystr = &amp;#39;Hello world&amp;#39;  
print(&amp;#39;%s&amp;#39;%(mystr))  
```   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produces this html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;# python code&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;mystr&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;=&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;Hello world&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;si&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;%s&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;%&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;mystr&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;))&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and this output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# python code&lt;/span&gt;
&lt;span class="n"&gt;mystr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mystr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The style for the &lt;code&gt;pre&lt;/code&gt; element is defined in the &lt;code&gt;main.css&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;pre&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Source Code Pro&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt; &lt;span class="k"&gt;repeat&lt;/span&gt; &lt;span class="k"&gt;scroll&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;#F0F0F0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.9em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;letter-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.015em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;130&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.7em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;white-space&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;break&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and mostly defines fonts and backgrounds. All the span elements are produced by pygments code and coloured according to the css normally stored in &lt;code&gt;pygments.css&lt;/code&gt;.  The easiest way to change this is to use a predefined css from another style (pelican-bootstrap3 has lots).&lt;/p&gt;
&lt;p&gt;To add line numbers to the displayed code block use &lt;code&gt;#!&lt;/code&gt; at the start of the first line of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;```python  
#! python code  
mystr = &amp;#39;Hello world&amp;#39;  
print(&amp;#39;%s&amp;#39;%(mystr))  
```   
&lt;/pre&gt;&lt;/div&gt;


&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#! python code  &lt;/span&gt;
&lt;span class="n"&gt;mystr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mystr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Block Quotes&lt;/h2&gt;
&lt;p&gt;Blockquotes can be indicated with &amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here's a blockquote.&lt;/p&gt;
&lt;p&gt;This a much longer multi paragraph block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; Here&amp;#39;s a blockquote.

&amp;gt; This a much longer multi paragraph block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines. 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produced by this html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;blockquote&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Here&amp;#39;s a blockquote.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This a much longer multi paragraph block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines. &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The style for the &lt;code&gt;blockquote&lt;/code&gt; element is defined in the &lt;code&gt;main.css&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;italic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Attribute lists&lt;/h2&gt;
&lt;p&gt;If you want to have several different types of an element, each with its own style, you can use attribute lists. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;For example different coloured in-line `code in red`{: .red} and `green`{: .green}.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example different coloured in-line &lt;code class="red"&gt;code in red&lt;/code&gt; and &lt;code class="green"&gt;green&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;For example different coloured in-line &lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;code in red&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; and &lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;green&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Along with the following css in &lt;code&gt;main.css&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="nc"&gt;.red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="nc"&gt;.green&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Headings&lt;/h2&gt;
&lt;p&gt;Headings can be made in markdown by underlining with equal signs (===========) to give h1 tags, underlining with underscores (---------) to give h2 tags, or by enclosing the headings with hash (#Heading#) symbols. The number of hash symbols gives the heading depth.&lt;/p&gt;
&lt;h1&gt;H1&lt;/h1&gt;
&lt;h1&gt;H1&lt;/h1&gt;
&lt;h2&gt;H2&lt;/h2&gt;
&lt;h2&gt;H2&lt;/h2&gt;
&lt;h3&gt;H3&lt;/h3&gt;
&lt;p&gt;markdown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#H1#
H1
==
##H2##
H2
--
###H3###
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HTML&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;H1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;H1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;H2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;H2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;H3&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CSS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#711&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Source Sans Pro&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="k"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;text-shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1em&lt;/span&gt; &lt;span class="m"&gt;0.1em&lt;/span&gt; &lt;span class="m"&gt;0.1em&lt;/span&gt; &lt;span class="m"&gt;#EFEFEF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.67em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.7em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Learning more&lt;/h2&gt;
&lt;p&gt;I could carry on with examples for styling other elements such as lists and links, but the learning process is fairly straight forward.
On your blog, or someone else's, right click on an element (Firefox or Chrome) and choose inspect element. A window opens at the bottom of the screen with the html for the element highlighted on the left and the style css highlighted on the right. If the element has its own css, look that up in your theme's css files and alter it to suit. A web search will give you lots of examples for styling each element. If all of the css is inherited from &lt;code&gt;body&lt;/code&gt; for your chosen element then look at the tags that wrap the element in the html file. Add a section to the css for that type of element tag and continue as above.&lt;/p&gt;
&lt;p&gt;I'll follow this up with a post on the basics of layout using Jinja2 templates.&lt;/p&gt;</summary><category term="pelican"></category><category term="markdown"></category></entry><entry><title>Cat Scan</title><link href="http://elfnor.github.io/lookthinkmake/Cat%20Scan.html" rel="alternate"></link><updated>2014-06-13T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:elfnor.github.io/lookthinkmake,2014-06-13:Cat Scan.html</id><summary type="html">&lt;p&gt;The next step on from all the &lt;a href="http://elfnor.github.io/lookthinkmake/material-cats.html"&gt;Material Cats&lt;/a&gt; was to make a cat on my 3D printer (an &lt;a href="https://www.ultimaker.com/"&gt;Ultimaker original&lt;/a&gt;). This required a 3D model of the cat. Years ago I played around with  a home built laser scanner using the software from this project (&lt;a href="http://www.david-3d.com/"&gt;David laser scanner&lt;/a&gt;), but the model results required a lot of painstaking clean up and I moved on to something else. Also 3d scanning is a bit close to my day job to spend too much of my own time on it.&lt;/p&gt;
&lt;p&gt;More recently I've seen lots of blog posts on making 3D models from large collections of photos as well as using devices based on Kinect sensor.&lt;/p&gt;
&lt;p&gt;The most mentioned software for making a model from photos (photogrametry) is &lt;a href="http://www.123dapp.com/catch"&gt;Autodesk's 123d Catch&lt;/a&gt;. I gave it a go using the plaster cat as a model and was really surprised at the quality of the mesh I got for the effort put in.&lt;/p&gt;
&lt;p&gt;Basically you take a large number of photos of an object from all angles, then feed these into the software which analyses them. By matching points in the photos, the software determines where the camera was for each shot and what the 3D shape of the object is.&lt;/p&gt;
&lt;p&gt;The first step is to take photos. Like a lot of photo shoots its best to put some effort in to getting this right as fixing bad photos always takes longer than taking good photos in the first place. These &lt;a href="https://i.materialise.com/blog/entry/guest-blog-deepak-mehta-123dcatch-it-if-you-can"&gt;tips&lt;/a&gt; and &lt;a href="http://forum.123dapp.com/123d/topics/shooting_tips_for_123d_catch"&gt;these&lt;/a&gt; are a good place to start. I choose to take photos of the plaster model of the cat because it had an evenly coloured non reflective surface. I used some plasticine to stick it to the top of a bottle so I'd be able to get photos of the underside of the cat.&lt;/p&gt;
&lt;p&gt;Some people use fancy rigs for the camera but I just used a mini-tripod and worked on the floor. I drew a circle on the newspaper and marked of 18 positions even divisions around the circle. For each photo I placed the front leg of the tripod on a division and took a photo. The newspaper gives lots of detail in each shot for the software to work out camera positions. I took photos at three heights, one level with the cat, one looking doen on it and one looking up. I used a couple of desk lamps to evenly light the model. I made sure each photo was taken with the same zoom level, but didn't take any precautions to fix the exposure or aperture. (I was using an Olympus mu 790).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cat Scan Setup" src="http://elfnor.github.io/lookthinkmake/images/setup_cat_scan.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;This gave me 54 photos. Some of these photos were out of focus so I deleted them. This left me with 49 OK photos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example Photo" src="http://elfnor.github.io/lookthinkmake/images/example_photo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The autodesk web app requires google chrome on a windows machine. This was a nuisaance as I almost only run linux at home. But using a borrowed machine I used the web app to upload the photos. The instructions provided are pretty straight forward.&lt;/p&gt;
&lt;p&gt;Upload the photos:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Upload screenshot" src="http://elfnor.github.io/lookthinkmake/images/123_screen-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;The model produced has the 3D mesh with the colours from the photos mapped onto the mesh.&lt;/p&gt;
&lt;p&gt;&lt;img alt="123D screenshot" src="http://elfnor.github.io/lookthinkmake/images/123_screen-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;The 3D model produced includes the newspaper part of the bookcase and some of the couch. The cat sitting on its bottle is the very small white piece in the centre of the above screen capture.&lt;/p&gt;
&lt;p&gt;I installed and played around with the autodesk tools for cleaning up the image, but found them a bit cumbersome to use. Instead I exported the model as a stl file and cleaned it up in &lt;a href="http://www.blender.org"&gt;Blender&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blender screenshot" src="http://elfnor.github.io/lookthinkmake/images/screen-02_web.png" /&gt;&lt;/p&gt;
&lt;p&gt;The model mesh imported into blender with the cat and support selected.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blender screenshot 2" src="http://elfnor.github.io/lookthinkmake/images/screen-03_web.png" /&gt;&lt;/p&gt;
&lt;p&gt;Everything but the cat and support deleted&lt;/p&gt;
&lt;p&gt;First I deleted everything extra in the imported mesh.&lt;/p&gt;
&lt;p&gt;I then used a boolean operation with a cube to remove the support from the cat and give it a flat base suitable for printing.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blender screenshot 3" src="http://elfnor.github.io/lookthinkmake/images/screen-04_web.png" /&gt;&lt;/p&gt;
&lt;p&gt;There were a few pimple shaped artifacts and a few dings which I cleaned up by deleting mesh triangles and then filling the gap. I also smoothed the mesh a bit and scaled it to match the original size.&lt;/p&gt;
&lt;p&gt;To distinguish cats made from the digital model from the cats made from the silicon mould, I transformed the mesh to its mirror image.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blender screenshot 4" src="http://elfnor.github.io/lookthinkmake/images/cat_scan5-blend_web.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here's the final digital model and a set of three printed cats at 100%, 75% and 50% of original size. Making scale copies is so much easier in a digital process.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PLA Cat prints" src="http://elfnor.github.io/lookthinkmake/images/cat_scan_pla.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The printed cat is reasonably similar to the original, the indent above the tail is not nearly as deep or as sharp as the original. A concave indent in a object is harder for photogrametry to capture than the outside contour of the object.&lt;/p&gt;
&lt;p&gt;Overall I was very pleased with how well the model turned out for the effort involved. Particularly how little clean up the mesh required.&lt;/p&gt;
&lt;p&gt;Next I'd like to try the &lt;a href="http://arc-team-open-research.blogspot.com.br/2012/12/how-to-make-3d-scan-with-pictures-and.html"&gt;open source alternatives&lt;/a&gt;, particularly the python photogrametry toolbox &lt;/p&gt;</summary><category term="cats"></category><category term="make"></category><category term="materials"></category><category term="3D printing"></category></entry><entry><title>Material Cats</title><link href="http://elfnor.github.io/lookthinkmake/material-cats.html" rel="alternate"></link><updated>2014-02-23T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:elfnor.github.io/lookthinkmake,2014-02-23:material-cats.html</id><summary type="html">&lt;p&gt;I had a friend who after some self-reflection decided his primary hobby wasn't wood work but was collecting wood working tools. This left him feeling much less guilty about the number of wood working planes he had in his shed.&lt;/p&gt;
&lt;p&gt;If I was honest my major hobby or interest is collecting techniques for making things as much as actually making stuff. I've been to a lot of workshops and researched a lot of techniques on the web. A while back I started documenting some of these using the same cat mould for any technique that I possibly could.&lt;/p&gt;
&lt;p&gt;Here's the collection so far:&lt;/p&gt;
&lt;p&gt;&lt;img alt="collected cats" src="http://elfnor.github.io/lookthinkmake/images/collected_cats.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The original cat is the grey and brown cat shown here. She was modeled in clay, burnished and saggar fired in an electric kiln.&lt;/p&gt;
&lt;p&gt;&lt;img alt="raku cat" src="http://elfnor.github.io/lookthinkmake/images/raku_cat.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;For a saggar firing the piece is placed inside a larger pot filled with sawdust, wood shavings and colourants such as copper sulphate and copper wire. The pot is sealed and fired in an electric kiln. This give a reducing atmosphere (not enough oxygen for clean burning). The colourants used in ceramics, produce different colours in a reducing atmosphere than they do in a normal electric kiln firing. The process produces a bit of smoke outside the kiln. The kiln I fired this in was in a garage on a school site so we got away with it. The kilns I use now are in a community arts facility inside a building and I can't do saggar firings there. I like the randomness of this type of process, the result isn't known until the piece is taken from the kiln. Pit firing and raku firing are other processes I enjoy for their random or serendipitous results.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cat mould" src="http://elfnor.github.io/lookthinkmake/images/cat_mould.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The mould is made in two parts. The inner part is flexible and is made with co-polymer sealant (the clear stuff you buy at the hardware store for sealing bathroom tiles). Professional mould makers use expensive (at least here in NZ) two-part silicon moulding compounds. Sealant is way cheaper and easier to get. The cons are its thick consistency make it easy to trap air against the mould, giving unsightly pimples on the casting. Also the  sealant sets by releasing a gas, so thick layers can take a long time (or forever) to cure. Years ago I picked up a tip&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; to add mineral turpentine to the sealant to thin it. This can then be painted on as a thin layer on to the object being cast. Allow this first thin layer to dry. It will take a lot longer than plain sealant due to the turps. When its dry build up the mould with more plain sealant filling in all the gaps until there are no undercuts. Let this dry again.&lt;/p&gt;
&lt;p&gt;When the sealant is dry an outer "mother mould" of plaster is made to support the sealant inner mould.&lt;/p&gt;
&lt;p&gt;I follow this post up with a cat photo and explanation for each material. There's bronze and aluminum, leather and paper mache as well as various plastics and ceramics. The next step is to produce a digital model to try with different digital fabrication (3d printing, laser cutting layers, milling?...) processes.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I got this tip on thinning the sealant with turps, years ago from the blog of a trans-gender engineer who was experimenting with cheap ways to make falsies. The blog was a fascinating mix of their work on the west coast of the US, their experiments with mould making and their trips to Las Vegas to test the latest version.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="cats"></category><category term="materials"></category></entry><entry><title>The almost invisible kite</title><link href="http://elfnor.github.io/lookthinkmake/the-almost-invisible-kite.html" rel="alternate"></link><updated>2014-01-31T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:elfnor.github.io/lookthinkmake,2014-01-31:the-almost-invisible-kite.html</id><summary type="html">&lt;p&gt;&lt;img align="left" style="margin: 0px 20px" alt="parasled" src="./images/parasled.jpg?w=121" width="278" height="686" /&gt;&lt;/p&gt;
&lt;p&gt;Polythene sheeting, the type you buy at a garden shop that's about 125 μm thick, is great for kite making. It comes in black and clear, the black is boring but the clear can be a bit hard to photograph against the sky.&lt;/p&gt;
&lt;p&gt;This kite is a cross between a sled and a para foil. I based it on plans found &lt;a href="http://www.kiteplans.org/pln_1074/"&gt;here&lt;/a&gt;. The instructions are in French but fairly easy to follow with the help of a dictionary or google translate if you don't read French.&lt;/p&gt;
&lt;p&gt;I combined the pattern for the Dos (back) and the tubes into one piece. Draw them up directly onto the polythene with a felt pen. If you're likely to make more than one it might be worth making a paper pattern. Draw the seam lines onto the sheet. Then cut the two pieces out of the polythene and sew them together with four lines of machine stitching.&lt;/p&gt;
&lt;p&gt;The polythene is pretty slippery on the sewing machine. Use a long stitch length and keep one hand behind the needle and one in front feeding the material through.&lt;/p&gt;
&lt;p&gt;I reinforced the front edge with some left over end lengths of line trimmer line. This is nylon line about 2.5 mm in diameter used in line trimmer for cutting weeds. Pick some up at the garden shop when you get the polythene if you haven' got any sitting about.  I stuck the line to the front edges with squares of duct tape. These didn't hold all that well so I stapled through each square to hold it in place.&lt;/p&gt;
&lt;p&gt;You'll also need a drogue, mine is a truncated cone, about 400 mm long, top circumference 500 mm, bottom circumference 300 mm. Sew two sections together and add line trimmer line along the leading edge as for the main kite.&lt;/p&gt;
&lt;p&gt;That's it. No spars, or dowels. It flies fairly well in most winds. I intend to use it to do some kite photography. Maybe with some first person view camera gear.&lt;/p&gt;</summary><category term="kites"></category></entry><entry><title>Software for managing (e)books</title><link href="http://elfnor.github.io/lookthinkmake/software-for-managing-ebooks.html" rel="alternate"></link><updated>2014-01-28T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:elfnor.github.io/lookthinkmake,2014-01-28:software-for-managing-ebooks.html</id><summary type="html">&lt;p&gt;Adding the links to the &lt;a href="http://elfnor.github.io/lookthinkmake/reading-lists.html"&gt;last post&lt;/a&gt;, I realised I'd dropped a lot of names of bits of software I use into the post. Here's a list with an explanation of what I do with each:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.readerware.com"&gt;Readerware&lt;/a&gt; - &lt;a href="http://www.readerware.com"&gt;http://www.readerware.com&lt;/a&gt;
We use this to keep a computer list of the paper books we own. This is both for interest - it's faster to search the database than to search the shelves - and for insurance purposes.&lt;/p&gt;
&lt;p&gt;To add books to Readerware you only need to enter ISBN numbers rather than the whole author, title etc. The software then looks the ISBN up on line and downloads information on the book including the tile, author, synopsis, cover etc. The initial entry of the majority of our books was done with a cuecat bar-code scanner. With this you scan the book's bar-code, the software converts this to an ISBN and then looks up the books details from there.&lt;/p&gt;
&lt;p&gt;Readerware is commercial software and these days I'd probably choose an open source alternative like &lt;a href="http://www.zotero.org/"&gt;Zotero&lt;/a&gt;‎. I use Zotero mostly for pdfs of scientific papers but it can do books via ISBN.  &lt;a href="http://www.datacrow.net"&gt;Datacrow&lt;/a&gt;, and &lt;a href="http://tellico-project.org/"&gt;Tellico&lt;/a&gt; also look to have similar functionality to Readerware.&lt;/p&gt;
&lt;p&gt;Related: I have used &lt;a href="http://griffith.cc"&gt;Griffith&lt;/a&gt; which is a similar open source program for cataloging DVD collections.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.dotepub.com"&gt;dotEPUB&lt;/a&gt; - &lt;a href="http://www.dotepub.com"&gt;http://www.dotepub.com&lt;/a&gt;
DotEPUB works as a bookmarklet (a bookmark with some javascript code included) that you add to the bookmark bar or list in your browser. On a web page click the dotEPUB bookmarklet and the main text from the page is saved as an epub or mobi to transfer to your ereader. dotEPUB strips a lot of the extras (including images) from the page for a nice clean ebook. This is great for on-line short stories or long articles.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.grabmybooks.com"&gt;grabmybooks&lt;/a&gt; - &lt;a href="http://www.grabmybooks.com"&gt;http://www.grabmybooks.com&lt;/a&gt;
Grabmybooks works similarly to dotEPUB but is installed as an extension in Firefox. It allows more control over which part of the web page is grabbed and handles pages with lots of images well. It allows for multiple web pages to be grabbed as separate articles or chapters to one book. This is great for how-to articles, or for capturing someone's page of links to their best web reads.&lt;/p&gt;
&lt;p&gt;With grabmybooks you can also edit the ebook or add more articles to it from within firefox. On its own it saves in the epub format, if you have calibre (see below) installed you can also save your ebook in the mobi format.&lt;/p&gt;
&lt;p&gt;There are a number of other similar services around including &lt;a href="http://getpocket.com/‎"&gt;Pocket&lt;/a&gt;,  &lt;a href="https://www.readability.com"&gt;Readability&lt;/a&gt;,  &lt;a href="http://www.instapaper.com/"&gt;Instapaper&lt;/a&gt; but these all require you to create an account with the provider. This seems a bit invasive but come with web storage, web syncing and social media type functions.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://calibre-ebook.com/"&gt;Calibre&lt;/a&gt; - &lt;a href="http://calibre-ebook.com/"&gt;http://calibre-ebook.com/&lt;/a&gt;
Calibre is open source software for managing ebook collections. It is also good at converting between ebook formats, epub to mobi, or even docx or pdf to mobi.&lt;/p&gt;
&lt;p&gt;Calibre handles syncing between the ebook collection on your PC and the files on your ebook and includes an ebook viewer that can handle lots of formats. I store all my bought ebooks, and those created with grabmybooks and dotEPUB in calibre. You can also add user fields to the database which I'm using to classify the authors by country and gender.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zotero.org/"&gt;Zotero&lt;/a&gt;‎- &lt;a href="http://www.zotero.org/"&gt;http://www.zotero.org/&lt;/a&gt;
Zotero is an amazing open source tool for managing research papers. It can also be used for managing many types of media. It installs as a firefox extension or as a plug-in plus standalone app for other browsers.&lt;/p&gt;
&lt;p&gt;When on a web page that lists papers, zotero provides an icon to click to save all the info (metadata) on the paper to your zotero database. You can also save the full pdf of the paper to your database/library. The database can be  searched on the full pdf text. The bibliographic reference part of a paper you are writing can easily be generated in any style needed from either within the zotero app or using plug-ins for open-office or word. If you have a pdf file you've downloaded separately, zotero can search it for meta-data and add it to your database as well.&lt;/p&gt;
&lt;p&gt;The above describes how I use zotero for managing scientific papers but it can be used for almost any type of file or to save web pages off line.  Have a look at its website for a heap more features including on line syncing of your library, adding notes to papers, or sharing a library of papers amongst a group of users.&lt;/p&gt;
&lt;p&gt;So there's a few ways to help with taming the ereading pile.&lt;/p&gt;</summary><category term="ebook"></category><category term="reading"></category></entry><entry><title>Reading Lists</title><link href="http://elfnor.github.io/lookthinkmake/reading-lists.html" rel="alternate"></link><updated>2014-01-26T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:elfnor.github.io/lookthinkmake,2014-01-26:reading-lists.html</id><summary type="html">&lt;p&gt;I love to read and reading lists fascinate me.&lt;/p&gt;
&lt;p&gt;I bought a Kindle ereader in 2011 and its resulted in some large changes in my reading habits. I own a lot of paper books, there's 1300+ in the house according to our &lt;a href="http://www.readerware.com"&gt;Readerware&lt;/a&gt; database (databases are even fancier lists), but pre ereader most of what I read came from the local library. Every three weeks I'd come back with a pile of 6 to 8 books, at least one non-fiction and one book for looking at (art, craft photography). I'd look on the recently returned shelves, the books the librarians had put on display, and keep a special look out for local authors and witers outside the WEIRD (western, educated, industrialised, rich, democratic). So there was a lot of serendipity in what I bought home. I don't think I've been back to the library since I got the ereader.&lt;/p&gt;
&lt;p&gt;Post Kindle, the choice of potential books is huge. Not just from amazon.com. I also make use of &lt;a href="http://www.dotepub.com"&gt;dotepub&lt;/a&gt; and &lt;a href="http://grabmybooks.com"&gt;grabmybooks&lt;/a&gt; to make copies of online short stories and blogs to read later. This large choice has a downside in that I'm sure&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I now read less local authors and more in the science fiction fantasy (sff) genre than previously. The upside is that if I hear about a book then I can be reading it that day&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Reading lists can be about what someone else thinks you should read (eg. "The Western Canon") or about challenges to change what or how much you read. This blogger's project &lt;a href="http://ayearofreadingtheworld.com"&gt;http://ayearofreadingtheworld.com&lt;/a&gt; where she read one book from each of the 196 countries in one year and her previus project &lt;a href="http://ayearofreadingwomen.wordpress.com/"&gt;http://ayearofreadingwomen.wordpress.com/&lt;/a&gt; really inspire me to widen my reading. Being a data freak and a rule bender I'm in the process of going through my ebook collection (stored in &lt;a href="http://calibre-ebook.com/"&gt;Calibre&lt;/a&gt; - more lists) and tagging the books with the author's country and gender. Any countries I've already bagged in the last year (maybe two years) I'll discount from the 196. After that I'm going to try and fill in the rest not with full novels but as many short stories as possible, preferably ones avaliable online so I can share. I'm sure my bias to sff will prevail and I'll also try for a 50/50 male/female split.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I think if I log on the the local library site I can download a copy of my borrowing history (more lists) and do a comparison of pre and post ereader reading. No, too geeky.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Most books. I'll write a post soon about the odd gaps in availability of ebooks for non-USA customers on amazon.com. Also the differences in pricing and how to set up a proxy server on the amazon e3 cloud to help with these issues.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="ebook"></category><category term="reading"></category></entry></feed>