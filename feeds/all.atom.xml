<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Look Think Make</title><link href="http://www.elfnor.com/" rel="alternate"></link><link href="http://www.elfnor.com/feeds/all.atom.xml" rel="self"></link><id>http://www.elfnor.com/</id><updated>2016-05-29T22:00:00+12:00</updated><entry><title>Structure Synth eisenscript to xml translator</title><link href="http://www.elfnor.com/structure-synth-eisenscript-to-xml-translator.html" rel="alternate"></link><updated>2016-05-29T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2016-05-29:structure-synth-eisenscript-to-xml-translator.html</id><summary type="html">&lt;p&gt;&lt;img alt="medusas" src="./images/medusa_spiked_01_016.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've been working on some code to automatically translate the original &lt;em&gt;eisenscript&lt;/em&gt; files used by &lt;a href="http://structuresynth.sourceforge.net/"&gt;Struture Synth&lt;/a&gt; into the &lt;em&gt;eisenxml&lt;/em&gt; used by the &lt;a href="http://www.elfnor.com/generative-art-sverchok-node-update.html"&gt;Generative Art node&lt;/a&gt; in the &lt;a href="https://github.com/nortikin/sverchok"&gt;Sverchok&lt;/a&gt; addon for &lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Its not complete but I've uploaded the work so far to &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/eisenscript_to_xml.py"&gt;github&lt;/a&gt;. Its written using &lt;a href="http://pyparsing.wikispaces.com/"&gt;pyparsing&lt;/a&gt;. This is my first serious attempt at using pyparsing. I was impressed with how far I could get with this project so quickly. My code is pretty ugly and could still do with some serious refactoring work, but it translates all the examples provided with Structure Synth with the exception of those using preprocessor (#define) commands.&lt;/p&gt;
&lt;p&gt;After writing most of the pyparsing grammar based on the Structure Synth reference &lt;a href="http://structuresynth.sourceforge.net/reference.php"&gt;page&lt;/a&gt; I found the basics of &lt;a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form"&gt;EBNF notation&lt;/a&gt; used for eisenscript in the &lt;a href="https://sourceforge.net/p/structuresynth/code/HEAD/tree/trunk/notes.txt#l48"&gt;source files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The translator completely ignores any eisenscript commands to do with color, setting the camera or the ray tracer as those are better dealt with in Blender outside Sverchok. &lt;/p&gt;
&lt;p&gt;I haven't translated the preprocessor commands (#define). These commands are similar to the way I've used constants and variables in the Sverchok node but different enough to be a bit harder to implement in the translator. &lt;/p&gt;
&lt;p&gt;So far its translating most things I've thrown at it and the geometry in Blender looks mostly equivalent to the original Structure Synth geometry. It hasn't been systematically tested and there's bound to be valid eisenscript in can't translate properly. As is where is.&lt;/p&gt;
&lt;p&gt;To use the &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/eisenscript_to_xml.py"&gt;translator&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python eisenscript_to_xml.py /path/to/file/totranslate.es
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will produce a file &lt;code&gt;/path/to/file/totranslate.es.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here's the original eisenscript and translated eisenxml for one of the creatures above.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ss_medusa" src="./images/ss_medusa.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set md 25

{ry 90 hue 35 sat 0.5} body

rule body {
20 * {rx 18} segment
}

rule segment md 12 &amp;gt; arc1 {
box
{z 1 ry 10 s 1.2} segment
}

rule arc1 {
{s 0.6   x -7 z 11} arc
}

rule arc {
5 * {ry 10 } subarc
}

rule subarc {
{x 15} spike
}

rule spike  w 5 {
10 * {z 0.9 ry 5 s 0.9} sphere
}

rule spike w 5 {
10 * {z 0.9 ry -5 s 0.9} sphere
}

rule spike w 1 {
10 * {z 0.9 ry 10 s 0.9} sphere
}

rule spike w 1 {
10 * {z 0.9 ry -10 s 0.9} sphere
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ga_medusa" src="./images/ga_medusa.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;25&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ry 90&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;segment&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 18&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;12&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;segment&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;arc1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;segment&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz 1 ry 10 sa 1.2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;arc1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;arc&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sa 0.6 tx -7 tz 11&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;arc&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;subarc&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ry 10&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;subarc&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spike&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 15&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spike&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sphere&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz 0.9 ry 5 sa 0.9&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spike&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sphere&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz 0.9 ry -5 sa 0.9&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spike&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sphere&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz 0.9 ry 10 sa 0.9&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spike&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sphere&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz 0.9 ry -10 sa 0.9&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feel free to post links in the comments to any eisenscript files that break the translator and I'll (probably) have a look at them.&lt;/p&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="structure synth"></category><category term="generative art"></category></entry><entry><title>First Milky Way photo</title><link href="http://www.elfnor.com/first-milky-way-photo.html" rel="alternate"></link><updated>2016-05-25T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2016-05-25:first-milky-way-photo.html</id><summary type="html">&lt;p&gt;&lt;img alt="scopius over remarkables" src="./images/scopius_sml.png" /&gt;&lt;/p&gt;
&lt;p&gt;Last month I went to a talk at our local library by &lt;a href="http://theartofnight.com/"&gt;Mark Gee&lt;/a&gt; on astrophotography, and I got &lt;s&gt;hooked&lt;/s&gt; inspired. &lt;/p&gt;
&lt;p&gt;For my real job I work on really expensive optics for some of the big telescopes. I also did a few astronomy papers way back. Both of these made me think I'd be a bit disappointed with any astro photos I could take with stuff I could afford to buy for myself.&lt;/p&gt;
&lt;p&gt;The equipment for wide field shots of the Milky Way looked much more in the birthday present to self price range and Mark Gee and other's results look spectacular.&lt;/p&gt;
&lt;p&gt;So I went online shopping for a DSLR camera and lenses. I chose a Canon (brand loyalty) 700D (last year's model is usually good value, who needs wifi for stars).  I paired this with Samyang F2.8/14mm wide angle lens which seemed to be many people's favourite for wide field astrophotography. Searching &lt;a href="https://www.flickr.com/search/?q=milky+way&amp;amp;cm=canon%2Feos_700d"&gt;flickr&lt;/a&gt; for camera type and "milky way" showed other people getting good results with this combination. &lt;/p&gt;
&lt;p&gt;On a recent trip to Queenstown I got a chance to try all this out. There the sky is darker than locally. For my first attempt I just went down to the local park, but I could of got to some real dark sky with half an hour's drive.&lt;/p&gt;
&lt;p&gt;Mars and Saturn where in Scorpius which was rising over the Remarkables. &lt;/p&gt;
&lt;p&gt;I took a series of shots at F2.8, ISO 6400, Shutter speed 13 s (faster than this gave star trails) in RAW format. I was a bit disappointed with the noise when I looked at the shots at 100%. Also my manual focus could be better. (The focus scale on my lens is way off, other people online seem to also have this problem, but mine might be the result of dropping it on a rock on its first outing...)&lt;/p&gt;
&lt;p&gt;&lt;img alt="100% jpg" src="./images/astro_crop_100.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;100% crop of original image&lt;/p&gt;
&lt;p&gt;After a bit of internet research I worked out how to use the command line tools that come with &lt;a href="http://hugin.sourceforge.net/"&gt;Hugin&lt;/a&gt; to align and average a stack of images.&lt;/p&gt;
&lt;p&gt;For simplicity copy the RAW files to process into a clean folder.&lt;/p&gt;
&lt;p&gt;First I used &lt;a href="http://rawtherapee.com/blog/features"&gt;Rawtherapee&lt;/a&gt; to convert the camera's &lt;em&gt;CR2&lt;/em&gt; (RAW) files into 16 bit &lt;em&gt;tif&lt;/em&gt; files. I also did a little preprocessing including subtracting a dark field image. Save the profile so the same process can be used on each file.&lt;/p&gt;
&lt;p&gt;Then all it takes is the following two commands to align and average the &lt;em&gt;tif&lt;/em&gt; files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;align_image_stack -a IMG_*.tif
&lt;span class="nv"&gt;$ &lt;/span&gt;enfuse --exposure-weight&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; --saturation-weight&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;  --exposure-mu&lt;span class="o"&gt;=&lt;/span&gt;0.5 --exposure-sigma&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; IMG_*.tif*.tif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There were only four images in my stack so I'd only expect to reduce the noise by a half, but it definetly looked better.&lt;/p&gt;
&lt;p&gt;&lt;img alt="100% jpg" src="./images/astro_crop_100_mean.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;100% crop of stacked image&lt;/p&gt;
&lt;p&gt;After that I played with the image a little in RT again getting the colour balance better and applying a little local contrast. (I didn't really know what I was doing so I just experimented)&lt;/p&gt;
&lt;p&gt;&lt;img alt="100% jpg" src="./images/astro_crop_100_final.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;100% crop of final image&lt;/p&gt;
&lt;p&gt;The align process takes care of the movement of the stars between each shot, but that blurs the foreground. I used &lt;a href="https://www.gimp.org/"&gt;GIMP&lt;/a&gt; to combine the landscape of a single image with the average star image. (see &lt;a href="https://www.gimp.org/tutorials/Layer_Masks/"&gt;here&lt;/a&gt; for a basic tutorial). Ideally I should of taken a longer shot with a lower ISO for the landscape part. This would have given less noise. Also next time around I'll try a lower ISO and a longer shutter speed for the star shots, aiming for less noise at the expense of a little star trailing.&lt;/p&gt;
&lt;p&gt;But I'm reasonably pleased with the final result for my first attempt but with heaps still to learn.&lt;/p&gt;</summary><category term="photo"></category><category term="astro"></category></entry><entry><title>Generative Art - Penrose Tilings</title><link href="http://www.elfnor.com/generative-art-penrose-tilings.html" rel="alternate"></link><updated>2016-04-23T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2016-04-23:generative-art-penrose-tilings.html</id><summary type="html">&lt;p&gt;&lt;img alt="P3 tiling" src="./images/penrose_rhomb_lattice_04_015.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Penrose_tiling"&gt;Penrose tilings&lt;/a&gt; are an interesting group of tilings that have no translational symmetry but are self-similar on different scales. One method to construct them is using substitution, the same method I used for the Pentaflake fractal in the &lt;a href="http://www.elfnor.com/generative-art-examples-fractals-on-a-plane.html"&gt;previous post&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;There are three types of Penrose tilings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P1 has pentagon tiles separated by a five pointed star, a diamond and an odd "boat" or "hat" shape.  &lt;/li&gt;
&lt;li&gt;P2 has "kite" and "dart" shaped tiles.  &lt;/li&gt;
&lt;li&gt;P3 has two shapes of rhomb or diamond shaped tiles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these tile shapes are based on a pentagon and the golden ratio &lt;span class="math"&gt;\(\phi\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I'll go through how to construct the tilings in &lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt; using &lt;a href="https://github.com/nortikin/sverchok"&gt;Sverchok&lt;/a&gt; and the &lt;a href="http://www.elfnor.com/generative-art-sverchok-node-update.html"&gt;Generative Art&lt;/a&gt; node.&lt;/p&gt;
&lt;h2&gt;P3 Tiling - Rhomb&lt;/h2&gt;
&lt;p&gt;I'll start at the bottom of the above list with the P3 Penrose tiling made with two types of rhomb or diamond shaped tiles. Each of the diamonds can be divided in half to give two triangles called Robinson triangles.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rob tris" src="./images/penrose_rob_tris.png" /&gt;&lt;br /&gt;
The thin triangle on the left is an acute isosceles triangle, and the fat one on the right is an obtuse isosceles triangle. There are three constants that we will use a lot in our &lt;em&gt;eisenxml&lt;/em&gt; files used to describe the tilings.&lt;/p&gt;
&lt;p&gt;Golden Ratio:
&lt;/p&gt;
&lt;div class="math"&gt;$$\phi = \frac{\sqrt{5}+1}{2}$$&lt;/div&gt;
&lt;p&gt;
This is the ratio between the long and the short sides for both the thin and fat triangles.&lt;br /&gt;
The altitude of each triangle (the distance from the apex to the base) is found from Pythagoras' theorem:
&lt;/p&gt;
&lt;div class="math"&gt;$$x_{thin} = \sqrt{\phi + 3/4}$$&lt;/div&gt;
&lt;div class="math"&gt;$$x_{fat} = \frac{\sqrt{3-\phi}}{2}$$&lt;/div&gt;
&lt;p&gt;
Also a useful identity for deriving these formula is:
&lt;/p&gt;
&lt;div class="math"&gt;$$\phi^2 = \phi + 1 $$&lt;/div&gt;
&lt;p&gt;
&lt;img alt="robs tris 2" src="./images/penrose_robs_tris2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Its easy to produce an equilateral triangle in Sverchok using the &lt;em&gt;Circle&lt;/em&gt; node with &lt;em&gt;N Vertices&lt;/em&gt; set to 3. This give a triangle centered at the origin and pointing to the right, shown as a blue outline above. This following &lt;em&gt;eisenxml&lt;/em&gt; scales the equilateral triangle in the x and y directions to give the thin and fat Robinson triangles. It also moves them so one vertex of each triangle is at the origin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;phi =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;((1+5**0.5)/2)&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;thinx =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;({phi}+0.75)**0.5&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;fatx =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.5*(3-{phi})**0.5&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;sx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2*{thinx}/3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sy=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1/(3**0.5)&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-2*{thinx}/3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;sx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2*{fatx}/3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sy=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;({phi}/(3**0.5))&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{fatx}/3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{phi}/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1st division" src="./images/penrose_robs_tris3.png" /&gt;&lt;/p&gt;
&lt;p&gt;Each triangle now needs to be subdivided. The &lt;em&gt;eisenxml&lt;/em&gt; below subdivides the thin triangle  into one smaller thin and one smaller fat triangle (rule &lt;em&gt;thin_tri_sub&lt;/em&gt;). The fat triangle is divided into two smaller fat triangles and one smaller thin triangle (rule &lt;em&gt;fat_tri_sub&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;To make the tiling correct we need to mirror (or flip over) two of the smaller copies when we do the substitution. This is achieved by the &lt;code&gt;rx="180"&lt;/code&gt; transformation.&lt;/p&gt;
&lt;p&gt;The triangles substituted into the thin triangle are scaled by &lt;span class="math"&gt;\(s1 = 1 / \phi\)&lt;/span&gt; smaller than the original triangles.&lt;/p&gt;
&lt;p&gt;The triangles substituted into the fat triangles are scaled by &lt;span class="math"&gt;\(s2 = 1/ \phi^{2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;phi =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;((1+5**0.5)/2)&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;thinx =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;({phi}+0.75)**0.5&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;fatx =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.5*(3-{phi})**0.5&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;s1 =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1/{phi}&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;s2 =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1/(1+{phi})&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;   
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri_sub&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri_sub&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{md}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;       
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-1*{thinx}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;108&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s1}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;108&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;sx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2*{thinx}/3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sy=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1/(3**0.5)&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-2*{thinx}/3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{md}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;        
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-144&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;({phi}-1)&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s2}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;144&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{fatx}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{phi}/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s1}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;   
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{phi}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s1}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;sx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2*{fatx}/3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sy=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;({phi}/(3**0.5))&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{fatx}/3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{phi}/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To produce a full plane tiling from this we change the entry rule to set 10 thin triangles around the origin, each second triangle also needs to be flipped:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;....
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;72&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_pair&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_pair&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri_sub&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;36&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri_sub&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
....
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could also choose to start with 10 fat triangles instead.&lt;/p&gt;
&lt;p&gt;The complete &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/penrose_p3.xml"&gt;eisenxml&lt;/a&gt; and &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/penrose_p3.json"&gt;json&lt;/a&gt; for the nodes are in the example repo.&lt;/p&gt;
&lt;p&gt;The above construction results in all the vertices being doubled. To produce a mesh, use the &lt;em&gt;Apply Matrix&lt;/em&gt; and &lt;em&gt;Remove Doubles&lt;/em&gt; nodes. Many of the faces will have their normals flipped but this is fixed with the &lt;em&gt;Recalc Normals&lt;/em&gt; node.&lt;/p&gt;
&lt;p&gt;&lt;img alt="penrose nodes" src="./images/penrose_p3_nodes.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="p3 gif" src="./images/penrose_p3.gif" /&gt;&lt;/p&gt;
&lt;p&gt;At the end of the &lt;em&gt;gif&lt;/em&gt; above the Robinson triangle tiling is turned into a proper P3 Rhomb tiling. This is done by selecting one of the longest edges (in &lt;em&gt;Edit&lt;/em&gt; mode), then using &lt;em&gt;Select &amp;gt; Select Similar &amp;gt; Length&lt;/em&gt; to select all the long edges. Then &lt;em&gt;Mesh &amp;gt; Delete &amp;gt; Dissolve Edges&lt;/em&gt; to turn the pairs of fat triangles into fat rhombs. Select and dissolve all the short edges in a similar manner to join the thin triangles into thin rhombs.&lt;/p&gt;
&lt;h2&gt;P2 Tiling - Kite and Dart&lt;/h2&gt;
&lt;p&gt;&lt;img alt="P2 tiling" src="./images/penrose_kites-darts-image_04_003.png" /&gt;&lt;/p&gt;
&lt;p&gt;The Penrose P2 tiling consists of kite and dart shapes. These kite and dart shapes can also be subdivided into Robinson triangles.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p2 subdivide" src="./images/penrose_p2_robs_tris2.png" /&gt;&lt;/p&gt;
&lt;p&gt;This time the subdivide/substitution step involves dividing the thin triangle into two smaller thin triangles and one smaller fat triangle. The fat triangle is divided into one smaller thin and one smaller fat triangle. Notice again that the triangle sides are split in the golden ratio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{md}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;       
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-1*{thinx}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;108&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s1}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-1*{thinx}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-144&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s1}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;108&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s1}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

....
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{md}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;        
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-144&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{phi}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s1}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;         
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;108&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s1}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thin_tri_sub&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;   
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
....
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/penrose_p2.xml"&gt;full eisenxml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="penrsoe p2 gif" src="./images/penrose_p2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Turning the pairs of Robinson triangles into kites and darts is harder for this tiling as both edges within the kites and edges between the kites and darts have the same length. Instead we can use the select similar area tool to select all the thin triangles and give them a different material than the fat triangles.&lt;/p&gt;
&lt;h2&gt;P1 Tiling - Pentagonal&lt;/h2&gt;
&lt;p&gt;&lt;img alt="P1 tiling" src="./images/penrose_p3-banner_01_020.png" /&gt;&lt;/p&gt;
&lt;p&gt;The P1 tiling looked much harder to make than the P2 or P3 tilings. The larger number of odd shapes were going to be harder to draw and there are &lt;a href="http://tilings.math.uni-bielefeld.de/substitution_rules/penrose_pentagon_boat_star"&gt;six substitution rules&lt;/a&gt; to write.&lt;/p&gt;
&lt;p&gt;A closer a look at this diagram on Wikipedia:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Penrose_tiling#Development_of_the_Penrose_tilings"&gt;&lt;img alt="penrose wiki" src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Penrose_Tiling_%28P1_over_P3%29.svg/640px-Penrose_Tiling_%28P1_over_P3%29.svg.png" /&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;showed that the P1 tiling could easily be created from the P3 tiling.&lt;/p&gt;
&lt;p&gt;&lt;img alt="P3 plus pentagons" src="./images/penrose_p1p3.png" /&gt;&lt;/p&gt;
&lt;p&gt;Each fat triangle has three pentagons, one centered at a base corner, one centered on a short side and one on a long side.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fat_tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;sx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2*{fatx}/3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sy=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;({phi}/(3**0.5))&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{fatx}/3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{phi}/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{phi}-1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;18&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s2}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;penta&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;({phi}-1)*{fatx}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ty=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{phi}-0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-18&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s2}&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;penta&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt;  &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-18&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{s2}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;penta&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="p1 nodes" src="./images/penrose_p1_nodes.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/penrose_p1.xml"&gt;full eisenxml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/penrose_p1.json"&gt;node json&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This construction doubles up on lots of pentagons but they can be easily removed with the &lt;em&gt;Remove Doubles&lt;/em&gt; node. There are also star, diamond and boat shaped gaps between the pentagons. The Sverchok &lt;em&gt;Fill Holes&lt;/em&gt; node can be used to fill these.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p1 gif" src="./images/penrose_p1a.gif" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript'; 
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="structuresynth"></category></entry><entry><title>Generative Art - Updated Examples</title><link href="http://www.elfnor.com/generative-art-updated-examples.html" rel="alternate"></link><updated>2016-04-02T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2016-04-02:generative-art-updated-examples.html</id><summary type="html">&lt;p&gt;&lt;img alt="examples" src="./images/ga_examples_banner_image.png" /&gt;  &lt;/p&gt;
&lt;p&gt;The changes and improvements I made to the &lt;em&gt;Generative Art&lt;/em&gt; node for Sverchok mean some of the examples from earlier blog posts need some updates. &lt;/p&gt;
&lt;p&gt;I've include the updated examples in my generative-art-examples &lt;a href="https://github.com/elfnor/generative-art-examples"&gt;repo&lt;/a&gt; on github. These examples include the &lt;em&gt;eisenxml&lt;/em&gt; and the &lt;em&gt;json&lt;/em&gt; for the nodes (the &lt;em&gt;json&lt;/em&gt; files can be imported into Sverchok using the &lt;em&gt;Import&lt;/em&gt; button on the Sverchok panel).&lt;/p&gt;
&lt;h2&gt;Examples from &lt;a href="http://www.elfnor.com/structure-synth-meets-sverchok-generative-art-inside-blender.html"&gt;Structure Synth meets Sverchok - Generative Art inside Blender&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;6 spirals&lt;/h3&gt;
&lt;p&gt;&lt;img alt="6 spirals" src="./images/matrix_iterate_13.png" /&gt;&lt;br /&gt;
&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/spirals_6.xml"&gt;eisenxml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/spirals_6.json"&gt;json&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Tree&lt;/h3&gt;
&lt;p&gt;&lt;img alt="tree" src="./images/tree_example.png" /&gt;&lt;br /&gt;
&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/tree.xml"&gt;eisenxml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/tree.json"&gt;json&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Examples from &lt;a href="http://www.elfnor.com/structure-synth-meets-sverchok-mesh-mode.html"&gt;Structure Synth meets Sverchok - Mesh mode&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Octopod&lt;/h3&gt;
&lt;p&gt;&lt;img alt="octopod" src="./images/octopod_example.png" /&gt;&lt;br /&gt;
&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/octopod.xml"&gt;eisenxml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/octopod.json"&gt;json&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Fern (odd)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="fern wrong" src="./images/fern_wrong.blend.png" /&gt;&lt;br /&gt;
&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/fern_wrong.xml"&gt;eisenxml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/fern_wrong.json"&gt;json&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Fern&lt;/h3&gt;
&lt;p&gt;&lt;img alt="fern" src="./images/Fern.png" /&gt;&lt;br /&gt;
&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/fern.xml"&gt;eisenxml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/fern.json"&gt;json&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Examples from &lt;a href="http://www.elfnor.com/structure-synth-meets-sverchok-animation.html"&gt;Structure Synth meets Sverchok - Animation&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Fern Animation&lt;/h3&gt;
&lt;p&gt;&lt;img alt="fern animation" src="./images/fern_anim_still_05.png" /&gt;&lt;br /&gt;
&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/fern_animation.xml"&gt;eisenxml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/fern_animation.json"&gt;json&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Examples from &lt;a href="http://www.elfnor.com/blender-pipe-generator.html"&gt;Blender Pipe Generator&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Pipe Generator&lt;/h3&gt;
&lt;p&gt;&lt;img alt="pipes" src="./images/pipes_example.png" /&gt;&lt;br /&gt;
&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/pipes.xml"&gt;eisenxml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/pipes.json"&gt;json&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Pipe Generator with gauges&lt;/h3&gt;
&lt;p&gt;&lt;img alt="pipes" src="./images/pipe_gen_15.png" /&gt;&lt;br /&gt;
&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/pipes.xml"&gt;eisenxml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/pipes_gauges.json"&gt;json&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/pipe_generator.blend"&gt;blend&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Examples from &lt;a href="http://www.elfnor.com/blender-game-level-generator.html"&gt;Blender Game Level Generator&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Game Level Generator&lt;/h3&gt;
&lt;p&gt;&lt;img alt="ramps" src="./images/level_gen_demo.blend1.png" /&gt;&lt;br /&gt;
&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/game_gen_demo.xml"&gt;eisenxml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/game_gen_demo.json"&gt;json&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/level_gen_demo.blend"&gt;blend&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Steely Taws Level Generator&lt;/h3&gt;
&lt;p&gt;&lt;img alt="steely_taws" src="./images/level_gen_STD_ramps_render_017.png" /&gt;&lt;br /&gt;
&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/steely_taws_level_gen.blend"&gt;blend&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="structuresynth"></category></entry><entry><title>Generative Art Examples - Fractals on a Plane</title><link href="http://www.elfnor.com/generative-art-examples-fractals-on-a-plane.html" rel="alternate"></link><updated>2016-03-27T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2016-03-27:generative-art-examples-fractals-on-a-plane.html</id><summary type="html">&lt;p&gt;&lt;meta property="og:image"
    content="/images/koch_vase_render_01_003.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="koch vase" src="./images/koch_vase_render_01_003.png" /&gt;&lt;/p&gt;
&lt;p&gt;This post is hopefully the first in a series of examples and demos for the &lt;em&gt;Generative Art&lt;/em&gt; node for the  [Sverchok}(https://github.com/nortikin/sverchok) addon for &lt;a href="https://www.blender.org"&gt;Blender&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This node is very strongly based on &lt;a href="http://structuresynth.sourceforge.net/"&gt;Structure Synth&lt;/a&gt; and can produce &lt;a href="https://en.wikipedia.org/wiki/L-system"&gt;Lindermayer Systems (lsystems)&lt;/a&gt; and fractals as well as more random and interesting creations.&lt;/p&gt;
&lt;p&gt;For some examples I've also given a link to an &lt;em&gt;eisenscript&lt;/em&gt; version to be used in the original &lt;a href=""&gt;StructureSynth&lt;/a&gt;. These are not always exactly equivalent due to some differences between the two implementations but should help those who are more familiar with &lt;em&gt;eisenscript&lt;/em&gt; make the transition to the xml format. I'm also most of the way through writing a program (using pyparsing) to translate from &lt;em&gt;eisenscript&lt;/em&gt; to the xml format (&lt;em&gt;eisenxml&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Sverchok is available on &lt;a href="https://github.com/nortikin/sverchok"&gt;github&lt;/a&gt;. Download the zip version and install like any other Blender addon.&lt;/p&gt;
&lt;p&gt;The documentation for the node is &lt;a href="http://www.elfnor.com/generative-art-sverchok-node-update.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have also started a &lt;a href="https://github.com/elfnor/generative-art-examples"&gt;repo&lt;/a&gt; on github for &lt;em&gt;Generative Art&lt;/em&gt; examples. These examples include the &lt;em&gt;eisenxml&lt;/em&gt; and the &lt;em&gt;json&lt;/em&gt; for the nodes (this can be imported into Sverchok using the &lt;em&gt;Import&lt;/em&gt; button on the Sverchok panel). For some examples I've also included an &lt;em&gt;eisenscript&lt;/em&gt; version.&lt;/p&gt;
&lt;h2&gt;Koch Snowflake&lt;/h2&gt;
&lt;p&gt;&lt;img alt="koch snowflake" src="./images/ga_koch_snowflake.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ty 0.5*3**0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 120 ty 0.5*3**0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 240 ty 0.5*3**0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -1 sa 1.0/3.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -0.25 ty 0.25*3**0.5 rz 60 sa 1.0/3.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;      
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.25 ty 0.25*3**0.5 rz -60 sa 1.0/3.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 1 sa 1.0/3.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -1.5 sa 1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;line&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is one of the earliest fractals described (1904). The basic unit is only drawn at the smallest size. This is achieved by using the &lt;em&gt;successor&lt;/em&gt; attribute in the &lt;em&gt;R1&lt;/em&gt; rule element. The &lt;em&gt;successor&lt;/em&gt; attribute defines the rule to be called when the &lt;em&gt;max_depth&lt;/em&gt; has been reached. That is after the &lt;em&gt;R1&lt;/em&gt; rule has been called recursively four times the &lt;em&gt;unit&lt;/em&gt; rule is called. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/koch_snowflake.xml"&gt;xml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/koch_snowflake.json"&gt;nodes in json&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/koch_snowflake.es"&gt;eisenscript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Koch_snowflake"&gt;info&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;T-Square&lt;/h2&gt;
&lt;p&gt;&lt;img alt="t square" src="./images/ga_tsquare_2d.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt;  &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sz 0.1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.5 ty 0.5 sx 0.5 sy 0.5 rz 90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -0.5 ty -0.5 sx 0.5 sy 0.5 rz -90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.5 ty -0.5 sx 0.5 sy 0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;        
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -0.5 ty 0.5 sx 0.5 sy 0.5 rz 180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This fractal has the basic unit (a box) repeated at ever decreasing scales. at each iteration it is scaled in x and y by one half.  The &lt;em&gt;R1&lt;/em&gt; rule places a &lt;em&gt;box&lt;/em&gt; and then calls itself 3 times, rotating 90 degrees and scaling by a half each time. This places an ever decreasing set of boxes on three corners of the original box. Iterating over only three corners avoids placing boxes on the internal corner. The &lt;em&gt;R2&lt;/em&gt; rule finishes the fourth corner.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/t_square_2d.xml"&gt;xml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/t_square_2d.json"&gt;nodes in json&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/t_square_2d.es"&gt;eisenscript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/T-square_%28fractal%29"&gt;info&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Pentaflake&lt;/h2&gt;
&lt;p&gt;&lt;img alt="pentaflake" src="./images/ga_pentaflake.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pentagon&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;              
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 180 sa 0.382&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.618 sa 0.382&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.191 ty 0.5878 sa 0.382&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -0.5 ty 0.3633  sa 0.382&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -0.5 ty -0.3633  sa 0.382&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.191 ty -0.5878 sa 0.382&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pentagon&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pentagon&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/pentaflake.xml"&gt;xml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/pentaflake.json"&gt;nodes in json&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/N-flake"&gt;info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The pentaflake is constructed by replacing a pentagon with six smaller pentagons. This in then repeated until the maximum depth is reached. this fractal is even older than the Koch curve appearing in a manuscript by Albrecht Durer in 1525. Its outer border is a version of the Koch snowflake. The structure is also closely related to the P1 &lt;a href=""&gt;Penrose tiling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pentagon" src="./images/ga_pentaflake_01.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've used approximate values for the scaling and transforms in the above xml. For the pedantic the values are given by:&lt;/p&gt;
&lt;p&gt;Scaling:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
scale &amp;amp;= \frac{3-\sqrt{5}}{2} = 0.38197...
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;Translation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
t1 &amp;amp;= \frac{\sqrt{5} - 1}{2} = 0.61803...\\
t2 &amp;amp;= \frac{3-\sqrt{5}}{4} = 0.19098...\\
t3 &amp;amp;= \frac{1}{8}(\sqrt{10}-\sqrt{2})\sqrt{5 + \sqrt{5}} = 0.58775...\\
t4 &amp;amp;= \frac{1}{8}(\sqrt{10}-\sqrt{2})\sqrt{5 - \sqrt{5}} = 0.36325...
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;See &lt;a href="http://ecademy.agnesscott.edu/~lriddle/ifs/pentagon/details.htm"&gt;Larry Riddle's page&lt;/a&gt; for some of the derivations.&lt;/p&gt;
&lt;p&gt;The xml processor used in the &lt;em&gt;Generative Art&lt;/em&gt; node will evaluate math expressions in the transform definitions. For example the first call in the above xml could be written:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 180 sa (5**0.5-1)/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The python &lt;em&gt;math&lt;/em&gt; and &lt;em&gt;random&lt;/em&gt; modules have been imported into the node namespace so the call could also be written:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 180 sa (math.sqrt(5)-1)/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There cannot be any spaces in any maths expressions for the rotation, translation or scale parameters when using a single transforms attribute string (The spaces are used to split the string into its components). To allow for more complicated expressions each transform can be separated out into its own attribute. Notice the expression for &lt;em&gt;sa&lt;/em&gt; (scale all) now has spaces in the expression.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sa=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(math.sqrt(5) - 1)/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The math expression string is passed to python's &lt;em&gt;eval()&lt;/em&gt; function. The string must evaluate to a single number (float or integer). No checking is done for anything stupid or harmful in the string.&lt;/p&gt;
&lt;p&gt;Constants can be defined and used in the &lt;em&gt;xml&lt;/em&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;scale=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(3-5**0.5)/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;t1=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(5**0.5-1)/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;t2=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(3-5**0.5)/4&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;t3=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;((10**0.5-2**0.5)*(5+5**0.5)**0.5)/8&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;t4=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;((10**0.5-2**0.5)*(5-5**0.5)**0.5)/8&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pentagon&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;              
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 180 sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx {t1} sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx {t2} ty {t3} sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -0.5 ty {t4}  sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -0.5 ty -1*{t4}  sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx {t2} ty -1*{t3} sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pentagon&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pentagon&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The value of a constant is defined in a &lt;em&gt;constants&lt;/em&gt; element using attributes (eg. &lt;code&gt;scale="(3-5**0.5)/2"&lt;/code&gt;). These constants can then be used later when defining transforms where the attribute/constant name is enclosed in curly brackets (eg, &lt;code&gt;sa {scale}&lt;/code&gt;). This is implemented in the node code using python's &lt;a href="https://docs.python.org/3/library/string.html#format-string-syntax"&gt;format string syntax&lt;/a&gt; for substitution. Any of the restrictions on format field_names also apply to constant names. &lt;/p&gt;
&lt;p&gt;If a &lt;em&gt;field_name&lt;/em&gt; such as &lt;code&gt;{scale}&lt;/code&gt; is not defined in a &lt;em&gt;constants&lt;/em&gt; element in the xml then a node input is created with this name. In the node diagram a  &lt;em&gt;Float&lt;/em&gt; or &lt;em&gt;Integer&lt;/em&gt; or similar node can be wired to this input. This allows for the geometry to be animated or for fast experiments with different attribute values.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;max_depth&lt;/em&gt; attribute value of rule &lt;em&gt;R1&lt;/em&gt; has been replaced by the &lt;code&gt;{md}&lt;/code&gt; variable in the following &lt;em&gt;xml&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;scale=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(3-5**0.5)/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;t1=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(5**0.5-1)/2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;t2=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(3-5**0.5)/4&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;t3=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;((10**0.5-2**0.5)*(5+5**0.5)**0.5)/8&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;t4=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;((10**0.5-2**0.5)*(5-5**0.5)**0.5)/8&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{md}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pentagon&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;              
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 180 sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx {t1} sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx {t2} ty {t3} sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -0.5 ty {t4}  sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -0.5 ty -1*{t4}  sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx {t2} ty -1*{t3} sa {scale}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pentagon&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pentagon&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;Generative Art&lt;/em&gt; node that uses this xml then acquires an extra input &lt;em&gt;md&lt;/em&gt; which can be wired to another node. If no input is connected the variable value will default to zero.&lt;/p&gt;
&lt;p&gt;&lt;img alt="variable node diagram" src="./images/ga_pentaflake_node_02.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/pentaflake_vars.xml"&gt;xml&lt;/a&gt;, &lt;a href="https://github.com/elfnor/generative-art-examples/blob/master/pentaflake_vars.json"&gt;nodes in json&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/N-flake"&gt;info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By varying the value of the &lt;em&gt;Integer&lt;/em&gt; node it is very easy to produce a set of images to show each iteration of the pentaflake fractal.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pentaflake gif" src="./images/pentaflake.gif" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript'; 
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="structuresynth"></category></entry><entry><title>Generative Art - Sverchok Node Update</title><link href="http://www.elfnor.com/generative-art-sverchok-node-update.html" rel="alternate"></link><updated>2016-02-28T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2016-02-28:generative-art-sverchok-node-update.html</id><summary type="html">&lt;p&gt;&lt;img alt="6 spirals mesh render" src="./images/6_spirals_mesh_render_03_018.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've made some changes and improvements to the &lt;em&gt;Generative Art&lt;/em&gt; node in Sverchok. This node uses a simple &lt;em&gt;xml&lt;/em&gt; file to define a set of rules to produce geometry. This node is very strongly based on &lt;a href="http://structuresynth.sourceforge.net/"&gt;Structure Synth&lt;/a&gt; and can produce &lt;a href="https://en.wikipedia.org/wiki/L-system"&gt;Lindermayer Systems (lsystems)&lt;/a&gt; and fractals as well as more random and interesting creations. &lt;/p&gt;
&lt;p&gt;The new version is now merged into the Sverchok master branch on &lt;a href="https://github.com/nortikin/sverchok"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Visible changes:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;variable node inputs are now named according to field name ({myvar}) in xml  &lt;/li&gt;
&lt;li&gt;separate named matrix list output for each type of shape in xml  &lt;/li&gt;
&lt;li&gt;constants can be defined in xml &lt;constants myconst="1.618" /&gt;  &lt;/li&gt;
&lt;li&gt;updated docs  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other:&lt;/p&gt;
&lt;p&gt;I've changed the way the system state matrix accumulates when a rule has multiple call statements. This makes translated examples from Structure Synth work as expected. The change also makes the transforms for substitution tilings, fractals and things like the game level generator easier to calculate. This may break some previous xml definition files. I'm working on updating all the examples I've given in previous posts.&lt;/p&gt;
&lt;p&gt;I've tested the new &lt;em&gt;Generative Art&lt;/em&gt; node by checking it can generate various 2D and 3D fractals and translating some Structure Synth and Context Free Art examples. I'm using these tests to write up some future blog posts which should make a good demonstration of the nodes possibilities.&lt;/p&gt;
&lt;p&gt;Here below, for reference is the documentation for the node. This can also be found in the Sverchok directory (&lt;code&gt;/sverchok/docs/nodes/generator/generative_art.rst&lt;/code&gt;) or &lt;a href="http://nikitron.cc.ua/sverch/html/nodes/generator/generative_art.html"&gt;online&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To use:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;download and install &lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt;   &lt;/li&gt;
&lt;li&gt;download the zip file for &lt;a href="https://github.com/nortikin/sverchok"&gt;Sverchok&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Install Sverchok. In Blender , File &amp;gt; User Preferences &amp;gt; Add-ons &amp;gt; Install from zip and select the Sverchok download  &lt;/li&gt;
&lt;li&gt;In a node editor window, select display Sverchok nodes (&lt;img alt="icon" src="./images/sverchok_icon.png" /&gt;), and add a new node tree.&lt;/li&gt;
&lt;li&gt;Add a &lt;em&gt;Generative Art&lt;/em&gt; node (&lt;em&gt;Add &amp;gt; Generators &amp;gt; Generative Art&lt;/em&gt;)  &lt;/li&gt;
&lt;li&gt;Add an &lt;em&gt;xml&lt;/em&gt; file and other nodes as shown below  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Functionality&lt;/h2&gt;
&lt;p&gt;This node can be used to produce recursive three dimensional structures following a design specified in a separate xml file. These structures are similar to fractals or lsystems.&lt;/p&gt;
&lt;p&gt;The xml file defines a set of transformation rules and instructions to place objects. A simple set of rules can often generate surprising and complex structures.&lt;/p&gt;
&lt;h2&gt;Inputs &amp;amp; Parameters&lt;/h2&gt;
&lt;p&gt;This node has the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xml file&lt;/strong&gt; - Required. This specifies the LSystem design and should be a linked text block in the .blend file.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;r seed&lt;/strong&gt; - Integer to initialize python's random number generator. If the design includes a choice of multiple rules, changing this will change the appearance of the design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max mats&lt;/strong&gt; - To avoid long delays or lock ups the output of the node is limited to this number of matrices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This node has the following inputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vertices&lt;/strong&gt; - Optional. A list of vertices to be joined in a ring and used as the basis for a tube structure. Typically the output of a Circle or NGon node.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt; - Optional. The xml file can have optional variables defined using {myvar} type format notation. Extra named data inputs are generated for each of these these variables. These variables can be used to control animations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Outputs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Vertices, Edges and Faces&lt;/strong&gt; - If the Vertices input is connected, these outputs will define the mesh of a tube that skins the structure defined in the xml file. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Shapes Matrices&lt;/strong&gt; - For each &lt;em&gt;shape&lt;/em&gt; atribute defined in the xml file a named output will be generated. This output is a list  list of matrices that define the structure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Examples of usage&lt;/h2&gt;
&lt;p&gt;A simplified description of the algorithm for the evaluation of a design.&lt;/p&gt;
&lt;p&gt;The xml file (see below for examples and descriptions) consist of a set of rules, each rule has a list of instructions, each instruction defines a transform and either a call to a rule or an instruction to place an instance. &lt;/p&gt;
&lt;p&gt;The system is implemented by a stack where each item in the stack consists of the next rule to call, the current depth of the system  and the current state of the system. At each iteration of the processor the last item is removed from the stack and processed. &lt;/p&gt;
&lt;p&gt;Each instruction in the rule removed from the stack is processed in turn. The current state of this system is set to that of the item removed from the stack. Any transform in the instruction is applied to the system state. If the instruction is a call to a rule, a new item is added to the stack with the new rule, the depth increased by one, and the new system state. If the instruction is to place an instance, the matrix representing the new system state is added to the output matrix list for that type of shape. The processor then proceeds to what is now the last item on the stack.&lt;/p&gt;
&lt;p&gt;If the  max_depth for the current rule is reached  or the max_depth for overall design is reached then the processor goes back and processes what is now the last item on the stack without taking any other action. If the stack is empty or the maximum number of matrices has been reached the processor stops.&lt;/p&gt;
&lt;p&gt;A simple example of an xml design file:&lt;/p&gt;
&lt;p&gt;6 Spirals&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;150&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 120&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 120&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 2.6 rx 3.14 rz 12 ry 6 sa 0.97&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt;  &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sa 2.6&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -2.6 rz 12 ry 6 sa 0.97&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sx 2.6&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This specifies the following design with 6 spirals.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="6 spiral screen shot with node diagram and text file and structure" src="https://cloud.githubusercontent.com/assets/7930130/13376231/cb79f476-de1b-11e5-90e9-845f3c201228.png" /&gt;&lt;/p&gt;
&lt;p&gt;The xml file consists of a list of rules. There must be at least one rule called entry. This is the starting point for the processor. Each rule consists of a list of instructions. These instructions can either be a call to another rule or an instruction to place an instance of an object. &lt;/p&gt;
&lt;p&gt;Calls can be recursive. For the example above the first instruction in rule R1 also calls rule R1. This recursion stops when the max_depth value is reached or the max_mats value set in the node is reached. The max_depth can also be set separately for each rule and is added as an attribute eg &lt;code&gt;&amp;lt;rule name="R1" max_depth="10"&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each of these instructions can be modified with a set of transforms. If the transform is omitted it defaults to the identity transform.&lt;/p&gt;
&lt;p&gt;A transform consist of translations, rotations and scaling operations. For example &lt;code&gt;tx 1.3&lt;/code&gt;  means translated 1.3 units in the &lt;code&gt;x&lt;/code&gt; direction, &lt;code&gt;rz 6&lt;/code&gt;  means rotate 6 degrees about the &lt;code&gt;z&lt;/code&gt; axis and &lt;code&gt;sa 0.99&lt;/code&gt; means scale all axes by 0.99.&lt;/p&gt;
&lt;p&gt;The full list of transforms that take one argument : &lt;code&gt;tx ty tz rx ry rz sx sy sz sa&lt;/code&gt;&lt;br /&gt;
In addition all three axes values for either a translation or scale can be applied at once with a triplet of values. 
For example: &lt;code&gt;t 1.1 2.2 3.3  s 0.9 0.9 0.7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instead of using a single &lt;em&gt;transform&lt;/em&gt; attribute, each transform can be specified individually. For example &lt;code&gt;transforms="tx 1 rz 90 sa 0.75"&lt;/code&gt; can be replaced with &lt;code&gt;tx="1" rz="90" sa="0.75"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The count attribute specifies how many times that instruction is repeated.  if count is omitted it defaults to 1. For example the instruction &lt;code&gt;&amp;lt;call count="3" transforms="rz 120" rule="R1"/&amp;gt;&lt;/code&gt; calls rule &lt;code&gt;R1&lt;/code&gt; applying a 120 degree rotation about &lt;code&gt;z&lt;/code&gt; in between each call.&lt;/p&gt;
&lt;p&gt;An instance instruction tells the processor to add a matrix to the output list defining the state of the system at that point. The names used in the shape attribute are used as the names for the node's output sockets. If there is more than one type of shape each will have its own output socket.&lt;/p&gt;
&lt;h3&gt;Multiple Rule Definition Example&lt;/h3&gt;
&lt;p&gt;There can be multiple definitions of the same rule in an xml file.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;p&gt;Tree&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spiral&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spiral&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz 0.1 rx 1 sa 0.995&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spiral&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s 0.1 0.1 0.15&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tubey&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spiral&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz 0.1 rx 1 ry 4 sa 0.995&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spiral&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s 0.1 0.1 0.15&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tubey&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spiral&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz 0.1 rx 1 rz -4 sa 0.995&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spiral&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s 0.1 0.1 0.15&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tubey&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spiral&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 15&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spiral&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spiral&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="tree structure image" src="https://cloud.githubusercontent.com/assets/7930130/7782285/25164a80-0162-11e5-9feb-32c4f3908f1e.png" /&gt;&lt;/p&gt;
&lt;p&gt;In the above xml file there are four definitions of the &lt;code&gt;spiral&lt;/code&gt; rule. Each rule version has a weight attribute. The processor will call each version of the &lt;code&gt;spiral&lt;/code&gt; rule in a random manner. The weight attribute will determine the probability a particular rule version is called. &lt;/p&gt;
&lt;p&gt;The first three definitions of the &lt;code&gt;spiral&lt;/code&gt; rule all place an object instance and then call the &lt;code&gt;spiral&lt;/code&gt; rule with the same translation along the &lt;code&gt;z&lt;/code&gt; axis and rotation about the &lt;code&gt;x&lt;/code&gt; axis but different amounts of rotation about the &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; axis. The fourth definition calls the &lt;code&gt;spiral&lt;/code&gt; rule twice without placing an instance. This causes the branches in the tree structure. Changing the value of the weight attribute for this rule version will change how often the tree branches. For a larger weight value, the rule gets called more often and there are more branches.&lt;/p&gt;
&lt;p&gt;If the weight attribute is omitted each version will have equal weight. Changing the value of &lt;code&gt;r seed&lt;/code&gt; in the node interface will change the generated structure for xml files with multiple rule definitions. This example had rseed = 1.&lt;/p&gt;
&lt;h3&gt;Successor Rule Example&lt;/h3&gt;
&lt;p&gt;Normally when the &lt;code&gt;max_depth&lt;/code&gt; for a rule is reached that 'arm' of the structure is finished. If a rule defines a successor rule then this rule will be called when the &lt;code&gt;max_depth&lt;/code&gt; is reached. In the following example when the &lt;code&gt;y180&lt;/code&gt; rule gets called it will be called  90 times in succession and produce a 180 degree turn about the y axis. When it finishes the successor rule &lt;code&gt;r&lt;/code&gt; will be called and either produce a 180 degree turn about the &lt;code&gt;y&lt;/code&gt; axis or the &lt;code&gt;z&lt;/code&gt; axis.&lt;/p&gt;
&lt;p&gt;Nouveau variation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 60&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;y180&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;z180&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;y180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dbox&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ry -2 tx 0.1 sa 0.996&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;y180&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;z180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;successor=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dbox&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 2 tx 0.1 sa 0.996&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;z180&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dbox&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s 0.55 2.0 1.25 ry 90 rz 45&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="nouveau variation structure" src="https://cloud.githubusercontent.com/assets/7930130/7629793/cb2d4a30-fa83-11e4-8c75-2fa6488f65fe.png" /&gt;&lt;/p&gt;
&lt;p&gt;This example needs "max matrices" set to 5000 to get the above result.&lt;/p&gt;
&lt;h3&gt;Mesh Mode Example&lt;/h3&gt;
&lt;p&gt;Using the matrices output allows a separate object to be placed at each location. The vertices input and the mesh (vertices, edges, faces) output "skins" the mesh into a much smaller number of objects. The vertices input should be a list of vertices such as that generated by the "Circle" node or "NGon" node. It could also be a circle type object taking from the scene using the "Objects In" node. The list of vertices should be in order so they can be made into a ring with the last vertex joined to the first. That ring dosen't have to be planar.&lt;/p&gt;
&lt;p&gt;&lt;img alt="node and result picture for 6 spiral in mesh mode" src="https://cloud.githubusercontent.com/assets/7930130/13376232/d20249ce-de1b-11e5-968d-727f0038305e.png" /&gt;&lt;/p&gt;
&lt;p&gt;The output will not always be one mesh. If the rule set ends one 'arm' and goes back to start another 'arm' these two sub-parts will be separate meshes. Sometimes the mesh does not turn out how you would like. This can often be fixed by changing the rule set.&lt;/p&gt;
&lt;p&gt;Often a mesh tube will turn out flat rather than being tube like. This can usually be fixed by either rotating the vertex ring in the scene or by adding a rotation transform to the "instance" commands in the rule set.&lt;/p&gt;
&lt;p&gt;For example change &lt;code&gt;&amp;lt;instance shape="s1"/&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;instance transforms="ry 90" shape="s1"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In other cases the mesh can be connected in the wrong order.&lt;/p&gt;
&lt;p&gt;For example the following two xml files will look the same when the matrix output is used to place objects, but have different output when they are used in mesh mode. Both sets of xml rules produce the same list of matrices just in a different order.&lt;/p&gt;
&lt;p&gt;Fern 1 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2000&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;      
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 12.5 tz 0.9 s 0.98 0.95 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;       
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.1 ty -0.45 ry 40 sa 0.25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 25 tz 1.2 s 0.9 0.9 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;     
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image fern wrong" src="https://cloud.githubusercontent.com/assets/7930130/7629779/b6553802-fa83-11e4-8390-aa9ba2a0c44d.png" /&gt;&lt;/p&gt;
&lt;p&gt;Fern 2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2000&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;      
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 12.5 tz 0.9 s 0.98 0.95 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;        
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 12.5 tz 0.9 s 0.95 0.95 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.1 ty -0.45 ry 40 sa 0.25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;     
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;    

&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 25 tz 1.2 s 0.9 0.9 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;     
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;    
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image fern right" src="https://cloud.githubusercontent.com/assets/7930130/7629783/bbe99588-fa83-11e4-8d70-92cc2909675e.png" /&gt;&lt;/p&gt;
&lt;p&gt;Again these were both done with max mats set to 5000.&lt;/p&gt;
&lt;h3&gt;Constants and Variables Example&lt;/h3&gt;
&lt;p&gt;Constants and variables can be included in the xml file by replacing a numerical value with a pair of braces. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    transforms = &amp;quot;tx 0.5 rx 20 sa 0.9&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    transforms = &amp;quot;tx {x_const} rx 20 sa 0.9&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Constants are defined within the xml as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt;  &lt;span class="na"&gt;x_const=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.5&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Multiple constants can be defined within one element and several &lt;em&gt;constants&lt;/em&gt; elements can be used as required in the xml file.&lt;/p&gt;
&lt;p&gt;If a field name in between curly brackets is not given a value in a &lt;em&gt;constants&lt;/em&gt; element then a named input socket will be added to the node. A &lt;em&gt;Float&lt;/em&gt;, &lt;em&gt;Integer&lt;/em&gt; or similar node input can be wired up to this input variable.&lt;/p&gt;
&lt;p&gt;The example below uses a variable ({curl_angle}) to animate the amount of curl on the fern structure shown in the mesh mode example and two constants to fix the the value of the &lt;code&gt;tz&lt;/code&gt; transform in the large curl and the scale ({sxy}) in all the curls.&lt;/p&gt;
&lt;p&gt;Fern 3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2000&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;constants&lt;/span&gt; &lt;span class="na"&gt;zd=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sxy=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.9&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
   &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;      
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;60&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx {curl_angle} tz {zd} s {sxy} {sxy} 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;        
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;40&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx {curl_angle} tz {zd} s {sxy} {sxy} 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.1 ty -0.45 ry 40 sa 0.25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;     
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;    

&lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;40&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 2*{curl_angle} tz 2.7 s {sxy} {sxy} 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;     
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;    
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image fern animation" src="https://cloud.githubusercontent.com/assets/7930130/13376233/d7303744-de1b-11e5-8c91-1d56f412b27d.png" /&gt;&lt;/p&gt;
&lt;p&gt;For this animation the index number of the current frame in the animation is translated from the range 1 to 250 to the range 16 to 6 via the "Map Range" node and wired into the &lt;code&gt;curl_angle&lt;/code&gt; input of the "Generative Art" node. This cause the fern to unwind as the animation proceeds.&lt;/p&gt;
&lt;p&gt;Simple maths can also be use in the transforms definition. This has been used above in the &lt;code&gt;curlsmall&lt;/code&gt; rule. The &lt;code&gt;rx&lt;/code&gt; rotation of the transform will always be twice that of the &lt;code&gt;rx&lt;/code&gt; rotation in the &lt;code&gt;curl1&lt;/code&gt; and &lt;code&gt;curl2&lt;/code&gt; rules. There cannot be any spaces in any maths expressions for the rotation, translation or scale parameters when using a single transforms attribute string. To allow for more complicated expressions each transform can be separated out into its own attribute. &lt;/p&gt;
&lt;p&gt;transforms as single attribute (no spaces allowed in maths expression)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 1 rz -1*{v1} ry {v2}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;each transform with its own attribute (can have spaces)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;tx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rz=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-1 * {v1}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ry=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{v2}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All this is implemented by first using python's string &lt;code&gt;format&lt;/code&gt; method to substitute in the variable value from the node data input. Then the resulting string is passed to python's &lt;code&gt;eval()&lt;/code&gt; function. The string must evaluate to a single number (float or integer). Using &lt;code&gt;eval()&lt;/code&gt; is a potential security problem as in theory someone could put some malicious code inside an xml lsystem definition. As always don't run code from a source you don't trust.&lt;/p&gt;
&lt;p&gt;The python &lt;code&gt;math&lt;/code&gt; and &lt;code&gt;random&lt;/code&gt; modules exist in the namespace of the "Generative Art" node so for example a transform could be defined as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    tx=&amp;quot;2**0.5&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    tx=&amp;quot;math.sqrt(2)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Only the transforms that take a single number that is &lt;code&gt;tx, ty, tz, rx, ry, rz, sx, sy, sz&lt;/code&gt; and &lt;code&gt;sa&lt;/code&gt; have been implemented using individual attributes. The ones that use triplets to specify all three translations or scales at once (&lt;code&gt;t&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt;) can only be used in a transform string.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;This node is closely based on &lt;a href="http://structuresynth.sourceforge.net/"&gt;Structure Synth&lt;/a&gt; but the xml design format and most of the code originally comes from &lt;a href="http://prideout.net/"&gt;Philip Rideout's&lt;/a&gt; &lt;a href="https://github.com/prideout/lsystem"&gt;lsystem&lt;/a&gt; repository on github.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="structuresynth"></category></entry><entry><title>Maze any Mesh in Blender</title><link href="http://www.elfnor.com/maze-any-mesh-in-blender.html" rel="alternate"></link><updated>2016-01-29T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2016-01-29:maze-any-mesh-in-blender.html</id><summary type="html">&lt;p&gt;&lt;meta property="og:image"
    content="/images/maze_mesh_mobius.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="mobius maze" src="./images/maze_mesh_mobius.png" /&gt;&lt;/p&gt;
&lt;p&gt;The grid of cells and list of links used as the data structure for 2D mazes  by &lt;a href="http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap"&gt;Jamis Buck's&lt;/a&gt; in his book "Mazes for Programmers" can be replaced with a mesh object where the vertices are equivalent to cells and the mesh edge connections define the cell neighbors. The maze carving function can then return a subset of the edges that define the path of the maze.&lt;/p&gt;
&lt;p&gt;I've implemented this in yet another scripted node (&lt;em&gt;maze_mesh.py&lt;/em&gt;) for Sverchok avaliable on &lt;a href="https://github.com/elfnor/mazes"&gt;github&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Install the &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; addon. Download the maze generation code from &lt;a href="https://github.com/elfnor/mazes"&gt;github&lt;/a&gt;. Then load the python file &lt;em&gt;maze_mesh.py&lt;/em&gt; as a text blocks into a blend file. Add a &lt;em&gt;Scripted Node&lt;/em&gt; to a Sverchok node tree. On the node select the &lt;em&gt;maze_mesh.py&lt;/em&gt; code from the lower drop down. Then click the plugin icon to the right of this field. The node should turn blue with some inputs and outputs.&lt;/p&gt;
&lt;h2&gt;Path Line generation&lt;/h2&gt;
&lt;p&gt;&lt;img alt="maze mesh node diagram" src="./images/maze_mesh_node_diagram.png" /&gt;&lt;/p&gt;
&lt;p&gt;Connect the &lt;em&gt;Vertices&lt;/em&gt; and &lt;em&gt;Edges&lt;/em&gt; input from a mesh. Connect the &lt;em&gt;Link Verticies&lt;/em&gt; and &lt;em&gt;Link Edges&lt;/em&gt; to a &lt;em&gt;Viewer Draw&lt;/em&gt; node. &lt;/p&gt;
&lt;p&gt;This set of verticies and edges without any faces is a bit hard to turn into a good visual representation of a maze. Most of the bevel, solidify or extrude modifiers and nodes need the face informaion to work (the &lt;em&gt;Path&lt;/em&gt;, &lt;em&gt;Skin Mesher&lt;/em&gt; and &lt;em&gt;Curve Viewer&lt;/em&gt; nodes don't require faces and are worth experimenting with).&lt;/p&gt;
&lt;p&gt;One way to make a representaion of the maze is to convert the link mesh to a curve (&lt;em&gt;ALT-C&lt;/em&gt;) and then apply a bevel to it under the curve property panel. For a non-flat mesh using the &lt;em&gt;Extrude&lt;/em&gt; modification or having a bevel obect that isn't an equal size in x and y tends to have odd effects at the link branches.&lt;/p&gt;
&lt;p&gt;&lt;img alt="bevelled maze path" src="./images/maze_mesh_bevel_path.png" /&gt;&lt;/p&gt;
&lt;p&gt;The curve can also be smoothed by converting the &lt;em&gt;Spline Type&lt;/em&gt; to &lt;em&gt;Bezier&lt;/em&gt; (on the tool panel in edit mode) and setting all the &lt;em&gt;Handles&lt;/em&gt; to &lt;em&gt;Auto&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="smoothed bevelled maze path" src="./images/maze_mesh_bevel_path_smooth.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Wall and path generation&lt;/h2&gt;
&lt;p&gt;If the scripted node is also provided with the polygons from the mesh, the node will apply an edge bevel to the mesh (this is the same as using &lt;em&gt;CTRL-B&lt;/em&gt; on a mesh in edit mode, not to be confused with adding a bevel to a curve as used above). The width of the bevel is set by the offset parameter to be a percent of the adjacent edge length. The node then outputs two subsets of this bevelled mesh. One for the path and one for the walls.&lt;/p&gt;
&lt;p&gt;&lt;img alt="node diagram for path and walls" src="./images/maze_mesh_path_wall_nodes.png" /&gt;&lt;/p&gt;
&lt;p&gt;Either the wall or the path faces can be used with a solidify node to produce a maze.&lt;/p&gt;
&lt;p&gt;&lt;img alt="node diagram for solidify walls" src="./images/maze_mesh_solidify_walls.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="solid walls on torus" src="./images/maze_mesh_torus_walls.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="solid path on torus" src="./images/maze_mesh_torus_path.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Full 3d Maze&lt;/h2&gt;
&lt;p&gt;Use the &lt;em&gt;Array Modifier&lt;/em&gt; 3 times on the default cube to produce a 3D lattice, at each stage 
select &lt;em&gt;Merge&lt;/em&gt; to merge the vertices of each cube to its neighbor. &lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot of using array modifier" src="./images/maze_mesh_array.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="lattice" src="./images/maze_mesh_lattice.png" /&gt;&lt;/p&gt;
&lt;p&gt;Using the vertices and edges of this mesh as input to the &lt;em&gt;maze_mesh&lt;/em&gt; node will give a 3D maze path through the lattice.&lt;/p&gt;
&lt;p&gt;&lt;img alt="lattice maze path" src="./images/maze_mesh_lattice_path.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here I've rendered the maze using the &lt;em&gt;Curve Viewer&lt;/em&gt; node to fill the link path and the &lt;em&gt;Dupli Instancer&lt;/em&gt; node to fill in the corners with a sphere.&lt;/p&gt;
&lt;p&gt;&lt;img alt="node diagram Curve Viewer" src="./images/maze_mesh_lattice_nodes.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3d maze" src="./images/maze_mesh_3d_016.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Other Ideas&lt;/h2&gt;
&lt;p&gt;Create an irregular 2d grid maze. Add a fine &lt;em&gt;Grid&lt;/em&gt; object, say 100 by 100. Use the circle select tool to draw a shape or word on the grid. Invert the selection and delete the faces. Use this grid as input to the &lt;em&gt;maze_mesh&lt;/em&gt; node.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Maze maze" src="./images/maze_mesh_shaped_grid.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="maze"></category></entry><entry><title>Blender 3D Maze Generator</title><link href="http://www.elfnor.com/blender-3d-maze-generator.html" rel="alternate"></link><updated>2015-12-20T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-12-20:blender-3d-maze-generator.html</id><summary type="html">&lt;p&gt;&lt;img alt="red maze blue maze" src="./images/red_maze_blue_maze.png" /&gt;&lt;/p&gt;
&lt;p&gt;The same backtracking algorithm that produces &lt;a href="http://www.elfnor.com/blender-2d-maze-generator.html"&gt;2D mazes&lt;/a&gt; can be used to produce three dimensional mazes. All that's needed is to set up the cells in the grid with an extra dimension and define the neighbors to include cells on the layers above and below the cell. &lt;/p&gt;
&lt;p&gt;Here I've chosen the neighbors to be the 4 adjacent cells on the same layer, the 4 cells above these adjacent cells  and the 4 cells below them. This gives each cell 12 neighbors and allows the maze to be drawn with ramps or diagonal staircases. This configuration is good for marble runs and mazes to explore in a game environment. A more common alternative would be to just add the cells directly above and below the original cells to give only six neighbors. This would require staircases going directly up from one level to the next.&lt;/p&gt;
&lt;p&gt;With 12 potential neighbors its impractical to include a different tile for each possible combination of links (as we did with  the 2D maze). For 12 neighbors there would be &lt;span class="math"&gt;\(2^{12} - 1 = 4095\)&lt;/span&gt; different tiles needed most of which would not occur in any given maze. Instead I've limited the maze components to a platform that sits at the center of each cell,  a straight bridge that goes to a linked neighbor on the same level and a ramp that either goes up to the platform diagonally above or below the cell.&lt;/p&gt;
&lt;p&gt;As before the python and blend files are on &lt;a href="https://github.com/elfnor/mazes"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Add  &lt;code&gt;maze_passage_3D.py&lt;/code&gt; and &lt;code&gt;maze_3D.py&lt;/code&gt; as text blocks to a blender file. Set up a scripted node to use &lt;code&gt;maze_passage_3D.py&lt;/code&gt;. Alternatively load &lt;code&gt;maze_3D_demo.blend&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The node parameters are similar to the 2D version. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rseed&lt;/code&gt; sets the random number generator. Change to get a maze with a different path. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;sizeX, sizeY, sizeZ&lt;/code&gt; set the size of the maze. Setting &lt;code&gt;sizeZ&lt;/code&gt; to 1 will produce a 2D maze. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;scaleXY&lt;/code&gt; sets the horizontal spacing of the maze components. It should be equal to the horizontal dimension of a plaform plus a bridge. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;scaleZ&lt;/code&gt; sets the vertical spacing of the components and should be equal to the Z dimension of the ramp or staircase. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;braid&lt;/code&gt; set the proportion of dead ends to loops in the maze. Set to 0 there will be dead ends and no loops. There will only be one path between any two platforms in the maze. Set to 1 there will be lots of loops and no dead ends. Each platform will be connected by at least two bridges or ramps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="node diagram" src="./images/maze_3D_nodes.png" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;matrices&lt;/code&gt; output gives a list of matrices define the location, and rotation of each maze component. The &lt;code&gt;mask&lt;/code&gt; output gives a list of integers which define which component to place with each matrix. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 : platform&lt;/li&gt;
&lt;li&gt;1 : bridge&lt;/li&gt;
&lt;li&gt;2 : ramp&lt;/li&gt;
&lt;li&gt;3 : missing bridge rail (internal)&lt;/li&gt;
&lt;li&gt;4 : missing ramp rail (internal)&lt;/li&gt;
&lt;li&gt;5 : missing bride rail (edge)&lt;/li&gt;
&lt;li&gt;6 : missing up ramp rail (edge) &lt;/li&gt;
&lt;li&gt;7 : missing down ramp rail (edge)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only the first 3 components are needed to produce a maze. I'll explain the other 5 components later. The platform component needs to have its origin at (0, 0, 0). The bridge component should also be centered at the origin.  The ramp should also have its origin at (0, 0, 0) and needs to go upward from -X to + X. The ramp mesh needs to be offset from its origin  in the y-direction. When the up ramp mesh is rotated 180 degrees around its origin it should be in the correct position to function as a down ramp without intersecting with either the up ramp or the bridge. A picture of a the simplest mesh for each component should make this clear. &lt;/p&gt;
&lt;p&gt;&lt;img alt="3D components" src="./images/maze_3D_components.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3D maze" src="./images/maze_3D_maze.png" /&gt;&lt;/p&gt;
&lt;p&gt;It is possible to move the mesh of the bridge and ramp components relative to their origins (in edit mode) to get different configurations. For example the bridges could be set to be at the end of the platforms.&lt;/p&gt;
&lt;p&gt;The lack of rails on the platforms above is a serious health and safety issue. To address this the additional matrices corresponding to the mask values 3 to 7 can be used to apply rails to the platforms where there is no link to another platform. For example the following components give the accompanying maze. Components 5, 6  and 7 are used at the edge of the maze while components 3 and 4 fill in the gaps in the middle of the maze. For a different look a broken bridge or a blocked passage way could be used instead of rails.&lt;/p&gt;
&lt;p&gt;&lt;img alt="3D rail components" src="./images/maze_3d_rail_components.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3D rail maze" src="./images/maze_3d_rail_maze.png" /&gt;&lt;/p&gt;
&lt;p&gt;The extra edge rail components could also be used  to place windows in a house maze. The internal rail components (3, 4) would be walls in the rooms.&lt;/p&gt;
&lt;p&gt;The screen shot at the top of the post is from &lt;code&gt;red_maze_blue_maze.blend&lt;/code&gt; where more complex meshes have been used for the components. Three different objects have been used for the platforms to give some variation to the maze look. The matrix list was split into three random parts using &lt;em&gt;List Shuffle&lt;/em&gt;, &lt;em&gt;List Split&lt;/em&gt; and &lt;em&gt;List Slice&lt;/em&gt; nodes.&lt;/p&gt;
&lt;p&gt;Laser Blaster provided the template for the awesome player character I've used in the game. It's available from this &lt;a href="http://blenderartists.org/forum/showthread.php?304200-Third-Person-Template-%28Xbox-360-gamepad-support-and-Mario-Galaxy-style-gravity%29"&gt;blender artists post&lt;/a&gt; with a use it however you like license.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;red_maze_blue_maze.blend&lt;/code&gt; file is playable as a blender game with unlimited mazes to solve. Generate your own level (set the size and rseed values). Move the &lt;em&gt;Spawn Here&lt;/em&gt; empty to the desired start point and the &lt;em&gt;flag&lt;/em&gt; to the end point. Then just play (&lt;em&gt;P&lt;/em&gt;). The character is moved with the &lt;em&gt;WASD&lt;/em&gt; keys and the camera view can be moved around using the mouse (press the middle mouse button to activate).&lt;/p&gt;
&lt;p&gt;The camera view gets blocked by the geometry. This can be fixed by giving the &lt;em&gt;Game Logic&lt;/em&gt; property &lt;em&gt;CamBlock&lt;/em&gt; to any geometry you want the camera to avoid. The easiest way to do this is select all the maze components, join them together (&lt;em&gt;CTRL-J&lt;/em&gt;) then in a &lt;em&gt;Logic Editor&lt;/em&gt; view on the properties panel click the &lt;em&gt;Add Game Property&lt;/em&gt; and type &lt;em&gt;CamBlock&lt;/em&gt; in the field.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screen shot game property" src="./images/maze_3D_camblock.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript'; 
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="maze"></category></entry><entry><title>Blender 2D Maze Generator</title><link href="http://www.elfnor.com/blender-2d-maze-generator.html" rel="alternate"></link><updated>2015-12-11T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-12-11:blender-2d-maze-generator.html</id><summary type="html">&lt;p&gt;&lt;img alt="game wide shot" src="./images/maze_2d_steey_taws_01.png" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="{fileame}blender_game_level_generator.md"&gt;game levels&lt;/a&gt; that can be produced by the &lt;em&gt;Generative Art&lt;/em&gt; Sverchok node in Blender are lots of fun to explore but there's nothing to stop them producing overlapping paths like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="overlaps in Steely Taws" src="./images/level_gen_STD_ramps_render_015.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is because the alogrithim behind the node is based on L-systems and knows nothing about where its already been. The code only keeps tracks of a current transform (encoding position and direction) and randomly chooses another transfom rule to apply. It has no way to know where anything has already been drawn.&lt;/p&gt;
&lt;p&gt;The game levels from the &lt;em&gt;Generative Art&lt;/em&gt; node can be edited to produce a playable layout. See this &lt;a href="http://techmonkeybusiness.com/steely-taws-puzzle-game-v3.html"&gt;great puzzle game&lt;/a&gt; complete with a Gondola, from Hamish at TechMonkeyBusiness. But I wanted to produce some more orderly game levels so I started looking at maze generating algorithms. I found &lt;a href="http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap"&gt;Jamis Buck's&lt;/a&gt; great posts on maze building and his book "Mazes for Programmers". &lt;/p&gt;
&lt;p&gt;In my ususal magpie fashion I started off with someone else's bright shiny code, in this case &lt;a href="https://gist.github.com/samisalkosuo/77bd95f605fc41dc7366"&gt;this gist&lt;/a&gt; by Sami Salkosuo, which is a python version of some of the code from "Mazes for Programmers".&lt;/p&gt;
&lt;p&gt;This implements the recursive backtracker algoritm as described on Buckblog. Imagine a grid of squares for a a 2D maze. The squares represent cells that will become paths in the maze. The lines at the edges of the squares are "carved" through to connect the cells to form a maze path.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s the mile-high view of recursive backtracking &lt;/p&gt;
&lt;p&gt;Choose a starting point in the field.&lt;br /&gt;
  Randomly choose a wall at that point and carve a passage through to the adjacent cell, but only if the adjacent cell has not been visited yet. This becomes the new current cell.
    If all adjacent cells have been visited, back up to the last cell that has uncarved walls and repeat.
    The algorithm ends when the process has backed all the way up to the starting point.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Theres's an animation of this &lt;a href="http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The algorithm can either be implemented using recursive function calls, or with a stack that holds the cells visited, when a passage is carved through to another cell the new cell is added to the end of the stack. When the algorihtm backtracks cells are poped off the end of the stack.&lt;/p&gt;
&lt;p&gt;I've included a version of this code in a Sverchok scripted node (&lt;em&gt;maze_2d_gen&lt;/em&gt;) that like the &lt;em&gt;Generative Art&lt;/em&gt; node has a matrices and a mask outputs. The matrices list is used to position objects and the mask list of integers is used to determine which object to place at each position. To use this you'll need both the the &lt;code&gt;maze_3d.py&lt;/code&gt; and the &lt;code&gt;maze_2D_gen.py&lt;/code&gt; files from &lt;a href="https://github.com/elfnor/mazes"&gt;github&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I'll start with a simple example &lt;code&gt;maze_2D_simple.blend&lt;/code&gt;that just has very basic components and show how to generate either a path maze or a wall maze. Then I'll show you how to make a 2D maze with some of the Steely Taws game components. Then I'll finish up with the blend file with the components, Sverchok node diagram and the game logic to allow anyone to generate and play an unlimited number of random Steely Taws game mazes. These mazes are all just 2D but the 3D code in &lt;code&gt;maze_3d.py&lt;/code&gt; shows what I'm working on next.&lt;/p&gt;
&lt;p&gt;For a demo version to show how this works I made simple straight, bend, t-intersection and 4 way cross intersection tiles. Each tile needs to fit in to a 1 unit by 1 unit square centered on the origin. The straight section goes from (-0.5, 0, 0) to (0.5, 0, 0). The bend goes from (1, 0, 0) to (0, 1, 0) and has its origin at (0, 0, 0). The t-intersection is the same length as the straight but has a path going to (0, 1, 0). In the &lt;code&gt;maze_2D_simple.blend&lt;/code&gt; file these components are on the second layer.&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple game components" src="./images/maze_2d_pieces.png" /&gt;&lt;/p&gt;
&lt;p&gt;The Sverchok node diagram is very similar to those used with the &lt;em&gt;Generaive Art&lt;/em&gt; node. A &lt;em&gt;Logic&lt;/em&gt; node and a &lt;em&gt;Mask&lt;/em&gt; node are used to separate the matrices output into four lists for the four different types of tiles (straights, bends, tees and crosses) that need to be placed. &lt;/p&gt;
&lt;p&gt;&lt;a href="./images/maze_2d_nodes_full.png"&gt;&lt;img alt="node diagram" src="./images/maze_2d_nodes_crop.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple level" src="./images/maze_2d.png" /&gt;&lt;/p&gt;
&lt;p&gt;The size of the maze can be set with the &lt;em&gt;height&lt;/em&gt; and &lt;em&gt;width&lt;/em&gt; sliders on the node. Changing the &lt;em&gt;rseed&lt;/em&gt; slider generates a new random maze. The &lt;em&gt;scale&lt;/em&gt; sets the distance between components. &lt;/p&gt;
&lt;p&gt;A braided maze is a maze that has loops. If &lt;em&gt;braid&lt;/em&gt; is set to zero there will be no loops and there will be only one path between any two parts of the maze. This type of maze has lots of dead ends (cells with only one connecting path). If &lt;em&gt;braid&lt;/em&gt; is set to 1 there will be no dead ends and lots of loops. In between, &lt;em&gt;braid&lt;/em&gt; sets the proportion of dead ends that are turned into loops.&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple level" src="./images/maze_2d_braid.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rendered level" src="./images/maze__2D_simple_042.png" /&gt;&lt;/p&gt;
&lt;p&gt;For some mazes there may be no 4 way intersections (or for braid = 1, no ends), in this case you need to turn the display of ths object off or you'll get an out of place cross (or end) at the origin.&lt;/p&gt;
&lt;p&gt;With a different set of tiles its easy to produce a typical maze with walls between the passages. The &lt;code&gt;maze_2D_simple.blend&lt;/code&gt; file has some tiles for this on the third layer. Swap them for the path tiles gives a maze like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="tiles for walled maze" src="./images/maze_2d_walls.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="walled maze" src="./images/maze__2D_simple_02_012.png" /&gt;&lt;/p&gt;
&lt;p&gt;Try hedges or a layout such as a garden that is less obviously a maze.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;steely_taws_2D_maze.blend&lt;/code&gt; file has all the parts to generate and play an unlimited number of marble run mazes. &lt;/p&gt;
&lt;p&gt;Install a recent version of &lt;a href="https://github.com/nortikin/sverchok"&gt;Sverchok&lt;/a&gt; then open the blend file. A simple maze with 100 tiles should be automatically generated. Maximise the 3D View (CTRL-UP). Select the  camera view (NUMPAD-0) then press P to start the game. Controls are provided for either the arrow keys or a joystick. If you fall off the edge you will automatically respawn at the start.&lt;/p&gt;
&lt;p&gt;To make your own levels, press ESC to close the game and return to Blender. Change the the "rseed" value in the node and get a new game. &lt;/p&gt;
&lt;p&gt;In the blend file I've used "mesh instancer" nodes to the replace the "Objects In" and "Viewer Draw" nodes. This allows the same mesh to be used for every straight in a similar way to when you do  a linked duplicate in Blender and produces a much smaller file.&lt;/p&gt;
&lt;p&gt;Here's another screen shot of the game being played in the Blender Game Engine.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screen shot 1 of game in play" src="./images/maze_2d_steely_taws_02.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="maze"></category></entry><entry><title>Larger Hyperbolic Tilings in 3D using Processing</title><link href="http://www.elfnor.com/larger-hyperbolic-tilings-in-3d-using-processing.html" rel="alternate"></link><updated>2015-11-27T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-11-27:larger-hyperbolic-tilings-in-3d-using-processing.html</id><summary type="html">&lt;p&gt;&lt;img alt="plane, sphere and hyperbolic footbal" src="./images/CORAL_735_02_031.png" /&gt;&lt;/p&gt;
&lt;p&gt;After my &lt;a href="http://www.elfnor.com/hyperbolic-tiling-in-3d.html"&gt;last post&lt;/a&gt; on producing tiled hyperbolic planes in 3D, I was still unhappy with the size of the planes I could generate. Using the soft body modifier in Blender I was limited to about 250 faces before everything went unstable. Also after the tiling has been unfurled the length edges were still longer in the middle and shorter towards the edges where they should all be equal. (OK, I'm getting a bit obsessed with this)&lt;/p&gt;
&lt;p&gt;The physics needed to unfurl the tiling into 3D space is a mass spring network where each vertex of the mesh is a mass and each edge of the mesh is modeled as a spring with a fixed rest length. The rest length needs to be able to be set to be different from the initial edge length. To avoid the mesh intersecting itself each vertex of the mesh also needs to repel all other vertices. &lt;/p&gt;
&lt;p&gt;I can't see any way to set rest lengths directly in either the soft body modifier or the cloth modifier in Blender so I went back to the &lt;a href="http://murderandcreate.com/physics/"&gt;Traer Physics&lt;/a&gt; library available for Processing. I recently discovered that Processing has a "python mode" that allows python code to be written in the Processing environment. This allowed me to directly combine the &lt;code&gt;hyperbolic_tiling.py&lt;/code&gt; code written for Sverchok with the Traer physics library.&lt;/p&gt;
&lt;p&gt;The Processing sketch available in the &lt;a href="https://github.com/elfnor/hyperbolic_coral"&gt;Hyperbolic Coral&lt;/a&gt; repository on github outputs &lt;code&gt;obj&lt;/code&gt; files that can easily be imported into Blender. I've included a number of these files in the repository in case anyone wants to play with them without installing Processing. &lt;/p&gt;
&lt;p&gt;If you do want to run the sketch you'll need to &lt;a href="https://processing.org/"&gt;install Processing&lt;/a&gt;. Then from with in the Processing environment &lt;code&gt;Tools &amp;gt; Add Tool... &amp;gt; Modes&lt;/code&gt; install the python mode. From the libraries tab install the &lt;code&gt;PeasyCam&lt;/code&gt; camera library. The &lt;a href="http://murderandcreate.com/physics/"&gt;Traer Physics library&lt;/a&gt; needs to be downloaded, unzipped and copied to give this folder structure &lt;code&gt;~/sketchbook/libraries/physics/library/physics.jar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Download a copy of the &lt;a href="https://github.com/elfnor/hyperbolic_coral"&gt;Hyperbolic Coral&lt;/a&gt; files from github and unzip them somewhere.  Run Processing and change the mode to Python. Open the file &lt;code&gt;hyperbolic_tiling.pyde&lt;/code&gt; and create a new folder when prompted. Move a copy of &lt;code&gt;hyperbolic_tiling.py&lt;/code&gt; into the same folder. Run the script and you should see a window displaying the tiling unfolding. &lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot hyperbolic unfurling" src="./images/processing_unfurl_ht_734.png" /&gt;&lt;/p&gt;
&lt;p&gt;There's no fancy interface for this. Edit the &lt;code&gt;p, q, layers&lt;/code&gt; parameters in the &lt;code&gt;setup()&lt;/code&gt; function and re run. The tilings are described with two numbers, &lt;code&gt;p&lt;/code&gt; the number of sides to the polygons used and &lt;code&gt;q&lt;/code&gt; the number of polygons that meet at each vertex. The number of &lt;code&gt;layers&lt;/code&gt; describes how many rings of polygons to include. Each polygon face is divided into triangles and the polygons are not so obvious in the mesh.&lt;/p&gt;
&lt;p&gt;As the number of layers increases the number of faces in the mesh increases exponentially and the simulation slows down but still runs. I've successfully produced meshes with 1624 faces. &lt;/p&gt;
&lt;p&gt;As the unfurling occurs the edges are colored in according to their length. Red edges are shorter and green edges longer than the set rest length. The cutoff values are given by &lt;code&gt;d_long&lt;/code&gt; and &lt;code&gt;d_short&lt;/code&gt; in the &lt;code&gt;draw()&lt;/code&gt; function. When the edges fall between the values they are drawn in black. The tiling lengths are still not perfectly even but they're better than I was getting in Blender.&lt;/p&gt;
&lt;p&gt;When the physics simulation has settled down the &lt;code&gt;w&lt;/code&gt; key can be used to write the mesh to an &lt;code&gt;obj&lt;/code&gt; file (&lt;code&gt;ht_01.obj&lt;/code&gt;). These files are really simple just lists of vertices and faces but they can be successfully imported into Blender.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;e&lt;/code&gt; key can be used to print some statistics about the edge lengths to the Processing console. This is useful when fine tunning the physics parameters. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# physics spring system  
# system parameters
mass = 1.1 # mass of particles
restlength = 1.0  # Rest length of springs between nodes
strength = 0.99    # Strength of springs between nodes
damping = 0.02   # Damping of springs between nodes
drag = 0.9  # Physics System drag (friction) 
repulsion = -0.01  # Repulsion force between nodes
repulsion_mindist = 0.5  # Distance from node where repulsion force begins to decrease
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've spent some (way too much) time adjusting these parameters to give as even an edge length as possible while still avoiding mesh intersections and aiming for a symmetrical final mesh. Paul Bourke's  &lt;a href="http://paulbourke.net/miscellaneous/particle/"&gt;description&lt;/a&gt; of the maths and physics of this type of particle system  was a help here (he also provides an implementation in C). &lt;/p&gt;
&lt;p&gt;My best advise if playing with this is lower the drag and increase the negative repulsion force if the mesh has intersecting faces. If the simulation goes unstable reverse the changes incrementally. You normally end up trading longer edges in the center for no intersections toward the edge. &lt;/p&gt;
&lt;p&gt;Here to follow up on the previous posts is the hyperbolic football with friends.&lt;/p&gt;
&lt;p&gt;&lt;img alt="plane, sphere and hyperbolic footbal" src="./images/hexagon_sphere_plane_hyp_processing_019.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="processing"></category></entry><entry><title>Symmetry Tile Painting in Blender</title><link href="http://www.elfnor.com/symmetry-tile-painting-in-blender.html" rel="alternate"></link><updated>2015-11-21T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-11-21:symmetry-tile-painting-in-blender.html</id><summary type="html">&lt;p&gt;&lt;img alt="p6m tiling" src="./images/blender_sym_tile_p6m.png" /&gt;&lt;/p&gt;
&lt;p&gt;After working out how to use Blender to paint &lt;a href="http://www.elfnor.com/painting-in-the-hyperbolic-plane.html"&gt;hyperbolic tilings&lt;/a&gt; I then thought of using Blender to look at planar symmetric tilings. &lt;/p&gt;
&lt;p&gt;A while back I wrote a &lt;a href="http://www.elfnor.com/Symmetry Tile plug-in for GIMP.html"&gt;GIMP plugin&lt;/a&gt; which takes a selection from an image (“cell”) and produces a new image according to one of the &lt;a href="http://en.wikipedia.org/wiki/Wallpaper_groups"&gt;17 plane symmetry groups &lt;/a&gt;. These are also known as wallpaper groups or plane  crystallographic groups. Basically it rotates and or flips copies of the cell, combines them to form a tile and then copies that tile to fill a new image. The GIMP plugin dosen't update in real time. If you want to make changes you need to re-run the plugin to generate a new tiling. &lt;/p&gt;
&lt;p&gt;Using UV mapping its really easy to get Blender to draw tilings from any of the 17 plane symmetry groups that update as you paint.&lt;/p&gt;
&lt;p&gt;This blend file (&lt;a href="/downloads/sym_tile.blend"&gt;sym_tile.blend&lt;/a&gt;) has been set up with 17 plane grids each on a separate layer. Each layer implements one of the symmetry groups via a UV map.&lt;/p&gt;
&lt;p&gt;Here's a screencast that shows the live drawing in action and explains how I set up the UV maps.&lt;/p&gt;
&lt;iframe width="660" height="420" src="http://www.youtube.com/embed/ILBDlT9oRNI?autoplay=0"&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;a href="/downloads/sym_tile.mp4"&gt;Download Link for HD version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For more on plane symmetry groups see the &lt;a href="http://elfnor.github.io/symmetrytilegallery"&gt;galleries&lt;/a&gt; of images produced with the GIMP plugin, my post on &lt;a href="http://www.elfnor.com/Symmetry Group Links and Notation.html"&gt;symmetry group notation&lt;/a&gt; which also has links to other online resources and my post on &lt;a href="http://www.elfnor.com/Using the Symmetry Tile plug-in for Quilt Design.html"&gt;quilt design&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="symmetrytile"></category></entry><entry><title>Painting in the Hyperbolic Plane</title><link href="http://www.elfnor.com/painting-in-the-hyperbolic-plane.html" rel="alternate"></link><updated>2015-11-14T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-11-14:painting-in-the-hyperbolic-plane.html</id><summary type="html">&lt;p&gt;&lt;img alt="poincare tiling" src="./images/poincare_drawing.png" /&gt;&lt;/p&gt;
&lt;p&gt;While playing around texturing the hyperbolic football from the &lt;a href="http://www.elfnor.com/hyperbolic-tiling-in-3d.html"&gt;previous post&lt;/a&gt; I discovered this technique for painting hyperbolic tilings directly in Blender.&lt;/p&gt;
&lt;p&gt;Download the &lt;a href="https://github.com/elfnor/hyperbolic_coral"&gt;hyperbolic_tiling.py&lt;/a&gt; scripted node for Sverchok. If you need help installing Sverchok or using a scripted node see the &lt;a href="http://www.elfnor.com/blender-adventures-with-hyperbolic-planes.html"&gt;first post&lt;/a&gt; on hyperbolic planes. Connect it up as shown below. The tiling above has p = 6, q = 4, layers = 3.&lt;/p&gt;
&lt;p&gt;&lt;img alt="poincare tiling in sverchok" src="./images/poincare_6-4.png" /&gt;&lt;/p&gt;
&lt;p&gt;Use the top set of outputs to give a flat plane tiled with hexagons. Bake this mesh. Then apply a "Subdivision Surface" modifier with 1 subdivision. This gives a surface tiled with quads. Alternatively you could use "Poke Faces" to divide each face into triangles or use both together. &lt;/p&gt;
&lt;p&gt;&lt;img alt="poincare tiling in sverchok" src="./images/poincare_6-4-kites.png" /&gt;&lt;/p&gt;
&lt;p&gt;Take a screenshot of the mesh and crop to show one of the central faces. Save this file as for example "kite_tile.png"&lt;/p&gt;
&lt;p&gt;&lt;img alt="single face" src="./images/kite_tile.png" /&gt;&lt;/p&gt;
&lt;p&gt;Apply a new (cycles) material to the surface and under color select "Image Texture" and set to the "kite_tile.png" image of the single face. Set the "Vector" parameter to "UV Map".&lt;/p&gt;
&lt;p&gt;&lt;img alt="image material cycles" src="./images/image_material.png" /&gt;&lt;/p&gt;
&lt;p&gt;In edit mode, select the whole mesh (A) and UV unwrap (U) the mesh selecting the "Reset" option.&lt;/p&gt;
&lt;p&gt;&lt;img alt="uv unwrap" src="./images/uv_unwrap.png" /&gt;&lt;/p&gt;
&lt;p&gt;In a "UV/image Editor" view, all the faces in the tiling should have been mapped on top of each other to show one orange square. Link the "kite_tile.png" image to display it behind the faces. &lt;/p&gt;
&lt;p&gt;&lt;img alt="uv unwrap" src="./images/uv_image_map.png" /&gt;&lt;/p&gt;
&lt;p&gt;Scale the faces to show the tile.&lt;/p&gt;
&lt;p&gt;&lt;img alt="uv unwrap" src="./images/uv_image_map_02.png" /&gt;&lt;/p&gt;
&lt;p&gt;We now need to move the corners of the square in the UV editor to match the corners of the kite shape in our image.  Use the B key to box select each corner in turn and move it to a corner of the kite shape.&lt;/p&gt;
&lt;p&gt;&lt;img alt="uv unwrap" src="./images/uv_image_map3.png" /&gt;&lt;/p&gt;
&lt;p&gt;In the 3D View set the display mode to "Texture" to check we have moved the right vertex of our square the right vertex of the kite. If correct the red and green arrows in the kite image should be nicely tiled across the plane.&lt;/p&gt;
&lt;p&gt;&lt;img alt="uv unwrap" src="./images/tiled_arrows.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now we can use any image we like to tile the Poincaré plane by simply exchanging it for "kite_tile.png" or we can draw on the image directly in Blender. &lt;/p&gt;
&lt;p&gt;To do this swap to the "Paint" editing context in the "UV/image Editor", use the T key to pull up the paint tool-bar and start drawing.&lt;/p&gt;
&lt;p&gt;&lt;img alt="uv paint" src="./images/uv_paint.png" /&gt;&lt;/p&gt;
&lt;p&gt;The "3D View" will update in real time with the painting strokes in the "UV/image Editor". The range of paint tools isn't as wide as in GIMP but there are plenty of options to play with. Make sure to either save the image before exiting ("Image" menu -&amp;gt; "UV/image Editor") or pack it into the Blender file (("Image" menu -&amp;gt; "Pack as ...") as otherwise changes to the image will be lost when you exit Blender. &lt;/p&gt;
&lt;p&gt;The tilings produced this way are only approximately hyperbolic as Blender dosen't use a hyperbolic mapping to squash the pattern on to the tiles as they get smaller and smaller. There is other software that does this properly (&lt;a href="http://www.malinc.se/m/ImageTiling.php"&gt;online images here&lt;/a&gt; or python software &lt;a href="https://github.com/b5strbal/Escher"&gt;here&lt;/a&gt; but I was amused to find a way to do this approximation completely in Blender.&lt;/p&gt;
&lt;p&gt;Of course this texturing technique can be used equally as well on the unfurled 3D versions of the tilings&lt;/p&gt;
&lt;p&gt;&lt;img alt="unfurled and textured" src="./images/uv_map_64_06_unfurl_013.png" /&gt;&lt;/p&gt;
&lt;p&gt;Other Hyperbolic software to look at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://timhutton.github.io/hyperplay/"&gt;HyperPlay&lt;/a&gt; Online Javascript, also avaliable for download on github.  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.plunk.org/~hatch/HyperbolicApplet/"&gt;Hyperbolic Tessellations Applet&lt;/a&gt; Online Java Applet  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.geometrygames.org/KaleidoTile/index.html"&gt;KaleidoTile&lt;/a&gt; Win, Mac, The older GL1 version works on Linux under Wine.  C source code available with GPL license.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Hyperbolic Tiling in 3D</title><link href="http://www.elfnor.com/hyperbolic-tiling-in-3d.html" rel="alternate"></link><updated>2015-11-06T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-11-06:hyperbolic-tiling-in-3d.html</id><summary type="html">&lt;p&gt;&lt;img alt="plane, sphere and hyperbolic footbal" src="./images/hexagon_sphere_plane_hyp_032.png" /&gt;&lt;/p&gt;
&lt;p&gt;In a previous &lt;a href="http://www.elfnor.com/blender-adventures-with-hyperbolic-planes.html"&gt;post&lt;/a&gt; I explained the shape of planes, spheres, and hyperbolic planes in terms of hexagons arranged around either another hexagon (plane), a pentagon (sphere) or a heptagon (hyperbolic plane). I used a photo of a hyperbolic plane someone else had made out of paper, as the 3D model produced by my scripted Sverchok node was not meshed in a nice regular tiling. I thought I'd fix this.&lt;/p&gt;
&lt;p&gt;The first step was to write a Sverchok node to make a Blender mesh of the regular tilings of the &lt;a href="https://en.wikipedia.org/wiki/Poincar%C3%A9_disk_model"&gt;Poincaré disk&lt;/a&gt;. The Poincaré disk is a model of 2D hyperbolic geometry where the points on an infinite hyperbolic plane are mapped inside a planar disk of unit radius. &lt;/p&gt;
&lt;p&gt;In a plane or a sphere there are only a small number of regular polygons that can be used to tile the surface. For a plane its limited to triangles, squares and hexagons. These tilings can be described with two numbers, p the number of sides to the polygons used and q the number of polygons that meet at each vertex.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Uniform_tilings_in_hyperbolic_plane"&gt;&lt;img alt="regular tilings from wikipedia" src="./images/regular_tilings_wikipedia.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For a sphere the regular tilings are limited to the same combinations as the five platonic solids (tetrahedron {3, 3}, cube {4, 3} octahedron {3, 4}, dodecahedron {5, 3} and the icosahedron {3, 5})&lt;/p&gt;
&lt;p&gt;Tilings with any other integer values of p and q (greater than 3) can be made only on a hyperbolic plane. &lt;/p&gt;
&lt;p&gt;In the Poincaré disc model a straight line is a circular arc meeting the edge of the unit disk at right angles. The construction method for a tiling consists of placing a regular polygon at the center of the disc and then reflecting the polygon in each side of the polygon. These polygons are then reflected in their free sides and the process repeated until the disc is tiled to the desired resolution. Reflection in a line in the Poincaré disc is equivalent to something called "circle inversion". This is well explained &lt;a href="http://moniker.name/worldmaking/?p=385"&gt;here&lt;/a&gt; and hopefully shown in the next diagram.&lt;/p&gt;
&lt;p&gt;&lt;img alt="circle inversion" src="./images/circle_inversion.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here &lt;span class="math"&gt;\(O\)&lt;/span&gt; is the center of the circular arc through &lt;span class="math"&gt;\(\overline{AB}\)&lt;/span&gt; which meets the unit circle at right angles. In the Poincaré disc model this is a straight line through &lt;span class="math"&gt;\(\overline{AB}\)&lt;/span&gt;. The polygon &lt;span class="math"&gt;\(ABC'D'E'F'G'\)&lt;/span&gt; is the circle inversion of polygon &lt;span class="math"&gt;\(ABCDEFG\)&lt;/span&gt; in the circle centered at &lt;span class="math"&gt;\(O\)&lt;/span&gt;. In the Poincaré disc model this is equivalent to a reflection in the line &lt;span class="math"&gt;\(\overline{AB}\)&lt;/span&gt;. Point &lt;span class="math"&gt;\(C'\)&lt;/span&gt; the inversion of point &lt;span class="math"&gt;\(C\)&lt;/span&gt; lies on the line &lt;span class="math"&gt;\(\overline{OC}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The radius &lt;span class="math"&gt;\(r\)&lt;/span&gt; of the circle centered at &lt;span class="math"&gt;\(O\)&lt;/span&gt; is the length of the line &lt;span class="math"&gt;\(\overline{OA}\)&lt;/span&gt; &lt;/p&gt;
&lt;div class="math"&gt;$$
r = \left |  \overline{OA} \right | 
$$&lt;/div&gt;
&lt;p&gt;The position of &lt;span class="math"&gt;\(C'\)&lt;/span&gt; on the line &lt;span class="math"&gt;\(\overline{OC}\)&lt;/span&gt; can then be found from:&lt;/p&gt;
&lt;div class="math"&gt;$$
r^2 = \left |  \overline{OC} \right | * \left |  \overline{OC'} \right | 
$$&lt;/div&gt;
&lt;p&gt;This Sverchok scripted node &lt;a href="https://github.com/elfnor/hyperbolic_coral"&gt;hyperbolic_tiling.py&lt;/a&gt; implements the regular tilings of the Poincaré disk. (See &lt;a href="http://www.elfnor.com/blender-adventures-with-hyperbolic-planes.html"&gt;earlier post&lt;/a&gt; on how to use a Sverchok scripted node in Blender). The hardest part of coding this is keeping track of the vertices and edges that are already in place to avoid making duplicates.&lt;/p&gt;
&lt;p&gt;&lt;img alt="poincare tiling in sverchok" src="./images/poincare_7-3.png" /&gt;&lt;/p&gt;
&lt;p&gt;I now want to turn this flat mesh into a 3D mesh where each polygon has equal length sides. This can be done with a mass spring network where each edge of the mesh is modeled as a spring with a fixed rest length. The closest I can get to this in Blender is to use the "Soft Body" physics with the "Soft Body Self Collision" enabled.&lt;/p&gt;
&lt;p&gt;In "Soft Body Self Collision" each vertex is surrounded by an elastic virtual ball. The physics engine stops vertices going inside the balls of other vertices during the simulation. This can be used to unfurl the Poincaré disk tiling into a 3D surface.&lt;/p&gt;
&lt;p&gt;The final shape of the surface depends quite strongly on initial conditions. If we run the physics animation on a flat surface little happens. The second set of outputs on the Hyperbolic Tiling node output a version of the tiling that is bowl shaped rather than a plane. Also each face has been "poked" to only give triangular faces. &lt;/p&gt;
&lt;p&gt;&lt;img alt="poincare tiling in sverchok" src="./images/poincare_7-3_poked_cupped.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="soft body parameters" class="floatright" src="./images/soft_body_parameters.png" /&gt;
&lt;img alt="tiling unfurled" src="./images/tiling_unfurled.png" /&gt;&lt;/p&gt;
&lt;p&gt;Bake the result of this second set of outputs to give a mesh. Add a "Soft Body" modifier to the mesh. The parameters I've found that produce the best results are shown in the screen capture on the right.&lt;/p&gt;
&lt;p&gt;The parameters that differ from their default values are highlighted in red. Make sure "Soft Body Goal" is OFF and "Soft Body Self Collision" is ON. Experiment with some of the others to improve the speed or evenness of the final edge lengths. I've found that my edge lengths never come out all equal. If anyone can come up with settings for "Soft Body" that give a result with a  better ratio of minimum edge length/maximum edge length I'd love to see them in comments.&lt;/p&gt;
&lt;p&gt;On my computer (i7, 2.8 Ghz, 4 GB RAM) the soft body solver is unstable when working on more than 250 to 300 faces. It either works very slowly and/or the mesh floats off the screen away from the origin.&lt;/p&gt;
&lt;p&gt;A rotationally symmetric input mesh produces a symmetric output mesh (mostly). If you distort the input mesh a little the output mesh may be much less symmetric. For example, the p = 7, q = 3 tiling seems to have two final shapes depending on initial conditions. If you start with the symmetric output of the node it settles down to  a surface that has has 7 wrinkles around the outside edge. If you  add any distortion ("Randomize" in edit mode) before applying the soft body modifier the final shape is often much less symmetrical with ~3 major wrinkles around the outside.&lt;/p&gt;
&lt;p&gt;To produce the hyperbolic football tiling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the Sverchok node to create a p = 7, q = 3, layers = 3 tiling mesh&lt;/li&gt;
&lt;li&gt;Add a soft body modifier with the settings described above&lt;/li&gt;
&lt;li&gt;Run the animation until the surface has unfurled.&lt;/li&gt;
&lt;li&gt;Apply the soft body modifier&lt;/li&gt;
&lt;li&gt;Add a "Subdivision Surface" modifier with 1 subdivision and apply it.&lt;/li&gt;
&lt;li&gt;Apply a white material to the whole mesh&lt;/li&gt;
&lt;li&gt;Select the central vertex and "Select Similar" vertices with a similar "Amount of connecting edges".&lt;/li&gt;
&lt;li&gt;Expand the selection (Ctrl+) to select all the heptagons.&lt;/li&gt;
&lt;li&gt;Apply a black material to the heptagons&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript'; 
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Shaders for Sverchok 04 - Vertex Colors Update</title><link href="http://www.elfnor.com/shaders-for-sverchok-04-vertex-colors-update.html" rel="alternate"></link><updated>2015-10-02T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-10-02:shaders-for-sverchok-04-vertex-colors-update.html</id><summary type="html">&lt;p&gt;&lt;img alt="fibonnaci fruit" src="./images/dragon_fruit_vertex_color_05_009.png" /&gt;&lt;/p&gt;
&lt;p&gt;When I wrote my &lt;a href="http://www.elfnor.com/shaders-for-sverchok-02-vertex-colors.html"&gt;Shaders for Sverchok 02 - Vertex Colors&lt;/a&gt; post, I used a small piece of python code to assign the vertex colors. Sverchok now has a "Vertex Colors" node and I'll now show how to use that instead.&lt;/p&gt;
&lt;p&gt;The "Vertex Color" node takes a list of colors as input. This list can either be assigned to the vertices "v" or to the faces "p" of the object selected in the drop down. Each color should be a vector of three numbers between 0 and 1. If the list is shorter that the number of vertices (or polygons) Sverchok will do its normal thing and very usefully repeat the list until it is long enough. &lt;/p&gt;
&lt;p&gt;The second drop down on the node is used to select the vertex color layer of the object.&lt;/p&gt;
&lt;p&gt;The example below makes up a list of 6 random colors and applies them to the faces of the stack of cubes. The default list repeat thing means the colors are repeated up the stack and the colors are repeated on the same faces. Make sure to use a different "Seed" for each of three random number generators. If they all have the same "Seed" they will produce the same set of numbers for each color channel and the colors will all be shades of grey.&lt;/p&gt;
&lt;p&gt;Make sure you select the object and switch the view to "Vertex Paint" mode to see the vertex colors. To change the vertex colors into material colors that appear in  a render you need to use a &lt;strong&gt;Material&lt;/strong&gt; node tree as in &lt;a href="http://www.elfnor.com/shaders-for-sverchok-02-vertex-colors.html"&gt;this post&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="nodes for vertex color example 1" src="./images/vertex_color_cube_example_01.png" /&gt;&lt;/p&gt;
&lt;p&gt;If instead we want to apply a separate color to each cube in the stack we need to reorder our list of colors. I'm still working on understanding all the list manipulation nodes in Sverchok but I wrangled my list of 5 colors (one color per cube) using the "List Match" node. It takes a list of integers the same length as the number of vertices per cube and combines it (using the 'X-Ref" option) with a list of 5 colors. Use the "Viewer Text" node to work out how the various options work&lt;/p&gt;
&lt;p&gt;&lt;img alt="nodes for vertex color example 2" src="./images/vertex_color_cube_example_02.png" /&gt;&lt;/p&gt;
&lt;p&gt;The version of the "Vertex Color" node I'm using is available &lt;a href="/downloads/colors.py"&gt;here&lt;/a&gt;. I'll do  a pull request for it to be included in the master branch of Sverchok. With this node as well as being able to set the vertex color layer of an object I've added the ability to read the colors. This is similar to the way the "Vertex Weights" node already works. &lt;/p&gt;
&lt;p&gt;With this version of the node you can paint the vertex colors onto one object and then transfer them to copies of the object. In the example below the small "fruit segment" object was painted with red and green vertex colors. The mesh of the object is copied to the polygon centers of the bloom sphere to produce the "Alpha" object. The two "Vertex Colors"  nodes are then used to copy the vertex colors from the "fruit segment" object to the "Alpha" object.&lt;/p&gt;
&lt;p&gt;&lt;img alt="dragon fruit nodes" src="./images/dragon_fruit_nodes.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Blender Linked Stars</title><link href="http://www.elfnor.com/blender-linked-stars.html" rel="alternate"></link><updated>2015-09-27T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-09-27:blender-linked-stars.html</id><summary type="html">&lt;p&gt;&lt;img alt="linked stars" src="./images/star_spiral_11_005.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've been fascinated by the structure of Bathsheba Grossman's &lt;a href=""&gt;Quin Pendant Lamp&lt;/a&gt; since I first saw it. There are many tutorials around the web for making a similar structure in different 3D software packages. The method they all use seems to be based on a &lt;a href="https://www.youtube.com/watch?v=8SUjZITJIOw"&gt;TopMod tutorial&lt;/a&gt;. &lt;a href="http://www.viz.tamu.edu/faculty/ergun/research/topology/download.html"&gt;TopMod&lt;/a&gt; (last updated about 2008?) works very differently from most other 3D modelling software with tools for making handles and bridges between polygons. Blender now has some similar tools for example Bridge Edge Loops Tools.&lt;/p&gt;
&lt;p&gt;My method is different and works with the surface of a regular solid. The bridges between triangles and penatagons are created as a single layer. After these bridges are twisted up into the correct structure a Solidify modifier is used to make everything 3D.&lt;/p&gt;
&lt;p&gt;Here is a screencast of the process.&lt;/p&gt;
&lt;iframe width="660" height="420" src="http://www.youtube.com/embed/1isI49e2_Hk?autoplay=0"&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;a href="/downloads/LSV_02.mp4"&gt;Download Link&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category></entry><entry><title>Bloom Spheres in Sverchok</title><link href="http://www.elfnor.com/bloom-spheres-in-sverchok.html" rel="alternate"></link><updated>2015-09-09T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-09-09:bloom-spheres-in-sverchok.html</id><summary type="html">&lt;p&gt;&lt;img alt="bloom wobble still" src="./images/bloom_wobble.png" /&gt;&lt;/p&gt;
&lt;p&gt;These &lt;a href="http://www.instructables.com/id/Blooming-Zoetrope-Sculptures/"&gt;videos by John Edmark&lt;/a&gt; of what he calls bloom spheres inspired me to try something similar in Sverchok. Edmark has designed and 3D printed forms that when spun under a strobe light appear to move and twist.&lt;/p&gt;
&lt;p&gt;Its possible to produce computer animations that work in the same way. &lt;a href="https://www.youtube.com/channel/UClifVGXznefMacC29olhX7g"&gt;Mangakid&lt;/a&gt; has already made some animations in Blender based on Edmark's work. Python code snippets for mangakid's animations can be found on this &lt;a href="http://blender.stackexchange.com/questions/1371/organic-yet-accurate-modeling-with-the-golden-spiral/26800#26800"&gt;stackoverflow question and answer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first stage to work on bloom spheres in Sverchok was to write a scripted node to produce the basic mesh structure that underlies the blooms. Edmark describes this as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;First a set of points are placed, one-at-a-time, in a cylindrical arrangement. Each point is placed 137.5º  around the cylinder's axis from the previous point and also raised a bit...&lt;/p&gt;
&lt;p&gt;The next step is to project each point onto the sphere's surface by projecting the point toward the center point of the sphere...&lt;/p&gt;
&lt;p&gt;The points are connected with lines to form a quadrilateral mesh.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is best worked out in spherical coordinates.&lt;/p&gt;
&lt;p&gt;The golden angle &lt;span class="math"&gt;\(g\)&lt;/span&gt; is given by
&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
g=\pi (3-\sqrt{5}) &amp;amp;= 2.399963... \textrm{ radians}\\ 
 &amp;amp;= 137.507...^{\circ}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;The radius of the sphere is &lt;span class="math"&gt;\(r_0\)&lt;/span&gt; and &lt;span class="math"&gt;\(z_h\)&lt;/span&gt; is the increment by which the "point is raised a bit". Then for &lt;span class="math"&gt;\(i = 0, 1 ... n\)&lt;/span&gt; the points on the bloom sphere are given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
\theta (i) &amp;amp;= \frac{i}{g}\\
\phi (i) &amp;amp;= \tan^{-1} \frac{r_0}{iz_h}\\
r(i) &amp;amp;= r_0
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;I've coded this up into a scripted node. To use the bloom sphere node in Blender first install the &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; addon. Download the bloom sphere code from &lt;a href="https://github.com/elfnor/bloom_sphere"&gt;github&lt;/a&gt;. Then load the python file as a text blocks into a blend file. Add a &lt;code&gt;Scripted Node&lt;/code&gt; to a Sverchok node tree. On the node select the &lt;code&gt;bloom_sphere.py&lt;/code&gt; code from the lower drop down. Then click the plugin icon to the right of this field. The node should turn blue with some inputs and outputs. Wire the &lt;code&gt;Verts&lt;/code&gt; and &lt;code&gt;Faces&lt;/code&gt; outputs to a &lt;code&gt;Viewer Draw&lt;/code&gt; node and you should see some geometry.&lt;/p&gt;
&lt;p&gt;It is also possible to use the &lt;code&gt;XYZ function surface&lt;/code&gt; that is part of the &lt;code&gt;Extra Objects&lt;/code&gt; addon for Blender to generate the mesh vertices. I found it much harder to get the addon to join then up to form the correct quadrilateral mesh. It was much easier to do this in my Sverchok scripted node.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Frame Info&lt;/code&gt; node can be easily used to rotate the bloom sphere 137.5&amp;deg; every frame. Set the end frame to 145 for a continuous loop animation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="node diagram scripted node" src="./images/bloom_sphere_nodes.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="animation" src="./images/bloom_sphere.gif" /&gt;&lt;/p&gt;
&lt;p&gt;The same node diagram can also be used to animate any of John Edmark's stl files that he has made available &lt;a href="https://www.dropbox.com/sh/nsinei7jlu0z3wk/AADsN9wI7IOIF6VOnREx-Tt6a?dl=0"&gt;here&lt;/a&gt; under a Creative Commons BY NC SA license. Just import the stl into Blender and replace the &lt;code&gt;Scripted Node&lt;/code&gt; with a &lt;code&gt;Object Scene&lt;/code&gt; node.&lt;/p&gt;
&lt;p&gt;Alternatively to spin a mesh outside Sverchok, make a key frame animation where the first frame has no rotation and the End frame has 137.5&amp;deg; * (number of frames - 1) rotation about the z-axis. &lt;/p&gt;
&lt;p&gt;For example: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the object to be rotated&lt;/li&gt;
&lt;li&gt;Set the End Frame to 145&lt;/li&gt;
&lt;li&gt;Change the Active Keying Set to "Rotation"&lt;/li&gt;
&lt;li&gt;Insert a Key Frame on the first frame&lt;/li&gt;
&lt;li&gt;Move to the last frame&lt;/li&gt;
&lt;li&gt;Set the rotation of the object around the z-axis to 19800 degrees (144 * 137.5&amp;deg; = 19800)&lt;/li&gt;
&lt;li&gt;Insert a Key Frame on this frame&lt;/li&gt;
&lt;li&gt;Set the Current Frame back to 1&lt;/li&gt;
&lt;li&gt;Open up a Graph Editor view&lt;/li&gt;
&lt;li&gt;Change the Interpolation Mode for the animation curve to linear. Using the menu: Key &amp;gt; Interpolation Mode &amp;gt; Linear or using the keyboard &lt;code&gt;T L&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Check that stepping along one frame changes the Rotation Z angle by 137.5&amp;deg;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will give a seamless 6 second (145 frames/ 24 frames per second ~= 6 seconds) animation. It is seamless because 19800 is a whole multiple of 360 (360&amp;deg; * 55 = 19800&amp;deg;).&lt;/p&gt;
&lt;p&gt;Note: Any rotation angle where&lt;/p&gt;
&lt;div class="math"&gt;$$
g_{n,m} = ng - m2\pi
$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(n= 1,2,..\)&lt;/span&gt; anf &lt;span class="math"&gt;\(m\)&lt;/span&gt; is an integer chosen to map the angle back to the interval &lt;span class="math"&gt;\(-\pi\)&lt;/span&gt; to &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; will also work.  For example rotating any of 137.5&amp;deg;, -85&amp;deg;, 52.5&amp;deg;, 170&amp;deg;, -32.5&amp;deg;, 105&amp;deg;, -117.5&amp;deg;, or 20&amp;deg; per frame will work but for each angle the animation will appear to have a different speed. &lt;/p&gt;
&lt;p&gt;Now comes the fun part, editing the mesh to produce interesting animations. John Edmark describes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each of the quadrilaterals is populated with an appendage ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We could do this following  my &lt;a href="http://www.elfnor.com/simple-sverchok-01-centers-polygons.html"&gt;&lt;code&gt;Centers Polygon&lt;/code&gt; example&lt;/a&gt; but I'll use the &lt;code&gt;Adaptive Polygons&lt;/code&gt; node to show another way for a different look.&lt;/p&gt;
&lt;p&gt;&lt;img alt="node diagram adaptive polygons" src="./images/bloom_sphere_adaptive_polygon_nodes.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've removed the nodes used to achieve the rotation to simplify the above node diagram.&lt;/p&gt;
&lt;p&gt;&lt;img alt="animation adaptive polygons" src="./images/bloom_sphere_ap.gif" /&gt;&lt;/p&gt;
&lt;p&gt;John Edmark then goes on to describe:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to make the appendages appear to move back and forth when animated, their tips are sequentially distorted side-to-side (in a sinusoidal motion) as they are placed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The simplest way of doing something similar to this is to move each vertex side to side before the &lt;code&gt;Adaptive Polygons&lt;/code&gt; node. Adding "Side to side" motion is most easily thought of in spherical coordinates. If we vary the "phi" polar coordinate of a point it will move side to side.&lt;/p&gt;
&lt;p&gt;Sverchok now has nodes to change the x, y, z coordinates of a vertex into polar coordinates and change them back again.  Here we apply a sinusoidal offset to each vertex. The frequency of the sinusoid is varied by changing the &lt;code&gt;stop&lt;/code&gt; value of the &lt;code&gt;Float Series&lt;/code&gt; node. A multiple (or fraction) of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; is sensible. A &lt;code&gt;Float&lt;/code&gt; entry node is used to change the amplitude of the sinusoid. &lt;/p&gt;
&lt;p&gt;&lt;img alt="node bloom sphere vertex wobble" src="./images/wobble_vertex_node_tree.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="animation" src="./images/wobble_vertex.gif" /&gt;&lt;/p&gt;
&lt;p&gt;With a bit more thought (and a few more nodes!) we can actually wobble just the ends of our &lt;s&gt;appendages&lt;/s&gt;  adaptive polygons. &lt;/p&gt;
&lt;p&gt;First we need to separate out the end vertices with a &lt;code&gt;List Mask (out)&lt;/code&gt; node. For the mask we use the length of each vertex (with a &lt;code&gt;Vector Math&lt;/code&gt; node) to select those vertices not on the surface of the bloom sphere. It takes a little messing around with &lt;code&gt;List Length&lt;/code&gt; nodes to get the range of numbers to use as the angle input for the sinusoid. This multi-level list needs to have the same angle value for all the points at the end of single spike and then increment for the next spike.&lt;/p&gt;
&lt;p&gt;The two sets of vertices (the end vertices with the sinusoidal wobble and the original vertices on the sphere) are put back together with a &lt;code&gt;List Mask Join (in)&lt;/code&gt; node using the same mask we used for separating them. &lt;/p&gt;
&lt;p&gt;&lt;a href="./images/sc_bloom_sphere_node_11_nodetree_for_post.blend_large_02.png"&gt;&lt;img alt="node appendage end wobble" src="./images/sc_bloom_sphere_node_11_nodetree_for_post.blend_small.png" title="Click for larger version" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;to get an animation like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="bloom wobble gif" src="./images/wobble_color.gif" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript'; 
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Micropython - OLED module with the ssd1306 chip</title><link href="http://www.elfnor.com/micropython-oled-module-with-the-ssd1306-chip.html" rel="alternate"></link><updated>2015-07-10T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-07-10:micropython-oled-module-with-the-ssd1306-chip.html</id><summary type="html">&lt;p&gt;&lt;img alt="oled module" src="./images/wiring_02.png" /&gt;&lt;/p&gt;
&lt;p&gt;Small OLED modules are &lt;a href="http://www.dx.com/p/waveshare-0-96-oled-b-ssd1306-display-screen-module-deep-blue-340467#.VZ9gRqGW4y8"&gt;available&lt;/a&gt; with a resolution 128 x 64 pixels on a 22 x 11 mm display for under seven dollars. They are great for displaying graphics that can't be shown on a standard alphanumeric LCD. &lt;a href="https://en.wikipedia.org/wiki/OLED"&gt;OLED &lt;/a&gt; screens work without a back light and produce bright high contrast displays with a wide viewing angle (&amp;gt;160°) and low power consumption (~20 mA). The monochrome versions are available with a white or blue display on a black background, or as a version where the top quarter is yellow and the the rest blue.  The frame rates are very good and the display can be updated by the pyboard as fast as 333 frames/second.&lt;/p&gt;
&lt;p&gt;The driver chip included on these modules is a ssd1306 chip that can be set up to work with either a SPI or an I2C bus. Some modules come with only one bus wired up, other use a soldered jumper or resistor to select between the two bus types. I'm using a 128 x 64 pixel display using an SPI interface.&lt;/p&gt;
&lt;p&gt;There are some ssd1306 libraries available for micropython but I'm going to start with a basic example using only the micropython SPI class. I find writing a very simple example like this is a good way to understand the hardware and how to get the micro controller to work with it. Once I've got the simple example going I know my hardware and wiring are correct and I'm happy to use someone else's library to write more complicated stuff.&lt;/p&gt;
&lt;p&gt;The wiring for the OLED and pyboard are shown in the top diagram. The pyboard has two SPI ports, pins X5 to X8 on one side of the board and Y5 to Y8 on the other. The ssd1306 library defaults to the Y pins, but this can be changed in the module. The &lt;a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus"&gt;SPI bus&lt;/a&gt; works faster than the I2C bus and has a separate line for master to slave (MOSI) communication than for slave to master (MISO). The ssd1306 on the OLED display (slave)  doesn't send any data back to the pyboard (master) so we don't need to connect this pin. The slave select (SS) or chip select (CS) line is not used by the micropython SPI class and can also be ignored. &lt;/p&gt;
&lt;h2&gt;Basic Example code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Simple test of a 128 x 64 pixel OLED display with an ssd1306 driver chip on a SPI bus&lt;/span&gt;

&lt;span class="sd"&gt;|OLED |PYB |&lt;/span&gt;
&lt;span class="sd"&gt;|VCC  |3V3 |&lt;/span&gt;
&lt;span class="sd"&gt;|GND  |GND|&lt;/span&gt;
&lt;span class="sd"&gt;|NC   |-- |&lt;/span&gt;
&lt;span class="sd"&gt;|DIN  |Y8 MOSI |&lt;/span&gt;
&lt;span class="sd"&gt;|CLK  |Y6 SCK |&lt;/span&gt;
&lt;span class="sd"&gt;|CS   | --|&lt;/span&gt;
&lt;span class="sd"&gt;|D/C  |Y4 |&lt;/span&gt;
&lt;span class="sd"&gt;|RES  |Y3 |&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyb&lt;/span&gt;

&lt;span class="c"&gt;# from adafruit arduino&lt;/span&gt;
&lt;span class="n"&gt;init_cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0xAE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xD5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xA8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x3F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xD3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x8D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xA1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xC8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="mh"&gt;0xDA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x81&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xCF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xd9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xF1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xDB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xA4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xA6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xAF&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;display_cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;## set up SPI bus              &lt;/span&gt;
&lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000000&lt;/span&gt;

&lt;span class="n"&gt;spi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SPI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MASTER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baudrate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;polarity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dc&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT_PP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PULL_DOWN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT_PP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PULL_DOWN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    write single command byte to ssd1306&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;spi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

&lt;span class="c"&gt;## power on&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;## init display&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;init_cmds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;write_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;## clear display&lt;/span&gt;
&lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;display_cmds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;write_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;spi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;## line grid&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;  &lt;span class="c"&gt;# 8 horizontal lines&lt;/span&gt;

&lt;span class="c"&gt;# set every  16th byte to 255&lt;/span&gt;
&lt;span class="c"&gt;# should give 8 vertical lines&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

&lt;span class="c"&gt;#color in the 1st block to see where it is&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

&lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;display_cmds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;write_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;spi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are two list of command bytes. The first list &lt;code&gt;init_cmds&lt;/code&gt; sets up the screen and turns it on. The second set &lt;code&gt;display_cmds&lt;/code&gt; is used before sending an array of bytes to fill the screen display. The baud rate or clock frequency for the SPI bus does not seem to matter. I can get it to work from  at least 8 kHz to 16 MHz. Also the polarity and phase settings don't seem to matter here. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;dc&lt;/code&gt; pin is used to let the ssd1306 know whether the bytes coming down the &lt;code&gt;DIN&lt;/code&gt; line are commands (&lt;code&gt;dc&lt;/code&gt; high ) or data for the screen (&lt;code&gt;dc&lt;/code&gt; low). The &lt;code&gt;rs&lt;/code&gt; pin is used to reset the display when it is pulled low for 10 ms.&lt;/p&gt;
&lt;p&gt;The display is 128 x 64 pixels = 8192 bits where for each bit a 1 represents a pixel on and 0 a pixel off. The buffer for the display is written to using a byte array of 1024 bytes (8192/8). Each byte represents 8 pixels arranged in a vertical block. The bytes/blocks are ordered in rows of 128 across the display. The position of the first byte can be changed with the 13th byte of &lt;code&gt;init_cmds&lt;/code&gt;. Setting it to &lt;code&gt;0xA1&lt;/code&gt; puts the 1st byte in the top left corner, &lt;code&gt;0xB0&lt;/code&gt; puts the 1st byte in the top right.&lt;/p&gt;
&lt;p&gt;The example code draws a grid of 8 horizontal and 8 vertical lines on the screen and colors in the first block to check orientation.&lt;/p&gt;
&lt;h1&gt;ssd1306 library example&lt;/h1&gt;
&lt;p&gt;There are several versions and forks of a ssd1306 library for micropython on github. They all seem to be based on one originally written by &lt;a href="https://github.com/nvbn/micropython-drivers"&gt;Kenneth Henderick&lt;/a&gt;. I have used the version from the &lt;a href="https://github.com/jeffmer/micropython-upybbot"&gt;upybot project&lt;/a&gt; which adds a basic text display capability. The screen and pixel setting commands are written so that the origin is in the bottom left.&lt;/p&gt;
&lt;p&gt;I also found  a graphics library for drawing lines, triangles, rectangles and circles on this &lt;a href="http://forum.micropython.org/viewtopic.php?f=5&amp;amp;t=195&amp;amp;p=873&amp;amp;hilit=lcd_gfx#p873"&gt;forum post&lt;/a&gt; by polygontwist. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# hello world on SSD1306&lt;/span&gt;
&lt;span class="c"&gt;# uses version of SSD1306.py and font.py&lt;/span&gt;
&lt;span class="c"&gt;# https://github.com/jeffmer/micropython-upybbot/blob/master/ssd1306.py&lt;/span&gt;
&lt;span class="c"&gt;# graphics library lcd_gfx.py from &lt;/span&gt;
&lt;span class="c"&gt;# http://forum.micropython.org/viewtopic.php?f=5&amp;amp;t=195&amp;amp;p=873&amp;amp;hilit=lcd_gfx#p873&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyb&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ssd1306&lt;/span&gt;  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SSD1306&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lcd_gfx&lt;/span&gt;

&lt;span class="n"&gt;oled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SSD1306&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pinout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;X4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="s"&gt;&amp;#39;res&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;X3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
               &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;external_vcc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poweron&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="c"&gt;## text&lt;/span&gt;
&lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;## draw straight lines&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pixel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pixel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             

&lt;span class="c"&gt;## whole buffer        &lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

&lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;span class="c"&gt;## graphics example&lt;/span&gt;
&lt;span class="n"&gt;lcd_gfx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lcd_gfx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawFillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lcd_gfx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;lcd_gfx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;lcd_gfx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawFillTrie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lcd_gfx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawTrie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lcd_gfx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lcd_gfx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawFillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;oled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code displays some text, waits 2 seconds then adds some lines. It then displays the grid as in the first example and finishes off with examples of the shapes available in the &lt;code&gt;lcd_gfx.py&lt;/code&gt; library. Note that due to the way the method &lt;code&gt;pixel&lt;/code&gt; is implemented, the origin for all the graphics and text positions is the bottom left. However setting the raw buffer shows the screen origin is at the top right.&lt;/p&gt;
&lt;p&gt;After the text and graphics are set up using calls to &lt;code&gt;oled.text()&lt;/code&gt;, &lt;code&gt;oled.pixel()&lt;/code&gt;, or any of the &lt;code&gt;lcd_gfx&lt;/code&gt; functions, &lt;code&gt;oled.display&lt;/code&gt; is called to send the buffer to the display.&lt;/p&gt;
&lt;p&gt;The code for all these examples is available on my &lt;a href="https://github.com/elfnor/micropython-blog-examples"&gt;github repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The ssd1306 library can also be used with an OLED wired to use the I2C bus. &lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="python"></category><category term="micropython"></category></entry><entry><title>Reading the World - 10 Audio Online Stories</title><link href="http://www.elfnor.com/reading-the-world-10-audio-online-stories.html" rel="alternate"></link><updated>2015-07-04T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-07-04:reading-the-world-10-audio-online-stories.html</id><summary type="html">&lt;p&gt;&lt;img alt="online story map" src="./images/online_stories_map_10.png" /&gt;&lt;/p&gt;
&lt;p&gt;I really enjoyed putting together my list of &lt;a href="http://www.elfnor.com/reading-the-world-100-online-stories.html"&gt;100 online stories&lt;/a&gt; but collating, then reading 100 stories at once was hard work. I'll do some more virtual anthologies with stories in groups of ten or so. This list is audio versions of stories from the big list. I found eight of the stories as audio online. Some of the authors on the list have work in podcasts but different stories than those I choose for the big list. I used a couple of these to make the list up to ten. Four male and six female authors this time. &lt;/p&gt;
&lt;h2&gt;10 Countries - 10 Online Audio Stories&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Country&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Gender&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Canada&lt;/td&gt;
&lt;td&gt;Doctorow, Cory&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;Andas Game (&lt;a href="https://archive.org/details/Cory_Doctorow_Podcast_16"&gt;Part 1&lt;/a&gt;, &lt;a href="https://archive.org/details/Cory_Doctorow_Podcast_17"&gt;Part 2&lt;/a&gt;, &lt;a href="https://archive.org/details/Cory_Doctorow_Podcast_18"&gt;Part 3&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;Bad-ass girl gamer does good&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;China&lt;/td&gt;
&lt;td&gt;Xia, Jia&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://clarkesworldmagazine.com/audio_02_12a/"&gt;A Hundred Ghosts Parade Tonight &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Animatronic ghosts in a theme park&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;France&lt;/td&gt;
&lt;td&gt;Aliette de Bodard&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://clarkesworldmagazine.com/audio_01_15/"&gt;Three Cups of Grief, by Starlight*&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Inheritance and grief, family vs colleagues&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Grenada&lt;/td&gt;
&lt;td&gt;Tobias S. Buckell&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://clarkesworldmagazine.com/audio_05_10/"&gt;A Jar of Goodwill*&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Who is still human, whose side are you on&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Japan&lt;/td&gt;
&lt;td&gt;Yukimi Ogawa&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.strangehorizons.com/2013/20130311/xpodcast-f.shtml"&gt;Town's End&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hook up service for other people&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Latvia&lt;/td&gt;
&lt;td&gt;Tom Crosshill&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://clarkesworldmagazine.com/audio_04_12/"&gt;Fragmentation, or Ten Thousand Goodbyes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Virtual reality uploads&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Malaysia&lt;/td&gt;
&lt;td&gt;Zen Cho&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://podcastle.org/2013/06/25/podcastle-266-giant-episode-house-of-aunts/"&gt;The House of Aunts&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Aunts and vampires and high school romance in the jungle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Somalia&lt;/td&gt;
&lt;td&gt;Sofia Samatar&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://strangehorizons.com/2013/20130107/xpodcast-f.shtml"&gt;Selkie Stories Are for Losers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Daughter runs away to Colorado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sri Lanka&lt;/td&gt;
&lt;td&gt;Vajra Chandrasekera&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://clarkesworldmagazine.com/audio_07_13/"&gt;Pockets Full of Stones&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Talking to grandfather on a colony ship&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;United States of America&lt;/td&gt;
&lt;td&gt;Ursula K. Le Guin&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.lightspeedmagazine.com/fiction/elementals/"&gt;Elementals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Whimsical mythical creatures&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;</summary><category term="reading"></category></entry><entry><title>Micropython - Stepper motor control with a A4988 carrier board</title><link href="http://www.elfnor.com/micropython-stepper-motor-control-with-a-a4988-carrier-board.html" rel="alternate"></link><updated>2015-07-03T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-07-03:micropython-stepper-motor-control-with-a-a4988-carrier-board.html</id><summary type="html">&lt;p&gt;&lt;img alt="A4988 circuit" src="./images/A4988_circuit.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I have a &lt;a href="https://micropython.org/"&gt;pyboard&lt;/a&gt; (I get cool birthday presents) and like the look of the micropython language. Python is my first language choice for data analysis at work and I've used it writing add ons for &lt;a href="http://elfnor.com/Symmetry%20Tile%20plug-in%20for%20GIMP.html"&gt;GIMP&lt;/a&gt; and &lt;a href="http://elfnor.com/blender-pipe-generator.html"&gt;Blender&lt;/a&gt;. I can program the &lt;a href="http://www.elfnor.com/Arduino%20Bread%20Details.html"&gt;Arduino&lt;/a&gt; in Wiring/Processing but being able to program a micro-controller in python is a big plus. The way the REPL prompt/terminal allows interactive scripting, putting a program on the board is just copying, and the ease of printing statements back to the terminal are all easier to use than the equivalent for the Arduino.&lt;/p&gt;
&lt;p&gt;Arduino of course has a much bigger user base and a huge resource of code libraries and tutorials. Pick up a sensor or motor control board and you can easily find the code to copy and paste and get it going. The pyboard has some great examples on their &lt;a href="docs.micropython.org/en/latest/tutorial/index.html"&gt;website&lt;/a&gt; and I've found some good github projects, &lt;a href="https://github.com/dhylands/upy-examples"&gt;dhylands examples&lt;/a&gt; and &lt;a href="https://github.com/mithru/MicroPython-Examples"&gt;mithru examples&lt;/a&gt; but more beginner friendly  stuff is needed.&lt;/p&gt;
&lt;p&gt;I'm working towards making a ball balancing robot potentially mashing this &lt;a href="https://github.com/jeffmer/micropython-upybbot"&gt;electronics and code&lt;/a&gt; with this &lt;a href="http://xrobots.co.uk/BB8/"&gt;hardware&lt;/a&gt;. I'm tackling this in small steps starting with the motors and will blog progress as I go.&lt;/p&gt;
&lt;p&gt;This post covers three ways to drive bipolar stepper motors through the A4988 chip. This chip is available on carrier boards such as the stepstick and polulu. These are used a lot in home built 3D printers and a set of four can be bought for under $12 on &lt;a href="http://www.dx.com/"&gt;http://www.dx.com/&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Connections&lt;/h2&gt;
&lt;p&gt;Connect the board to the stepper motor and pyboard as shown. The jumper between the &lt;code&gt;RESET&lt;/code&gt; and &lt;code&gt;SLEEP&lt;/code&gt; pins is important. So is the capacitor on the motor power supply. Put this close to the carrier board. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ENABLE&lt;/code&gt; pin can be left unconnected. If the pin is unconnected or held low the motor will be braked when power is applied to the motor. If the enable pin is held high the motor is disabled or not braked. Keeping the motor braked draws power so setting the enable pin can be used to save power and reduce the heat of the board and motor.&lt;/p&gt;
&lt;p&gt;The carrier board takes one step for each pulse sent on the &lt;code&gt;STEP&lt;/code&gt; pin. The pin needs to be set high for at least 2 µs. The &lt;code&gt;DIR&lt;/code&gt; pin determines motor direction. &lt;code&gt;HIGH&lt;/code&gt; goes one way, &lt;code&gt;LOW&lt;/code&gt; the other. The board can also be used to do microstepping but I won't cover that here. &lt;/p&gt;
&lt;p&gt;The  potentiometer on the carrier board can be used to control the current through the motor. Clockwise increases the current and heat anti-clokwise does the opposite. See the &lt;a href="http://reprap.org/wiki/Pololu_stepper_driver_board"&gt;reprap wiki&lt;/a&gt; for details on adjusting this correctly. &lt;/p&gt;
&lt;h3&gt;Simple operation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Stepper motor control example using a A4988 carrier board &lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyb&lt;/span&gt;

&lt;span class="n"&gt;dir_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT_PP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;step_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT_PP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;enable_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT_PP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;enable_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c"&gt;# high is stop&lt;/span&gt;
&lt;span class="n"&gt;dir_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c"&gt;# high is CCW looking down on shaft&lt;/span&gt;

&lt;span class="n"&gt;enable_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;step_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;udelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;step_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;udelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dir_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;step_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;udelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;step_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;udelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;enable_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;#Brake motor draws full current&lt;/span&gt;
&lt;span class="n"&gt;enable_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;enable_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code is about as simple as it gets. The motor should take 1000 steps one way then a 1000 steps the other way at approximately 1000 steps/second. The speed is set by the length of the delay in `pyb.delay(1000). A larger delay means a slower speed. The enable pin is left low at the end so one can see the effect on braking the motor and the current draw from the motor power supply.&lt;/p&gt;
&lt;p&gt;This code could be re-factored into a function with parameters for number of steps, direction and speed but its use is limited to moving a single motor at a time. The code cannot easily do anything like check for end stops while the motor is running.&lt;/p&gt;
&lt;h3&gt;Timer operation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Stepper motor control example using a A4988 carrier board &lt;/span&gt;
&lt;span class="sd"&gt;and a Timer&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;disco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    cycles LEDs on pyboard for ms milliseconds&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;leds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;leds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;millis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;millis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
          &lt;span class="n"&gt;leds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;leds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;motor_cb1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;step_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;udelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;step_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;dir_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT_PP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;step_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT_PP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;enable_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT_PP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;enable_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c"&gt;# high is stop&lt;/span&gt;
&lt;span class="n"&gt;dir_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c"&gt;# high is CCW looking down on shaft&lt;/span&gt;

&lt;span class="n"&gt;tim1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;tim1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;motor_cb1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tim1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;enable_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;dir_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;disco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dir_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;disco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;enable_pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;tim1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deinit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next level of sophistication is to use a timer that is called periodically to make each step. This allows multiple motors to be run at the same time and other code to be run in the time between steps.&lt;/p&gt;
&lt;p&gt;The above code uses a timer &lt;code&gt;tim1&lt;/code&gt; and a callback function &lt;code&gt;motor_cb1&lt;/code&gt;. The callback function makes a single step. The speed of the motor is set by the frequency of the timer in &lt;code&gt;tim1.init(freq = 1000)&lt;/code&gt;. A larger frequency will give a faster speed.&lt;/p&gt;
&lt;p&gt;To prove the program can do other things while turning the motor I'm calling the function &lt;code&gt;disco&lt;/code&gt; which cycles through the leds on the board.&lt;/p&gt;
&lt;p&gt;To run more then one motor you need a separate timer and callback function for each motor.&lt;/p&gt;
&lt;h3&gt;nemastepper.py library&lt;/h3&gt;
&lt;p&gt;The next step in refactoring this code to make a general library for stepper motors is to wrap the functionality up in a Class. Rather than do this myself I've used jeffmer's &lt;code&gt;nemastepper.py&lt;/code&gt; module available as part of &lt;a href="https://github.com/jeffmer/micropython-upybbot"&gt;this github repository&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Stepper motor control example using a A4988 carrier board &lt;/span&gt;
&lt;span class="sd"&gt;and the nemastepper.py library available at &lt;/span&gt;
&lt;span class="sd"&gt;https://github.com/jeffmer/micropython-upybbot&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;disco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    cycles LEDs on pyboard for ms milliseconds&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;leds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;leds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;millis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;millis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
          &lt;span class="n"&gt;leds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="n"&gt;pyb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;leds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nemastepper&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Stepper&lt;/span&gt;
&lt;span class="n"&gt;motor1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stepper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyb&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;motor1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_step&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;tim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#start interrupt routine&lt;/span&gt;

&lt;span class="n"&gt;motor1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MAX_ACCEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="n"&gt;motor1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_speed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;disco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;motor1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_speed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;motor1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_speed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;disco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="n"&gt;motor1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_speed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;motor1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;tim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deinit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;nemastepper&lt;/code&gt; module has a Class Stepper which is initialized with the pin names for the pyboard pins connected to the  dir pin, step pin and enable_pin (&lt;code&gt;motor1 = Stepper('Y1','Y2','Y3')&lt;/code&gt;). Other motors connected to other pins can be initialized with more instances of &lt;code&gt;Stepper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main program only needs one timer for any number of motors. The timer is set up with a frequency (f = 10000 Hz) much faster than the step rate. The callback function for this timer should call the &lt;code&gt;do_step&lt;/code&gt; method for each &lt;code&gt;Stepper&lt;/code&gt; instance. The speed (steps/second) of each motor is set with the &lt;code&gt;set_speed&lt;/code&gt; method. The sign of the speed determines the direction. The &lt;code&gt;do_step&lt;/code&gt; method uses the count and pulserate variables to decide when to take a step to achieve the required speed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;MAX_ACCEL&lt;/code&gt; attribute of the &lt;code&gt;Stepper&lt;/code&gt; class sets the maximum acceleration of the motor. &lt;code&gt;set_speed&lt;/code&gt; will limit changes in speed to this value. I've set the &lt;code&gt;MAX_ACCEL&lt;/code&gt;to 1000 in the above example so the motor behavior is similar to the previous two examples. In a real application the desired maximum acceleration will depend on the load on the motor. Also in real application the motor speed will probably be ramped up and down in a loop rather than set to a single high value.&lt;/p&gt;
&lt;p&gt;The next step in improving the code would be to provide commands for moving a given number of steps in a given direction implementing acceleration and deceleration. The &lt;a href="http://www.airspayce.com/mikem/arduino/AccelStepper/"&gt;AccelStepper library&lt;/a&gt; for Arduino gives a good example of this approach but I don't know of such a library yet available for micropython.&lt;/p&gt;</summary><category term="make"></category><category term="python"></category><category term="micropython"></category></entry><entry><title>Reading the World - 100 Online Stories</title><link href="http://www.elfnor.com/reading-the-world-100-online-stories.html" rel="alternate"></link><updated>2015-06-19T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-06-19:reading-the-world-100-online-stories.html</id><summary type="html">&lt;p&gt;&lt;img alt="online story map" src="images/online_stories_map_02.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[Stories read by gender and genre.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Purple - female author speculative, Green - male author speculative, Red - female author, Blue - male author]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One of my early posts on this blogs was about &lt;a href="http://www.elfnor.com/reading-lists.html"&gt;reading lists&lt;/a&gt; and my plan to make a list of (and read) online stories from as many countries as possible. This was inspired by this blogger's project &lt;a href="http://ayearofreadingtheworld.com"&gt;A Year of Reading the World&lt;/a&gt; where she read one book from each of the 196 countries in one year.&lt;/p&gt;
&lt;p&gt;I recently got as far with this as I think I can. I stopped when I'd collected and read 100 stories, and I thought I'd share.&lt;/p&gt;
&lt;p&gt;Below is a list of one hundred different stories from 100 different countries that are available online (for free), written or translated into English. The bias is about a half science fiction, fantasy, speculative fiction  etc. This reflects my tastes but also what was easiest to find. The gender balance is deliberately 50 male and 50 female authors.&lt;/p&gt;
&lt;p&gt;There are many arguments in the definition of "from a country" (country of author's birth, country(s) of birth of author's parents, country where author lives etc.) but I've pretty much gone for self-identification. Where the author says they're from. &lt;/p&gt;
&lt;p&gt;There's also some arguments to be had about what is a country. I've used the same list/definition as described &lt;a href="http://ayearofreadingtheworld.com/2011/11/24/when-is-a-country-not-a-country/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My definition of story is suspect as some of these are excerpts from books. I haven't dare identify which genre (if any) I think the story belongs to as that's another set of arguments and I'd rather read than argue. Gender was determined by common pronoun use (he or she). &lt;/p&gt;
&lt;p&gt;This exercise feels a little bit like stamp collecting but my main aim was to increase the diversity of my reading. The collection was mostly made in a magpie fashion (that one there fits my criteria - I'll grab it) with no time spent looking for the best (whatever that might mean) story or a representative story. I read at least 120 stories and choose 100 to meet the gender balance and excluded any stories I didn't finish. As I read each story I made a short comment in a notebook to keep track of my choices and have included those comments for other's amusement. Don't take the comments  too seriously or too literally. &lt;/p&gt;
&lt;p&gt;Use this as a resource to explore other works on the same web sites. Hopefully it inspires others to read outside their normal haunts. &lt;/p&gt;
&lt;p&gt;Support the authors and the sites publishing these stories. They're a great resource. Many sites have subscriptions or donations. Use them. If you like an authors work seek out their publications and buy them.&lt;/p&gt;
&lt;p&gt;Here is a list to the front of the sites where I've linked to more than a couple of stories.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Site&lt;/th&gt;
&lt;th&gt;Number of stories&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/"&gt;WORDS without BORDERS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/"&gt;The World SF Blog&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://weirdfictionreview.com/"&gt;Weird Fiction Review&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://clarkesworldmagazine.com"&gt;Clarkesworld&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.tor.com/"&gt;Tor&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://nova-sf.de/internova/"&gt;Inter Nova&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.strangehorizons.com"&gt;Strange Horizons&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;More useful sites&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.freesfonline.de/"&gt;Free Speculative Fiction Online&lt;/a&gt; a list of links to online science fiction and fantasy stories published in professional venues.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://carriecuinn.com/2013/06/18/list-94-asian-speculative-fiction-authors-with-links/"&gt;Asian speculative fiction authors&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Category:Science_fiction_writers_by_nationality"&gt;Wikipedia Science fiction writers by nationality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Speculative_fiction_by_writers_of_color"&gt;Wikipedia Speculative fiction by people of color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://woyingi.wordpress.com/african-literature/"&gt;List of African authors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;100 Countries - 100 Online Stories&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Country&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Gender&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;Zalmay Babakohi&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-idols-dust"&gt;The Idol’s Dust&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Destruction of the Baniyam Buddha has consequences&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Albania&lt;/td&gt;
&lt;td&gt;Luan Starova&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/from-my-fathers-books"&gt;from My Father's Books&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;We left everything but always took the books&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Algeria&lt;/td&gt;
&lt;td&gt;Leïla Marouane&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/is-this-how-women-grow-up"&gt;Is This How Women Grow Up?&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Escaping patriarchy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Angola&lt;/td&gt;
&lt;td&gt;Ondjaki&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/comrade-antnio-and-the-cuban-teachers"&gt;Comrade António and the Cuban Teachers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Going to school in a free country&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Argentina&lt;/td&gt;
&lt;td&gt;Hernán Domínguez Nimo&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://it.stlawu.edu/~koon/CFArgentina/stories/Motorhome.html"&gt;Motor home&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Alien's rent a motor home&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Armenia&lt;/td&gt;
&lt;td&gt;Anna Davtyan&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/wide-shot"&gt;Wide Shot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Multi generations of unhappy families&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Australia&lt;/td&gt;
&lt;td&gt;Justine Larbalestier&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.strangehorizons.com/2001/20011022/cruel_brother.shtml"&gt;The Cruel Brother&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hansel and Gretal grow up and leave the forest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Austria&lt;/td&gt;
&lt;td&gt;Helmuth W. Mommers&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://nova-sf.de/internova/?p=427"&gt;Like a Fly Caught in a Web -or- To Catch Mice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Apartment hunter attracts Spam&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bangladesh&lt;/td&gt;
&lt;td&gt;Anwara Syed Haq&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/hands"&gt;Hands&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Repairman fixes doll and child&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Barbados&lt;/td&gt;
&lt;td&gt;Karen Lord&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.scribd.com/doc/125128519/Exclusive-Karen-Lord-short-story-ASTRONOMY-LESSON#.VR8YgGOW4y8"&gt;The Astronomy Lesson&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;On a planet far away a boy studies astronomy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Belgium&lt;/td&gt;
&lt;td&gt;Nadine Monfils&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://weirdfictionreview.com/2014/06/the-red-dress/"&gt;The Red Dress&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Red Riding Hood in Venice&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Benin&lt;/td&gt;
&lt;td&gt;Olympe Bhêly-Quénum&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://weirdfictionreview.com/2012/04/the-night-watchman/"&gt;The Night Watchman&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Household gods deter thieves&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bosnia&lt;/td&gt;
&lt;td&gt;Saša Stanišić&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/from-how-the-soldier-repairs-the-gramophone"&gt;from “How the Soldier Repairs the Gramophone”&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An engineer comes to the village to build a dam&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Botswana&lt;/td&gt;
&lt;td&gt;Wame Molefhe&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://publishyourstory.blogspot.co.nz/2011/07/go-tell-sun-by-wame-molefhe-book.html"&gt;from Go Tell the Sun&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Married to the wrong person&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Brazil&lt;/td&gt;
&lt;td&gt;Joyce Cavalccante&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.joycecavalccante.com/story.html"&gt;The Man who had a Fish Between his Legs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;City woman has beach holiday romance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bulgaria&lt;/td&gt;
&lt;td&gt;Harry Markov&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/2012/01/24/tuesday-fiction-cosmic-love-by-harry-markov/"&gt;Cosmic Love&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Star searching for love&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cameroon&lt;/td&gt;
&lt;td&gt;Wise Nzikie Ngasa&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://munyori.org/fiction/my-good-old-woman-by-wise-nzikie-ngasa/"&gt;My Good Old Woman&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Rich kid rebels against corruption&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Canada&lt;/td&gt;
&lt;td&gt;Doctorow, Cory&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.authorama.com/book/andas-game.html"&gt;Andas Game&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Bad-ass girl gamer does good&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chile&lt;/td&gt;
&lt;td&gt;Carlos Franz&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/spaniards-lost-in-america"&gt;Spaniards Lost in America&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Organizing the burial of a stranger&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;China&lt;/td&gt;
&lt;td&gt;Xia, Jia&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://clarkesworldmagazine.com/xia_02_12/"&gt;A Hundred Ghosts Parade Tonight &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Animatronic ghosts in a theme park&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Colombia&lt;/td&gt;
&lt;td&gt;Gabriel García Márquez&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.ndsu.edu/pubweb/~cinichol/CreativeWriting/323/MarquezManwithWings.htm"&gt;A Very Old Man with Enormous Wings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An old angel comes to stay&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Congo&lt;/td&gt;
&lt;td&gt;Wilfried N’Sonde&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/flowers-in-concrete"&gt;Flowers in Concrete&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Police attempt to close down a party&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Côte d'Ivoire&lt;/td&gt;
&lt;td&gt;Edwige-Renée Dro&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.africanwriter.com/love-is-not-found-at-bus-stops-fiction-by-edwige-renee-dro/"&gt;Love Is Not Found At Bus Stops&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Love, marriage and visas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Croatia&lt;/td&gt;
&lt;td&gt;Milena Benini&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/2011/11/15/tuesday-fiction-dancing-together-under-polarized-skies-by-milena-benini/"&gt;Dancing Together Under Polarized Skies&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Bees, aliens and dinosaurs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cuba&lt;/td&gt;
&lt;td&gt;Yoss&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.guernicamag.com/fiction/a-planet-for-rent/"&gt;A Planet for Rent&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Making hard choices to escape Earth&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Czech Republic&lt;/td&gt;
&lt;td&gt;Cyril Simsa&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/2013/01/22/tuesday-fiction-on-the-feast-of-stephen-by-cyril-simsa/"&gt;On the Feast of Stephen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The dangers of waking up heroes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Denmark&lt;/td&gt;
&lt;td&gt;H.H. Løyche&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/2012/09/04/tuesday-fiction-the-good-things-in-life-by-h-h-loyche/"&gt;The Good Things in Life&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Brain control for elite cyclists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Egypt&lt;/td&gt;
&lt;td&gt;Salwa Bakr&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-roosters-egg-a-fable-of-ancient-thebes"&gt;The Rooster’s Egg: A Fable of Ancient Thebes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Rooster teaches pharaoh about power of gods&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Equatorial Guinea&lt;/td&gt;
&lt;td&gt;Juan Tomás Ávila Laurel&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/by-night-the-mountain-burns"&gt;By Night the Mountain Burns&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Shortages on an island&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Eritrea&lt;/td&gt;
&lt;td&gt;Haregu Keleta&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-girl-who-carried-a-gun"&gt;The Girl Who Carried a Gun&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Love, marriage amid war&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Finland&lt;/td&gt;
&lt;td&gt;Pasi Ilmari Jääskeläinen&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.tor.com/stories/2014/11/where-the-trains-turn"&gt;Where the Trains Turn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Trains that escape the rails&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;France&lt;/td&gt;
&lt;td&gt;Aliette de Bodard&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://aliettedebodard.com/short-stories/the-lost-xuyan-bride/"&gt;The Lost Xuyan Bride&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Private detective beats gangster in alt history California&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gambia&lt;/td&gt;
&lt;td&gt;Biram Mboob&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://granta.com/Harabella/"&gt;Harabella&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Orphan sons against more Chinese colonizers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Georgia&lt;/td&gt;
&lt;td&gt;Tamta Melashvili&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/counting-out"&gt;Counting Out&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Children in war get bad news&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Germany&lt;/td&gt;
&lt;td&gt;Thorsten Küper&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://nova-sf.de/internova/?p=812#more-812"&gt;Haptic&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Addictive drug enhanced virtual reality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Greece&lt;/td&gt;
&lt;td&gt;Aathena Andreadis&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://crossedgenres.com/archives/013-2/planetfall-by-athena-andreadis/"&gt;Planetfall&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Colonizing a planet and 1st contact&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Grenada&lt;/td&gt;
&lt;td&gt;Tobias S. Buckell&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.nature.com/nature/journal/v437/n7061/full/4371064a.html"&gt;Toy Planes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Another country joins the space race&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guatemala&lt;/td&gt;
&lt;td&gt;Carol Zardetto&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/from-with-absolute-passion"&gt;from “With Absolute Passion”&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Returning to childhood home&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Haiti&lt;/td&gt;
&lt;td&gt;Évelyne Trouillot&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/detour"&gt;Detour&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Inequality in a traffic jam&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hungary&lt;/td&gt;
&lt;td&gt;Zoltán László&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/2011/12/27/tuesday-fiction-a-hundred-thousand-armstrongs-by-zoltan-laszlo/"&gt;A Hundred Thousand Armstrongs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Third world escapes to Mars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;India&lt;/td&gt;
&lt;td&gt;Shweta Narayan&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.cabinetdesfees.com/2011/a-fairy-tale-princess-by-shweta-narayan/"&gt;A Fairy Tale Princess&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Imaginary princess&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Indonesia&lt;/td&gt;
&lt;td&gt;Shi, Eve&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://ib-archive.livejournal.com/107860.html"&gt;defying gravity and other daily grievances&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Twins learn a new superpower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iran&lt;/td&gt;
&lt;td&gt;Reza Negarestani&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://weirdfictionreview.com/2012/03/the-dust-enforcer/"&gt;The Dust Enforcer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Encyclopedia entry for strange deity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iraq&lt;/td&gt;
&lt;td&gt;Bakhtiyar Ali&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-beginnings-of-jafar-i-magholi-and-hasan-tofan"&gt;The Beginnings of Ja’far-i-Magholi and Hasan Tofan&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The art of political assassination&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ireland&lt;/td&gt;
&lt;td&gt;Kiernan, Caitlín R.&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="https://subterraneanpress.com/magazine/spring_2014/busfare_by_caitlnr._kiernan"&gt;Bus Fare&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Trading riddles waiting for a bus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Israel&lt;/td&gt;
&lt;td&gt;Gail Hareven&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.newyorker.com/magazine/2009/05/04/the-slows"&gt;The Slows&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Modern versus old fashioned child rearing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Italy&lt;/td&gt;
&lt;td&gt;Luigi Pirandello&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-jar"&gt;The Jar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Mending a broken olive jar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jamaica&lt;/td&gt;
&lt;td&gt;Nalo Hopkinson&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.baenebooks.com/chapters/9781597804608/9781597804608___8.htm"&gt;The Easthound&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Twins and werewolves&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Japan&lt;/td&gt;
&lt;td&gt;Yukimi Ogawa&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.strangehorizons.com/2013/20130311/towns-f.shtml"&gt;Town's End&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hook up service for other people&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jordan&lt;/td&gt;
&lt;td&gt;Fadi Zaghmout&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/from-the-amman-bride"&gt;from “The Amman Bride”&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The husband's boyfriend and being effeminate in Cairo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kazakhstan&lt;/td&gt;
&lt;td&gt;Ilya Odegov&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/old-fazyl"&gt;Old Fazyl’s Advice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A child meets her father&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kenya&lt;/td&gt;
&lt;td&gt;Mwenda Mbatiah&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-wretched-of-uhuru"&gt;The Wretched of Uhuru&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Witchcraft vs education in small village&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kuwait&lt;/td&gt;
&lt;td&gt;Saud Alsanousi&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-bamboo-stalk"&gt;The Bamboo Stalk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Forgetting wallet leads to prison&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Latvia&lt;/td&gt;
&lt;td&gt;Tom Crosshill&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://clarkesworldmagazine.com/crosshill_04_12/"&gt;Fragmentation, or Ten Thousand Goodbyes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Virtual reality uploads&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Libya&lt;/td&gt;
&lt;td&gt;Razan Naim Moghrabi&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://intranslation.brooklynrail.org/arabic/two-excerpts-from-women-of-the-wind"&gt;Two Excerpts from Women of the Wind&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Boat migration to Europe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Malawi&lt;/td&gt;
&lt;td&gt;Daliso Chaponda&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.apex-magazine.com/trees-of-bone/"&gt;Trees of Bone&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hutu vsTutsi in the future&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Malaysia&lt;/td&gt;
&lt;td&gt;Zen Cho&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://giganotosaurus.org/2011/12/01/the-house-of-aunts/"&gt;The House of Aunts&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Aunts and vampires and high school romance in the jungle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Malta&lt;/td&gt;
&lt;td&gt;Michael Vella&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/2012/10/09/tuesday-fiction-valletta-city-of-guilt-by-michael-vella/"&gt;Valletta, City of Guilt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Detective and ghost side kick investigate in old Malta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mexico&lt;/td&gt;
&lt;td&gt;Silvia Moreno-Garcia&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/2013/05/07/tuesday-fiction-a-puddle-of-blood-by-silvia-moreno-garcia-author-week-6/"&gt;A Puddle of Blood&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Vampire and street kid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Morocco&lt;/td&gt;
&lt;td&gt;Abdelilah Hamdouchi&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/bled-dry"&gt;Bled Dry&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Prostitute and client need to bribe police&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Namibia&lt;/td&gt;
&lt;td&gt;Richard Kunzmann&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://nova-sf.de/internova/?p=553"&gt;Lost in Recollection&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Virtual reality brain interface break down&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nepal&lt;/td&gt;
&lt;td&gt;Amar Nyaupane&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-latch"&gt;The Latch&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Wedding night&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Netherlands&lt;/td&gt;
&lt;td&gt;Jetse de Vries&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://dailysciencefiction.com/science-fiction/aliens/jetse-de-vries/guidelines-for-first-contact-in-simplified-technical-english"&gt;Guidelines for First Contact in Simplified Technical English&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Manual on how to deal with aliens&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New Zealand&lt;/td&gt;
&lt;td&gt;Elizabeth Knox&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.tor.com/stories/2013/06/a-visit-to-the-house-on-terminal-hill"&gt;A Visit to the House on Terminal Hill&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Negotiations for a land purchase turn strange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nigeria&lt;/td&gt;
&lt;td&gt;Tade Thompson&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://interfictions.com/the-madwoman-of-igbobi-hospital-tade-thompson/"&gt;The Madwoman of Igbobi Hospital &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Ghost dosen't scare people into better behavior&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Norway&lt;/td&gt;
&lt;td&gt;Jo Nesbø&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/ms-hitra"&gt;MS Hitra&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A women in every port&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pakistan&lt;/td&gt;
&lt;td&gt;Usman Malik&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.tor.com/stories/2015/04/the-pauper-prince-and-the-eucalyptus-jinn-usman-malik"&gt;The Pauper Prince and The Eucalyptus Jinn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A Jinn protects a family&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Palestine&lt;/td&gt;
&lt;td&gt;Ahlam Bisharat&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/nom-de-guerre-butterfly"&gt;Nom de Guerre: Butterfly&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hiding questions away in wallet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Peru&lt;/td&gt;
&lt;td&gt;Jorge Eduardo Benavides&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/distinguishing-marks-none"&gt;Distinguishing Marks: None&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Double identity confusion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Philippines&lt;/td&gt;
&lt;td&gt;Kristin Mandigma&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://clarkesworldmagazine.com/mandigma_10_07/"&gt;Excerpt from a Letter by a Social-realist Aswang&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marxist vampire rant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Poland&lt;/td&gt;
&lt;td&gt;Pyotr Kowalczyk&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/2011/01/18/tuesday-fiction-an-orbital-flight-with-a-small-surprise-by-pyotr-kowalczyk/"&gt;An Orbital Flight With a Small Surprise&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Tourist in space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Portugal&lt;/td&gt;
&lt;td&gt;João Barreiros&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.infinityplus.co.uk/stories/silent.htm"&gt;Silent Night&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Killing Santa Claus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Republic of Korea&lt;/td&gt;
&lt;td&gt;Koo Byung-Mo&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/wizard-bakery"&gt;Wizard Bakery&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Webmaster for a wizard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Romania&lt;/td&gt;
&lt;td&gt;Tatiana Niculescu Bran&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-agent"&gt;The Agent&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Making pastries to sell an apartment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Russian Federation&lt;/td&gt;
&lt;td&gt;Ekaterina Sedia&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.fantasy-magazine.com/non-fiction/articles/fantasy-edited-by-paul-tremblay-and-sean-wallace/"&gt;Zombie Lenin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Student haunted by Lenin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Saudi Arabia&lt;/td&gt;
&lt;td&gt;Mohammed Hasan Alwan&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/mukhtar"&gt;Mukhtar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Young man loses virginity to prostitute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Serbia&lt;/td&gt;
&lt;td&gt;Zoran Živković&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.infinityplus.co.uk/stories/words.htm"&gt;Words&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Collecting beautiful words&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Singapore&lt;/td&gt;
&lt;td&gt;Joyce Chng&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/2013/02/19/tuesday-fiction-eagle-feathers-by-joyce-chng/"&gt;Eagle Feathers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An eagle protects the forest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Slovakia&lt;/td&gt;
&lt;td&gt;Uršuľa Kovalyk&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/sea-anemone"&gt;Sea Anemone&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Old age of a former strip tease dancer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Slovenia&lt;/td&gt;
&lt;td&gt;Suzana Tratnik&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/letters-without-envelopes"&gt;Letters without Envelopes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Woman sells her soul to the devil for love but ends up separated by war&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Somalia&lt;/td&gt;
&lt;td&gt;Sofia Samatar&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.strangehorizons.com/2013/20130107/selkie-f.shtml"&gt;Selkie Stories Are for Losers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Daughter runs away to Colorado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;South Africa&lt;/td&gt;
&lt;td&gt;Lauren Beukes&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://io9.com/5943053/a-brand-new-cyberpunk-story-by-lauren-beukes"&gt;Branded&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Corporate sponsored highs at pool hall&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spain&lt;/td&gt;
&lt;td&gt;Sofia Rhei&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://weirdfictionreview.com/2012/07/bluebeard-possibilities/"&gt;Bluebeard Possibilities&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Variations on the door you shouldn't open&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sri Lanka&lt;/td&gt;
&lt;td&gt;Vajra Chandrasekera&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://clarkesworldmagazine.com/chandrasekera_07_13/"&gt;Pockets Full of Stones&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Talking to grandfather on a colony ship&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sudan&lt;/td&gt;
&lt;td&gt;Sabah Babiker Ibraheem Sanhouri&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/isolation"&gt;Isolation&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Alone in a post apocalyptic town&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sweden&lt;/td&gt;
&lt;td&gt;Karin Tidbeck&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="https://worldsf.wordpress.com/2012/11/13/tuesday-fiction-britas-holiday-village-by-karin-tidbeck-author-week-5/"&gt;Brita’s Holiday Village&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Ideas growing and partying in an off season resort&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Syria&lt;/td&gt;
&lt;td&gt;Salwa Al Neimi&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-masseuse-and-her-adulterous-husband"&gt;The Masseuse and Her Adulterous Husband&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Female client and masseuse swap relationship stories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Taiwan&lt;/td&gt;
&lt;td&gt;Egoyan Zheng&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://translatingtaiwanlit.com/2013/02/17/the-blue-child-by-egoyan-zheng"&gt;The Blue Child&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Romance and jellyfish on a beach&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tanzania&lt;/td&gt;
&lt;td&gt;Sandra A. Mushi&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.africanwriter.com/shattered-dreams-fiction-by-sandra-a-mushi/"&gt;Shattered Dreams&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Living with an Aunt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thailand&lt;/td&gt;
&lt;td&gt;S.P. Somtow&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.somtow.net/bird.html"&gt;The Bird Catcher&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Grandfather's tale about a serial killer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tunisia&lt;/td&gt;
&lt;td&gt;Hassan Nasr&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://intranslation.brooklynrail.org/arabic/a-feast-and-the-new-mona-lisa"&gt;A Feast and The New Mona Lisa&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The king gets lost on the wrong side of town and Mona Lisa grows old&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Turkey&lt;/td&gt;
&lt;td&gt;Nazli Eray&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/the-map"&gt;The Map&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Lost in a map of relationships&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uganda&lt;/td&gt;
&lt;td&gt;Glaydah Namukasa&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/my-new-home"&gt;My New Home&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Going drinking with grandfather&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ukraine&lt;/td&gt;
&lt;td&gt;Tania Malyarchuk&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.worldliteraturetoday.org/2011/november/demon-hunger#.VWGr9GOW4y8"&gt;The Demon of Hunger&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Retelling Grandmother's stories of hardship&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;United Kingdom&lt;/td&gt;
&lt;td&gt;Jo Walton&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.tor.com/stories/2014/08/sleeper-jo-walton"&gt;Sleeper&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Virtual personality might start a revolution&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;United States of America&lt;/td&gt;
&lt;td&gt;Ursula K. Le Guin&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.lightspeedmagazine.com/fiction/elementals/"&gt;Elementals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Whimsical mythical creatures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Venzelua&lt;/td&gt;
&lt;td&gt;Slavko Zupcic&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/requiem"&gt;Requiem&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stealing books has consequences&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VietNam&lt;/td&gt;
&lt;td&gt;Kim Thuy&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/from-ru"&gt;from “Ru”&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Vietnames immigrants in Quebec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Yemen&lt;/td&gt;
&lt;td&gt;Wajdi Muhammad Abduh al-Ahdal&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;&lt;a href="http://wordswithoutborders.org/article/declining-freedom"&gt;Declining Freedom&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A trip to the market and a grammar lesson&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zimbabwe&lt;/td&gt;
&lt;td&gt;NoViolet Bulawayo&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.guernicamag.com/fiction/blak-power/"&gt;Blak Power&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Kids explore an empty house&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you would like an offline epub of these stories for your own use have a look at the &lt;a href="http://grabmybooks.com"&gt;grabmybooks&lt;/a&gt; add on for Firefox or Chrome. Select the table then use the "Grab Selected Links" from the right click menu and it will download them into an ebook. &lt;/p&gt;
&lt;p&gt;Please note any errors you spot in the comments. Also feel free to add links in the comments to a story from any of the 96 countries I've missed.&lt;/p&gt;</summary><category term="reading"></category></entry><entry><title>Blender Game Level Generator</title><link href="http://www.elfnor.com/blender-game-level-generator.html" rel="alternate"></link><updated>2015-06-11T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-06-11:blender-game-level-generator.html</id><summary type="html">&lt;p&gt;&lt;img alt="game wide shot" src="./images/level_gen_STD_ramps_render_017.png" /&gt;&lt;/p&gt;
&lt;p&gt;Update: This lsystem/Structure Synth code has now (March 2016) been incorporated into the Sverchok &lt;em&gt;Generative Art&lt;/em&gt; node. See the &lt;a href="http://www.elfnor.com/generative-art-updated-examples.html"&gt;updated examples&lt;/a&gt; and the &lt;a href="http://www.elfnor.com/generative-art-sverchok-node-update.html"&gt;node docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was testing a puzzle level for my partner Tech Monkey's &lt;a href="http://www.techmonkeybusiness.com/steely-taws-puzzle-game-v1.html"&gt;&lt;strong&gt;Steely Taws&lt;/strong&gt; Blender game&lt;/a&gt; and the components started to look a bit like things produced by my &lt;a href="http://www.elfnor.com/blender-pipe-generator.html"&gt;Blender Pipe Generator&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steely Taws - No Quitsies&lt;/strong&gt; is a marble run game based on Switchball and Balance. At its most basic it requires straights, bends and ramps. It was not too hard to put together an automatic level generator using the "Generative Art" node of the &lt;a href="https://github.com/nortikin/sverchok"&gt;Sverchok&lt;/a&gt; Blender add-on. If you're new to Sverchok maybe back up and read my Simple Sverchok series (&lt;a href="http://www.elfnor.com/simple-sverchok-01-centers-polygons.html"&gt;part 1&lt;/a&gt;) and the &lt;a href="https://github.com/nortikin/sverchok/blob/master/docs/nodes/generator/generative_art.rst"&gt;documentation for the node&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'll start with a simple example that just has very basic components, then I'll show you how we standardized the Steely Taws game components to work with the "Generative Art" node. Then I'll finish up with the blend file with the components, Sverchok node diagram, xml description to build the level and the game logic to allow anyone to generate and play an unlimited number of random Steely Taws game levels. The same concept could be used to produce random levels for games with quite different architectures, for example a dungeon game with corridors and stairs.&lt;/p&gt;
&lt;p&gt;For a demo version to prove this would work I made a simple straight, bend and ramp. The straight section needs to go from (-0.5, 0, 0) to (0.5, 0, 0). The bend goes from (1, 0, 0) to (0, 1, 0) and has its origin at (0, 0, 0). This is the same as the &lt;a href="http://www.elfnor.com/blender-pipe-generator.html"&gt;Blender Pipe Generator&lt;/a&gt; but in this case the components are flat rather than round. The ramp goes up from (-0.5, 0.5, 0) to (0.5, 0.5, 0).&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple game components" src="./images/simple_components.png" /&gt;&lt;/p&gt;
&lt;p&gt;The xml that describes the design is very similar to that used for the Pipe Generator. It defines 6 versions of the "R1" rule. The Generative Art node chooses versions of these rules at random. The first version places the straight section, the next two place left and right bends rotating the bend object as required. The next two place the ramp object to go up or down and the last version creates an intersection. The names for the shapes have been prefixed with "00", "01", "02" so they  sort in a predictable way to make it easy to assign the correct object to the correct shape in the Sverchok node diagram. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;straight&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;00_straight&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ty -1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;01_bend&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 1 rz -90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz -90 tx -1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;01_bend&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ty 1 rz 180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;up&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.5 tz 0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;02_ramp&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.5 tz 0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;down&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.5 tz -0.5 rz 180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;02_ramp&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 180 tx 0.5 tz -0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;branch&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Sverchok node diagram is a bit more complicated than for the Pipe Generator as we now have three different types of objects (straights, bends and ramps) to place. The easiest way to do this is to use a "Logic" node before the "Mask" node.&lt;/p&gt;
&lt;p&gt;&lt;img alt="node diagram" src="./images/level_gen_demo_nodes.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple level" src="./images/level_gen_demo.blend1.png" /&gt;&lt;/p&gt;
&lt;p&gt;The "Generative Art" node processes the xml file to randomly add the different types of objects. The weights given with each version of the rule determine the frequency of each type of component. Increase the weight of the "left" and "right" version of the rules and the design will have many more bends. Changing the "rseed" value in the "Generative Art" node generates a different set of random numbers and will produce a different level design.&lt;/p&gt;
&lt;p&gt;The processor dosen't know anything about where it previously placed objects so there will be random intersections of paths. With simple objects these intersections look the same as branches and just add to the complexity of the design.  With the objects used in the Steely Taws game the rails placed on the sides of the path make these intersections tricky to play. Manual editing is required to tidy these intersections up deleting rails where needed. &lt;/p&gt;
&lt;p&gt;Seeing the demo worked well my partner set to work standardizing the Steely Taws components so they fitted on a regular grid. The demo above is based on a grid of 1 Blender unit, the game components have a standard size of 12 units long, x 4.25 units wide, and 3 units deep.&lt;/p&gt;
&lt;p&gt;&lt;img alt="std components" src="./images/STD_Components-sml.png" /&gt;&lt;/p&gt;
&lt;p&gt;The drop deck components are interesting as they make some paths one way only. This means the player can get stuck with no way back. Either follow up the auto level generation with some hand editing to make the game level playable or only use ramps (set the weight of the drops to zero). The ramps can be driven both up and down. To keep the level from always dropping or climbing make the sum of the weights of down components (drops and down ramps) equal to the weight of the up ramps.&lt;/p&gt;
&lt;p&gt;In the blend file I've used "mesh instancer" nodes to the replace the "Objects In" and "Viewer Draw" nodes. This allows the same mesh to be used for every straight in a similar way to when you do  a linked duplicate in Blender and produces a much smaller file.&lt;/p&gt;
&lt;p&gt;Here are some screen shots of the game being played in the Blender Game Engine.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screen shot 1 of game in play" src="./images/steely_taws_screenshot_1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="screen shot 2 of game in play" src="./images/steely_taws_screenshot_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;The blend file available &lt;a href="./downloads/steely_taws_level_gen.blend"&gt;here&lt;/a&gt; contains each of the components on a separate layer. The game itself should be generated on the 1st layer.&lt;/p&gt;
&lt;p&gt;Install a recent version of &lt;a href="https://github.com/nortikin/sverchok"&gt;Sverchok&lt;/a&gt; then open the blend file. A simple level with 50 components should be automatically generated. Maximise the 3D View (CTRL-UP). Select the  camera view (NUMPAD-0) then press P to start the game. Controls are provided for either the arrow keys or a joystick. If you fall off the edge you will automatically respawn at the start.&lt;/p&gt;
&lt;p&gt;To make your own levels, press ESC to close the game and return to Blender. &lt;/p&gt;
&lt;p&gt;The easiest way to get a new level is to change the the "rseed" value in the "Generative Art" node. The levels are random and all parts of the level may not be reachable due to intersecting paths. Also some parts of the levels may be dead ends due to the drops being one-way. Edit the level by deleting or moving components. Most of the handrails are separate objects so they be easily deleted at intersections. Delete lots more rails to make a level more difficult.&lt;/p&gt;
&lt;p&gt;Another way to change a level is to change the weights for each rule in the xml text block (steely_taws.xml). The larger a weight the more often that component will appear in the level. &lt;/p&gt;
&lt;p&gt;Setting the weight of a rule to zero will mean that component will not appear at all. This may require some changes to the numbers in the "Logic" equal nodes to make the correct mask output connect to the correct object. Each integer in the "Mask" output of the "Generative Art" node corresponds to one of the shapes use in the xml. The integers are assigned to the shapes in alphabetical order. So if one shape disappears from the output the ones further down in the order will move down one integer. The "drops" have been given the last places in the shapes list so they can have their weights set to zero without affecting the other shapes. &lt;/p&gt;
&lt;p&gt;Go across to Tech Monkey and get the full &lt;a href="http://www.techmonkeybusiness.com/steely-taws-puzzle-game-v1.html"&gt;puzzle version&lt;/a&gt; to add more puzzle features such as switches, movable boxes,barriers, gates, elevators and draw bridges. The components are all described in detail &lt;a href="http://www.techmonkeybusiness.com/steely-taws-components.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="structuresynth"></category></entry><entry><title>Blender Progress Animations</title><link href="http://www.elfnor.com/blender-progress-animations.html" rel="alternate"></link><updated>2015-06-01T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-06-01:blender-progress-animations.html</id><summary type="html">&lt;p&gt;&lt;img alt="walkways still" src="./images/walkways_ivy_024.png" /&gt;&lt;/p&gt;
&lt;p&gt;A nice side effect of using the &lt;a href="http://www.elfnor.com/blender-auto-save-add-on.html"&gt;auto save add-on&lt;/a&gt; is that if you render often you effortlessly have a record of the progress of your scene towards the final image. These saved images can be collected up into an animation. &lt;/p&gt;
&lt;p&gt;I'm going to describe how to do it as an animated GIF using GIMP. GIFs are well supported on the web but have indexed color so they tend to end up with visible lines between colors in areas of the image where there should be smooth gradients. There are alternatives to GIFs that don't have this problem some of which are discussed &lt;a href="http://stackoverflow.com/questions/6402633/what-alternatives-for-animated-gifs-are-there"&gt;here&lt;/a&gt; on stackoverflow. Otherwise make a standard video animation from the still images using programs like &lt;a href="https://kdenlive.org/"&gt;Kdenlive&lt;/a&gt; or &lt;a href="http://www.openshot.org/"&gt;openshot&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Using GIMP to make an animated GIF from still images&lt;/h2&gt;
&lt;p&gt;Open up GIMP and use &lt;code&gt;File &amp;gt; Open as Layers&lt;/code&gt; to get a file dialog box. Select all the image files in your auto-saves folder and import them into GIMP. All images used should have the same dimensions. In the &lt;code&gt;Layers&lt;/code&gt; dialog check all the files are in the right order. The first image comes from the bottom of the dialog and the last from the top. &lt;/p&gt;
&lt;p&gt;Choose &lt;code&gt;Filters &amp;gt; Animation &amp;gt; Optimize (for GIF)&lt;/code&gt;. This will produce a new GIMP file. In this file each of the layers has been reworked to only include the parts that differ from the previous image. The rest of that layer is set to transparent to allow earlier images to show through. This reduces the file size. &lt;/p&gt;
&lt;p&gt;The layers have been renamed to something like &lt;code&gt;walkways_ivy_015.png(100ms)(combine)&lt;/code&gt; The first set of brackets contains the length of time the image will be displayed. These can be individually edited by selecting &lt;code&gt;Edit Layer Attributes&lt;/code&gt; from the right click menu. To set them all at once you need to change the default which as far as I can tell is only available from the export dialog. Choose &lt;code&gt;File &amp;gt; Export as..&lt;/code&gt; and set &lt;code&gt;GIF&lt;/code&gt; as the format.  In the &lt;code&gt;Export Image as GIF&lt;/code&gt; dialog,  select &lt;code&gt;as animation&lt;/code&gt; and set &lt;code&gt;Delay between frames&lt;/code&gt; to the desired value. I used 500 ms in the following GIF. Also select &lt;code&gt;Use delay above for all frames&lt;/code&gt;. Export the GIF and its done.&lt;/p&gt;
&lt;p&gt;I wanted to set the final image in the GIF to a longer display time than the others. To do this open the GIF file back into GIMP and change the delay in the layer attribute as above and re-export. I used 2000 ms.&lt;/p&gt;
&lt;p&gt;&lt;img alt="walkways gif" src="./images/walkways_05.gif" /&gt;&lt;/p&gt;
&lt;p&gt;The sequence above shows the texturing and lighting for a scene. The geometry was developed using my &lt;a href="http://www.elfnor.com/blender-pipe-generator.html"&gt;Generative Art node&lt;/a&gt; for &lt;a href="https://github.com/nortikin/sverchok"&gt;Sverchok&lt;/a&gt;. Also used is the Ivy Gen add-on included with Blender.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category></entry><entry><title>Blender Auto Save add-on</title><link href="http://www.elfnor.com/blender-auto-save-add-on.html" rel="alternate"></link><updated>2015-05-29T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-05-29:blender-auto-save-add-on.html</id><summary type="html">&lt;p&gt;&lt;img alt="radiolaria version 31" src="./images/decimate_planes_31_crop.png" /&gt;&lt;/p&gt;
&lt;p&gt;(This image is unrelated to the post other than it was the 31st image rendered from the same basic geometry.)&lt;/p&gt;
&lt;p&gt;My normal work flow in Blender is to create a blend file and use it to render and save an image often at low resolution and quality for speed. Then I fiddle some more (camera angle, lighting, materials), render another image hopefully save the Blender file and then repeat. I try to keep the same version and file names for images and blend files but I often get out of sync. What I need to be able to do is browse all the image versions and reliably find the blend file that produced it. That way I can go back and find the best images and render them again at a higher resolution and quality.&lt;/p&gt;
&lt;p&gt;I first thought of a general solution using version control such as git. If I did a commit after each render I'd have the kind of record I needed. But git dosen't store the image files in a way that the images are easily browseable between different commits.&lt;/p&gt;
&lt;p&gt;I ended up making a small addition to an existing Blender add-on. The &lt;a href="http://wiki.blender.org/index.php/Extensions:2.6/Py/Scripts/Render/Auto_Save"&gt;original by Florian Meyer&lt;/a&gt; auto saved the image when a render was completed. &lt;/p&gt;
&lt;p&gt;My version available &lt;a href="https://github.com/elfnor/blender_auto_save_on_render"&gt;here on github&lt;/a&gt;, has the option to also auto save the blend file after each render. This results in nice pairs of blend files and images with the same name and version number. &lt;/p&gt;
&lt;p&gt;After the add-on is installed, the settings are found on the Render panel.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="./images/screen.png" /&gt;&lt;/p&gt;
&lt;p&gt;With "Auto Save Image" and "with .blend" set and the file "\Documents\test.blend" open, after rendering the following files will be created  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;\&lt;span class="n"&gt;Documents&lt;/span&gt;\&lt;span class="n"&gt;auto_saves&lt;/span&gt;\&lt;span class="n"&gt;test_001&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;  
\&lt;span class="n"&gt;Documents&lt;/span&gt;\&lt;span class="n"&gt;auto_saves&lt;/span&gt;\&lt;span class="n"&gt;test_001&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blend&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If "subfolder" is also set the files will be created in a sub-folder named after the blend file.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;\&lt;span class="n"&gt;Documents&lt;/span&gt;\&lt;span class="n"&gt;auto_saves&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_001&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;  
\&lt;span class="n"&gt;Documents&lt;/span&gt;\&lt;span class="n"&gt;auto_saves&lt;/span&gt;\&lt;span class="n"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;test_001&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blend&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The version number is incremented with each render.  &lt;/p&gt;
&lt;p&gt;This looks like it will do the job for me. I haven't yet done more than 999 versions of the same render.&lt;/p&gt;
&lt;p&gt;I'd still be interested in how other people handle version control stuff in Blender or other digital art.&lt;/p&gt;
&lt;p&gt;Possibly most people have a more defined goal than me, know their tools well enough to head towards that goal in a linear fashion, know when they've got there and then stop. Their last file is their best. Me, I tend to try lots of different ideas in different directions and stop when it's bedtime.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category></entry><entry><title>Blender Pipe Generator</title><link href="http://www.elfnor.com/blender-pipe-generator.html" rel="alternate"></link><updated>2015-05-24T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-05-24:blender-pipe-generator.html</id><summary type="html">&lt;p&gt;&lt;img alt="pipes" src="./images/pipe_gen_15.png" /&gt;&lt;/p&gt;
&lt;p&gt;Update: This lsystem/Structure Synth code has now (March 2016) been incorporated into the Sverchok &lt;em&gt;Generative Art&lt;/em&gt; node. See the &lt;a href="http://www.elfnor.com/generative-art-updated-examples.html"&gt;updated examples&lt;/a&gt; and the &lt;a href="http://www.elfnor.com/generative-art-sverchok-node-update.html"&gt;node docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The old windows 3D pipes screensaver has inspired many pipe generators for different graphic packages. There's even a physical version on &lt;a href="http://www.thingiverse.com/thing:25311"&gt;thingiverse&lt;/a&gt;. But there dosen't seem to be anything similar for Blender past version 2.49. &lt;/p&gt;
&lt;p&gt;Here's how to make one using the Generative Art node in Sverchok. This node is now available under Beta nodes in the latest version of Sverchok available on &lt;a href="https://github.com/nortikin/sverchok"&gt;github&lt;/a&gt;. Download the zip version and install like any other Blender addon.&lt;/p&gt;
&lt;p&gt;The documentation for the node is &lt;a href="https://github.com/nortikin/sverchok/blob/master/docs/nodes/generator/generative_art.rst"&gt;here&lt;/a&gt;. See also previous posts on this blog tagged &lt;a href="http://elfnor.com/tag/sverchok.html"&gt;sverchok&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of all you need to set up two basic elements a straight section and a bend. The straight section needs to go from (-0.5, 0, 0) to (0.5, 0, 0). Basically a cylinder of length 1, centered at the origin and aligned along the x-axis. The bend needs to go from (1, 0, 0) to (0, 1, 0) and have its origin at (0, 0, 0). Easiest is to start with a torus with a major radius of 1 centered at the origin, then delete 3/4 of the faces leaving only those in the positive x-y quadrant. &lt;/p&gt;
&lt;p&gt;Examples of straights and bends. &lt;/p&gt;
&lt;p&gt;&lt;img alt="examples of straights and bends" src="./images/straights_bends.png" /&gt;&lt;/p&gt;
&lt;p&gt;Make sure any scaling done in object mode is applied (CTRL-A) to the object. Keep the number of vertices around the ends of the two elements the same for a smooth look. This will also enable the meshes to be nicely joined later if desired.&lt;/p&gt;
&lt;p&gt;The following xml defines seven versions of the "R1" rule. The versions have each been labeled with the attribute "dir" to help figure out what they do. This attribute is ignored by the "Generative Art" node processor. The "straight" rule places the "s1" shape and the others place the "s2" shape.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;200&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;straight&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ty -1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 1 rz -90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz -90 tx -1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ty 1 rz 180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;up&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz 1 rx -90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 1 rz -90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;down&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz -1 rx 90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 1 rz -90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;branch&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;180 double bend&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tz -1 rx 90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz -90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 1 rz -90&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Paste the xml code into a text block in the blend file and set up a Sverchok node diagram as follows. Use the drop down on the "Generative Art" node to select the text block with the xml code. Select the straight object in the scene and use the "Get selection" button on one of the "Object In" nodes to import it into the node. Import the bend object into the other node. After doing this you may have to swap the objects over to get the pipe structure to connect up properly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot node setup" src="./images/pipe_gen_demo_01.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;Once everything is working, play with the weights associated with each rule. This will change the structure of the pipe network. Changing the rseed value on the node will also change the random basis of the structure.&lt;/p&gt;
&lt;p&gt;After changing the xml file in the text editor, the Sverchok nodes can be updated with CTRL-ENTER.&lt;/p&gt;
&lt;p&gt;Decorations can be added to the network at random. First model the decorators keeping the origin for each object at (0, 0, 0). Then use the "List Shuffle" and "List Slice" nodes to select a small selection of the original matrices. Use these matrices to place the decorator objects.&lt;/p&gt;
&lt;p&gt;&lt;img alt="node diagram for decorators" src="./images/pipe_gen_demo_02.blend.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="thin pipes" src="./images/pipe_gen_thin_14.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="structuresynth"></category></entry><entry><title>A Git Horror Story</title><link href="http://www.elfnor.com/a-git-horror-story.html" rel="alternate"></link><updated>2015-05-23T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-05-23:a-git-horror-story.html</id><summary type="html">&lt;p&gt;&lt;img alt="git workflow" src="./images/Git_Workflow.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;While working on porting Structure Synth to Blender I came across &lt;a href="http://pdos.csail.mit.edu/scigen/"&gt;SCIgen&lt;/a&gt; which generates random computer science papers using methods that are similar to the way Structure Synth generates geometry. Some of these papers have been accepted at conferences or in journals.  This led to automatic text generators such as this &lt;a href="http://www.plot-generator.org.uk/"&gt;one&lt;/a&gt; which I guess just uses straight substitution into a defined story. To include my Generative Art version of Structure Synth in the Sverchok Blender add-on I had to learn a lot more about using Git on a collaborative project. Like many new users I had trouble with the Git command terms. Late one night (a dark and stormy night) these two things converged.&lt;/p&gt;
&lt;p&gt;Here's my &lt;a href="http://www.plot-generator.org.uk/lbs9ew/curse-of-fetched-repo.html"&gt;git horror story&lt;/a&gt; automatically generated by &lt;a href="http://www.plot-generator.org.uk/"&gt;Plot Generator&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Curse of the Fetched Repo&lt;/h2&gt;
&lt;h3&gt;A Horror Story&lt;/h3&gt;
&lt;h3&gt;by elfnor&lt;/h3&gt;
&lt;p&gt;Whilst investigating the death of a local issue, a public git called A. Contributor uncovers a legend about a supernaturally-cursed, fetched repo circulating throughout upstream. As soon as anyone uses the repo, he or she has exactly 31 days left to live.&lt;/p&gt;
&lt;p&gt;The doomed few appear to be ordinary people during day to day life, but when photographed, they look merged. A marked person feels like a checked out collaborator to touch.&lt;/p&gt;
&lt;p&gt;A. gets hold of the repo, refusing to believe the superstition. A collage of images flash into her mind: a blamed git balancing on a cloned issue, an old newspaper headline about a rebase accident, a hooded organization ranting about forks and a drinking well located in an open source place.&lt;/p&gt;
&lt;p&gt;When A. notices her branches have collaborator-like properties, she realises that the curse of the fetched repo is true and calls in her primary, a diff called B. User, to help.&lt;/p&gt;
&lt;p&gt;B. examines the repo and willingly submits himself to the curse. He finds that the same visions flash before his eyes. He finds the blamed git balancing on a cloned issue particularly chilling. He joins the queue for a supernatural death.&lt;/p&gt;
&lt;p&gt;A. and B. pursue a quest to uncover the meaning of the visions, starting with a search for the hooded organization. Will they be able to stop the curse before their time is up?&lt;/p&gt;
&lt;h2&gt;Praise for The Curse of the Fetched Repo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;"This is actually pretty scary. I'll never be able to look at another fetched repo for as long as I live."
- The Daily Tale&lt;/p&gt;
&lt;p&gt;"Oh please! There's nothing scary about a blamed git balancing on a cloned issue. Are we supposed to feel spooked?"
- Enid Kibbler&lt;/p&gt;
&lt;p&gt;"The hooded organization really freaked me out."
- Hit the Spoof&lt;/p&gt;
&lt;p&gt;"I hope A. and B. get married."
- Zob Gloop
    &lt;code&gt;9+++++++++++++++++++++++++-------&lt;/code&gt;.
-&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;</summary><category term="think"></category><category term="nonsense"></category></entry><entry><title>Blender Ivy Gen Abstracts</title><link href="http://www.elfnor.com/blender-ivy-gen-abstracts.html" rel="alternate"></link><updated>2015-05-17T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-05-17:blender-ivy-gen-abstracts.html</id><summary type="html">&lt;p&gt;&lt;img alt="ivy1" src="./images/ivy_test19.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here are a quick couple of experiments with the Blender Ivy Gen addon. Its included with Blender and only has to be activated from the User Preferences dialog.&lt;/p&gt;
&lt;p&gt;I was interested (as always) in doing something more abstract and less realistic with the Ivy Gen addon. The addon is based on Thomas Luft's stand alone &lt;a href="http://graphics.uni-konstanz.de/~luft/ivy_generator/"&gt;Ivy Generator&lt;/a&gt;. It's a procedural system  and can produce some very realistic ivy and similar climbing plants. There is a little documentation on the effects of the parameters (read The descriptions) but changing each one by a small amount and updating the ivy quickly gives an idea of their effect. For more info I found this &lt;a href="https://cgcookie.com/blender/lessons/1-addon-overview-ivygen/"&gt;cgcookie video&lt;/a&gt; (setting descriptions start about 5 minutes in) and especially the comment below it by Nick Van den Broeck helpful.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Primary weight determines if the branch will continue in the same direction. Random weight will make it turn away. Gravity weight will pull everything down (but you will have to set it beyond 2 or 3 in order to actually see things go down). Adhesion weight will make things turn back towards the wall.
Max Adhesions length will determine the region of effect of Adhesion weight. And Max Float length will determine how long a branch will survive once it gets outside of the adhesions length region.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm trying to push the output away from climbing plants but haven't got as far away as I'd like. &lt;/p&gt;
&lt;p&gt;In the meantime here are my tests. In the top image the ivy was grown (with no leaves) over a spherical wireframe that isn't included in the image. The image below is the same render with the Ray Visibility for the ivy turned off so only the shadows remain. The last image  is similar to the first with some more sculpting around the supporting sphere.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ivy1" src="./images/ivy_test24.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ivy1" src="./images/ivy_test35.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category></entry><entry><title>Blender Adventures with Hyperbolic Planes</title><link href="http://www.elfnor.com/blender-adventures-with-hyperbolic-planes.html" rel="alternate"></link><updated>2015-04-15T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-04-15:blender-adventures-with-hyperbolic-planes.html</id><summary type="html">&lt;p&gt;&lt;img alt="hyperbolic coral" src="./images/coral_node_28.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Hyperbolic Planes&lt;/h2&gt;
&lt;p&gt;If you cut out a large number of paper hexagons, you can arrange 6 hexagons around a central hexagon and form a honeycomb tiling of the plane. The plane has zero curvature. Its flat. Any triangle you draw on this plane has angles that add up to 180 degrees&lt;/p&gt;
&lt;p&gt;&lt;img alt="hexagon tiling" src="./images/hexagon_plane.png" /&gt;&lt;/p&gt;
&lt;p&gt;If you also cut pentagons from paper with the same side length as the hexagons and this time arrange five hexagons around each pentagon (using some tape to hold it all together) you will get a sphere patterned like a soccer ball. The sphere has constant positive curvature. If you draw a triangle on a sphere the sum of its angles will always add up to more than 180 degrees. How much more depends on the area of the triangle as a portion of the area of the sphere. For example a triangle drawn through the pole and two points on the equator can have three 90 degree angles.&lt;/p&gt;
&lt;p&gt;&lt;img alt="football" src="./images/hexagon_sphere.png" /&gt;&lt;/p&gt;
&lt;p&gt;If instead of pentagons you use a seven sided polygon (septagon) for the central polygon you will get a nice crinkly surface. (&lt;a href="http://www.math.tamu.edu/~frank.sottile/research/subject/stories/hyperbolic_football/index.html"&gt;Instructions&lt;/a&gt;) This is said to have constant negative curvature and is an example of a hyperbolic plane. The sum of the angles for a triangle drawn on a hyperbolic plane will always be less than 180 degrees.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hyperbolic football" src="./images/hyperbolic_football_convoluted.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Another way to  make a physical model of a hyperbolic plane is with crochet. &lt;a href="http://www.math.cornell.edu/~dtaimina/"&gt;Dania Taimina&lt;/a&gt;, a Latvian mathematician developed this and has a book with the great title &lt;a href="http://www.amazon.com/Crocheting-Adventures-Hyperbolic-Planes-Taimina/dp/1568814526"&gt;Crocheting Adventures with Hyperbolic Planes&lt;/a&gt;. This has inspired many projects world wide including this &lt;a href="http://crochetcoralreef.org/coral-reef-gallery.php"&gt;crochet coral reef&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hyperbolic crochet" src="./images/reef1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;"Crochet Coral and Anemone Garden" with sea slug by Marianne Midelburg.
Photos © The IFF by Alyssa Gorelick.&lt;/p&gt;
&lt;p&gt;Lots of surfaces in nature have this crinkly negative curvature. It maximizes surface area in a given volume. Which is great for marine organisms that feed by filtering water, but is also seen in some cacti, succulents, fungi, lichens, lettuce and kale.&lt;/p&gt;
&lt;p&gt;&lt;img alt="real coral" src="./images/576px-Folded_Coral_Flynn_Reef.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;"&lt;a href="http://commons.wikimedia.org/wiki/File:Folded_Coral_Flynn_Reef.jpg#/media/File:Folded_Coral_Flynn_Reef.jpg"&gt;Folded Coral Flynn Reef&lt;/a&gt;" by &lt;a href="//commons.wikimedia.org/wiki/User:99of9" title="User:99of9"&gt;Toby Hudson&lt;/a&gt; - &lt;span class="int-own-work" lang="en"&gt;Own work&lt;/span&gt;. Licensed under &lt;a title="Creative Commons Attribution-Share Alike 3.0" href="http://creativecommons.org/licenses/by-sa/3.0"&gt;CC BY-SA 3.0&lt;/a&gt; via &lt;a href="//commons.wikimedia.org/wiki/"&gt;Wikimedia Commons&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Blender&lt;/h2&gt;
&lt;p&gt;I got interested in trying to make 3D meshes with this type of hyperbolic geometry. &lt;/p&gt;
&lt;p&gt;A web search found &lt;a href="http://www.openprocessing.org/sketch/9406"&gt;this online app&lt;/a&gt; written in Processing. Its further explained in this &lt;a href="http://x-polis.blogspot.com.au/2011/04/hyperbolic-coral.html"&gt;blog entry&lt;/a&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To translate the system to Processing we needed two conceptual parts - a constructor to build relationships between stitches and a physics simulator to give material properties allowing the stitches to self optimise their position (ruffle).&lt;/p&gt;
&lt;p&gt;Essentially the stitches are replaced with particles connected by springs. The particles are free to move and the springs can be compressed or stretched but have a rest length that they try to reach. The system comes to equilibrium when as many springs are as close as possible to their rest length - a condition that requires a resolved hyperbolic form.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To me, the use of springs looked a bit like the cloth modifier in Blender so I wrote a &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; scripted node to generate the hyperbolic geometry. Sverchok is great for this kind of exercise as it seperates out generating the geometry from all the other Blender python stuff. With a Sverchok node all you need to bother with are lists of vertices, edges and faces.&lt;/p&gt;
&lt;p&gt;To use the hyperbolic coral node in Blender first install the &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; addon. Download the hyperbolic coral code from &lt;a href="https://github.com/elfnor/hyperbolic_coral"&gt;github&lt;/a&gt;. Then load the python file as a text blocks into a blend file. Add a "Scripted Node" to a Sverchok node tree. On the node select the &lt;code&gt;hyperbolic_coral.py&lt;/code&gt; code from the lower drop down. Then click the plugin icon to the right of this field. The node should turn blue with some inputs and outputs. Wire the "Verts" and "Faces" outputs to a "Viewer Draw" node and you should see some geometry as below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coral wired up" src="./images/coral_node_radius.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cloth parameters" class="floatright" src="./images/coral_node_radius.blend1.png" /&gt;&lt;/p&gt;
&lt;p&gt;To make this more coral like we use the cloth modifier to wrinkle and deform the mesh.&lt;/p&gt;
&lt;p&gt;Bake the output of the "Viewer Draw" node. (select the node and find the "bake" button on the N-panel (Properties shelf) . Click the "Show" button to disable the node  and see the object with a name such as "Sv_0".&lt;/p&gt;
&lt;p&gt;Go to the Physics tab and enable cloth physics. To the right is a reasonable set of parameters. The most important is to select "Self Collision" under "Cloth Collision" and to set a reasonably high "Quality" for this.&lt;/p&gt;
&lt;p&gt;If you are not pinning parts of the mesh (see below) you may want to turn "Gravity" off under "Cloth Field Weights" or the mesh may just fall of the screen when you run the cloth simulation.&lt;/p&gt;
&lt;p&gt;Add a "Subdivision Surface" modifier after the "Cloth Modifier". Then run the simulation by starting the animation (Alt-A). Stop the animation when you like the shape and apply the modifiers to bake the mesh.&lt;/p&gt;
&lt;p&gt;&lt;img alt="mesh deformed" src="./images/coral_node_radius.blend2.png" /&gt;&lt;/p&gt;
&lt;p&gt;To get more shape to the surface, subdivide it before applying the cloth modifier. This will slow down the animation process. &lt;/p&gt;
&lt;p&gt;To give some structure pin some of the vertices of the mesh. For example select a ring of vertices near the center of the mesh and create a vertex group. Select pinning on the physics cloth tab and select the vertex group just below this.  Turn gravity back on. and possibly increase the "Mass" of the cloth to say 0.1. When the cloth simulation is run, These vertices will be pinned in place and the outer edge of the mesh will drape under gravity. After applying the cloth modifier turn the object over so the drapes now go upwards.&lt;/p&gt;
&lt;p&gt;&lt;img alt="draped coral" src="./images/coral_node_draped.png" /&gt;&lt;/p&gt;
&lt;p&gt;All the objects in the top image were created from hyperbolic planes made from this node.&lt;/p&gt;
&lt;p&gt;The six parameters in the node change the structure of the surface. Fiddle with them until you get something with the amount of ruffle you like.&lt;/p&gt;
&lt;p&gt;"p1" and "p2" give the number of increases in each ring. For example "p1 = 2" and "p2 = 3" means that the vertices in a ring will alternate having 2 edges going to the next ring and 3 edges going to the next largest ring.&lt;/p&gt;
&lt;p&gt;"n points" gives the number of points in the first ring.&lt;/p&gt;
&lt;p&gt;"n rings" gives the number of ever larger rings.&lt;/p&gt;
&lt;p&gt;"r spacing" gives the radial distance between the rings.&lt;/p&gt;
&lt;p&gt;"t spacing: gives the spacing between vertices in the same ring.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Structure Synth meets Sverchok - Animation</title><link href="http://www.elfnor.com/structure-synth-meets-sverchok-animation.html" rel="alternate"></link><updated>2015-03-22T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-03-22:structure-synth-meets-sverchok-animation.html</id><summary type="html">&lt;p&gt;&lt;img alt="still from fern  animation" src="./images/fern_anim_still_05.png" /&gt;&lt;/p&gt;
&lt;p&gt;Update: This lsystem/Structure Synth code has now (March 2016) been incorporated into the Sverchok &lt;em&gt;Generative Art&lt;/em&gt; node. See the &lt;a href="http://www.elfnor.com/generative-art-updated-examples.html"&gt;updated examples&lt;/a&gt; and the &lt;a href="http://www.elfnor.com/generative-art-sverchok-node-update.html"&gt;node docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the previous two posts (&lt;a href="http://www.elfnor.com/structure-synth-meets-sverchok-generative-art-inside-blender.html"&gt;Generative Art in Blender&lt;/a&gt; and &lt;a href="http://www.elfnor.com/structure-synth-meets-sverchok-mesh-mode.html"&gt;Mesh Mode&lt;/a&gt; I introduced the &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; scripted node I'd written to implement &lt;a href="http://structuresynth.sourceforge.net/"&gt;Structure Synth&lt;/a&gt; generative art or lsystems inside Blender.&lt;/p&gt;
&lt;p&gt;Following &lt;a href=""&gt;Martinius's suggestion&lt;/a&gt; I've now exposed parameters in the xml rule definition to the Sverchok node tree so we can do animation of Structure Synth lsystems inside Blender.&lt;/p&gt;
&lt;p&gt;Here's an example:&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/123063760?title=0&amp;byline=0&amp;portrait=0" width="500" height="375" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://vimeo.com/123063760"&gt;Pounamu Fern Animation&lt;/a&gt; from &lt;a href="https://vimeo.com/user38620121"&gt;elfnor&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;As before, to use the generative art node in Blender first install the &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; addon. Download the lsystem code from &lt;a href="https://github.com/elfnor/lsystem"&gt;github&lt;/a&gt;. Then load the three python files in the Blender directory (&lt;code&gt;LSystem_blender.py, GA_xml.py, GA_node.py&lt;/code&gt;) as separate text blocks into a blend file. Add a "Scripted Node" to a Sverchok node tree. On the node select the &lt;code&gt;GA_node.py&lt;/code&gt; code from the lower drop down. Then click the plugin icon to the right of this field. The node should turn blue with some inputs and outputs.&lt;/p&gt;
&lt;p&gt;The latest version now has an additional input "variables". &lt;/p&gt;
&lt;p&gt;The first step to animating the lsystem is to edit the lsystem definition in the xml text in &lt;code&gt;GA_xml.py&lt;/code&gt; to define which values becomes variables. The value for any of the transforms in the file can be replaced with a pair of curly braces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;transforms = &amp;quot;tx 0.5 rx 20 sa 0.9&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;transforms = &amp;quot;tx {} rx 20 sa 0.9&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To illustrate this here is the xml definition and the node diagram for the fern animation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Library[&amp;quot;FernVars&amp;quot;] = &amp;quot;&amp;quot;&amp;quot;
&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2000&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
       &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;      
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;60&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx {} tz 1.5 s 0.9 0.9 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;        
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;40&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx {} tz 1.5 s 0.9 0.9 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.1 ty -0.45 ry 40 sa 0.25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;     
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;    

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;40&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 2*{} tz 2.7 s 0.9 0.9 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;     
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;    
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="node diagram for fern animation" src="./images/GA_Fern_animation_03.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;For this animation the index number of the current frame in the animation is translated from the range 1 to 250 to the range 16 to 6 via the formula node  and wired into the "variables" input of the "GA_node". This cause the fern to unwind as the animation proceeds. The separate objects are joined into one using the "Mesh Join" node and this output sent to the "Bmesh Viewer Draw" node. &lt;/p&gt;
&lt;p&gt;If you want to animate more than one parameter use index numbers (starting with 0) inside the braces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;transforms = &amp;quot;tx {0} rx {1} sa {2}&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With multiple parameters a "List Join" node is used to make a list to use as the "variables" input of the "GA_node".&lt;/p&gt;
&lt;p&gt;&lt;img alt="node diagram with list join" src="./images/GA_node-variables_attributes.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;If not enough variables are provided the last one is repeated as many times as required.&lt;/p&gt;
&lt;p&gt;Simple maths can also be use in the transforms definition. This has been used above in the "curlsmall" rule. The rx rotation of the transform will always be twice that of the rx rotation in the "curl1" and "curl2" rules.&lt;/p&gt;
&lt;p&gt;There cannot be any spaces in any maths expressions for the rotation, translation or scale parameters when using a transforms attribute string as above.  Instead of listing all the transforms in one attribute string each transform can now have its own string. This allows more complicated expressions to be included. &lt;/p&gt;
&lt;p&gt;transforms as single attribute (no spaces allowed in maths expression)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;call transforms=&amp;quot;tx 1 rz -1*{0} ry {1}&amp;quot; rule=&amp;quot;R1&amp;quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;each transform with its own attribute (can have spaces)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;call tx=&amp;quot;1&amp;quot; rz=&amp;quot;-1 * {0}&amp;quot; ry=&amp;quot;{1}&amp;quot; rule=&amp;quot;R1&amp;quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All this is implemented by first using python's string format method to substitute in the variable value from the node input. Then the resulting string is passed to python's &lt;code&gt;eval()&lt;/code&gt; function. The string must evaluate to a single number (float or integer). Using &lt;code&gt;eval()&lt;/code&gt; is a potential security problem as in theory someone could put some malicious code inside an xml lsystem definition. As always don't run code from a source you don't trust.&lt;/p&gt;
&lt;p&gt;Only the transforms that take a single number that is tx, ty, tz, rx, ry, rz, sx, sy, sz and sa have been implemented using individual attributes. The ones that use triplets to specify all three translations or scales at once (t and s) can only be used in a transform string.&lt;/p&gt;
&lt;p&gt;There's room to do some very clever stuff using this ability to put short bits of code in the xml... &lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="structuresynth"></category></entry><entry><title>Structure Synth meets Sverchok - Mesh mode</title><link href="http://www.elfnor.com/structure-synth-meets-sverchok-mesh-mode.html" rel="alternate"></link><updated>2015-03-15T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-03-15:structure-synth-meets-sverchok-mesh-mode.html</id><summary type="html">&lt;p&gt;&lt;img alt="pounamu fern" src="./images/fern_30.png" /&gt;&lt;/p&gt;
&lt;p&gt;Update: This lsystem/Structure Synth code has now (March 2016) been incorporated into the Sverchok &lt;em&gt;Generative Art&lt;/em&gt; node. See the &lt;a href="http://www.elfnor.com/generative-art-updated-examples.html"&gt;updated examples&lt;/a&gt; and the &lt;a href="http://www.elfnor.com/generative-art-sverchok-node-update.html"&gt;node docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the previous &lt;a href="http://www.elfnor.com/structure-synth-meets-sverchok-generative-art-inside-blender.html"&gt;post&lt;/a&gt; I introduced the &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; scripted node I'd written to implement &lt;a href="http://structuresynth.sourceforge.net/"&gt;Structure Synth&lt;/a&gt; generative art or lsystems inside Blender.&lt;/p&gt;
&lt;p&gt;In this post I'll cover a couple of features I've added to the basic node.&lt;/p&gt;
&lt;h2&gt;Mask output&lt;/h2&gt;
&lt;p&gt;An xml rule set for the lsystem can have different objects in different instances. In the xml below there are two versions of the "R1" rule. These will be called randomly. The two different rules have opposite signs for the "ry" transform. This will cause wobbles in the structure. When it wobbles one way "s1" is added to the list of shapes and when it wobbles the other way "s2" is added.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 3.6&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sa 0.9 ry 6 tz 1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s 0.2 0.5 1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sa 0.9 ry -6 tz 1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s 0.2 0.5 1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The names of these objects don't matter, they can be called anything in the xml.&lt;code&gt;LSystem_blender.py&lt;/code&gt; passes the names to the node as strings. The node then converts these strings to integers (that is (0, 1) for two different objects, (0, 1, 2) for three objects etc.). This mask can be used as input to a "Mask List" node to separate the matrices into two lists as shown below. This is simple for two objects but is a bit more complicated but doable for more.&lt;/p&gt;
&lt;p&gt;The "Levels List" on the "Mask List" node needs to be set to "2". That is because the outputs of the GA_node have been set up as a 2 level list. The first level corresponds to each arm of sub-part of the structure. The second level contains the actual output values. Examine the output with a "Viewer Text" node to help understand this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GA node diagram with mask list" src="./images/mask_demo_01.blend.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Mesh output&lt;/h2&gt;
&lt;p&gt;Using the matrices output allows a separate object to be placed at each location. The vertices input and the mesh (vertices, edges, faces) output "skins" the mesh into a much smaller number of objects. The vertices input should be a list of vertices such as that generated by the "Circle" node. It could also be a circle type object taking from the scene using the "Objects In" node. The list of vertices should be in order so they can be made into a ring with the last vertex joined to the first. That ring dosen't have to be planar.&lt;/p&gt;
&lt;p&gt;If the vertices are taken from an object in the scene the vertices can be repositioned in "EDIT" and the structure updated by going to "OBJECT" mode then clicking the "Update Node Tree" button.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GA tube nodes and render/screenshot" src="./images/Fern.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;The output will not always be one mesh. If the rule set ends one 'arm' and goes back to start another 'arm' these two sub-parts will be separate meshes. Sometimes the mesh does not turn out how you would like. This can often be fixed by changing the rule set. &lt;/p&gt;
&lt;p&gt;Often a mesh tube will turn out flat rather than being tube like. This can usually be fixed by either rotating the vertex ring in the scene or by adding a rotation transform to the "instance" commands in the rule set. &lt;/p&gt;
&lt;p&gt;For example change &lt;code&gt;&amp;lt;instance shape="s1"/&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;instance transfroms="ry 90" shape="s1"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In other cases the mesh can be connected in the wrong order.&lt;/p&gt;
&lt;p&gt;My first attempt at the Fern structure had this effect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2000&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;      
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 12.5 tz 0.9 s 0.98 0.95 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;       
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.1 ty -0.45 ry 40 sa 0.25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 25 tz 1.2 s 0.9 0.9 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;     
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="fern wrong" src="./images/fern_wrong.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;The following xml produces the result I was after that's shown with the node diagram above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2000&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt;  &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;      
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 12.5 tz 0.9 s 0.98 0.95 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;        
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 12.5 tz 0.9 s 0.95 0.95 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curl2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 0.1 ty -0.45 ry 40 sa 0.25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;     
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;    

    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx 25 tz 1.2 s 0.9 0.9 1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;curlsmall&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;     
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;    
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both sets of xml rules produce the same list of matrices just in a different order.&lt;/p&gt;
&lt;p&gt;The mesh output is very useful as further mesh operations or modifiers such as "Subdivision Surface" can then be used. Sub meshes can be joined together (CTRL-J) or booleans are sometimes successful if a single mesh is really required.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="structuresynth"></category></entry><entry><title>Structure Synth meets Sverchok - Generative Art inside Blender</title><link href="http://www.elfnor.com/structure-synth-meets-sverchok-generative-art-inside-blender.html" rel="alternate"></link><updated>2015-03-08T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-03-08:structure-synth-meets-sverchok-generative-art-inside-blender.html</id><summary type="html">&lt;p&gt;&lt;img alt="Nouveau Dr Seuss" src="./images/seuss_nouveu_11.png" /&gt;&lt;/p&gt;
&lt;p&gt;Update: This lsystem/Structure Synth code has now (March 2016) been incorporated into the Sverchok &lt;em&gt;Generative Art&lt;/em&gt; node. See the &lt;a href="http://www.elfnor.com/generative-art-updated-examples.html"&gt;updated examples&lt;/a&gt; and the &lt;a href="http://www.elfnor.com/generative-art-sverchok-node-update.html"&gt;node docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After using the &lt;a href="http://www.elfnor.com/simple-sverchok-05-interpolate-and-iterate-matrix.html"&gt;"Matrix Iterate"&lt;/a&gt; node to generate some of the simpler structures from &lt;a href="http://structuresynth.sourceforge.net/"&gt;Structure Synth&lt;/a&gt;. I started to think about how to implement more of Structure Synth directly in Blender. It turned out to be remarkably simple using a scripted node and some existing python code.&lt;/p&gt;
&lt;p&gt;Structure Synth uses a domain specific language called eisenscript to define a design grammar to construct 3D structures (LSystems). Here's the eisenscript for a structure with 6 spirals.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set maxdepth 400

r0

rule r0 {
  3 * { rz 120  } R1
  3 * { rz 120 } R2
}

rule R1 {
  { x 1.3 rx 1.57 rz 6 ry 3 s 0.99} R1
  { s 4 } sphere
}

rule R2 {
  { x -1.3 rz 6 ry 3 s 0.99} R2
  { s 4 }  sphere
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="matrix iterate sample image" src="./images/matrix_iterate_13.png" /&gt;&lt;/p&gt;
&lt;p&gt;An eisenscript consists of a list of rules. Each rule contains a set of instructions. That instruction can either be to place an object or to call another rule. That call can be to to the rule doing the calling in a recursive fashion. Each instruction also has an associated transform to scale rotate or move the current coordinate system. The original eisenscript also allowed transforms on the colour and transparency of the object.&lt;/p&gt;
&lt;p&gt;The above structure can be easily implemented in Sverchok using the "Matrix Iterate" node as shown in the &lt;a href="http://www.elfnor.com/simple-sverchok-05-interpolate-and-iterate-matrix.html"&gt;previous post&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The interesting bit is that each rule can have multiple definitions that are called randomly according to the weight assigned to each rule definition. This allows structures with random branches and other complexities. This random choice of rule is bit harder to implement directly in Sverchok nodes but I'm thinking about it...&lt;/p&gt;
&lt;p&gt;In the meantime searching the web, I couldn't find anyone who had included a parser for eisenscript files in Blender (there is one in &lt;a href="http://meshlab.sourceforge.net/"&gt;MeshLab&lt;/a&gt;), but I did find that &lt;a href="http://github.prideout.net/"&gt;Little Grasshopper&lt;/a&gt; (aka Philip Rideout) had written some &lt;a href="https://github.com/prideout/lsystem"&gt;scripts&lt;/a&gt; in python go and c++ to work with Structure Synth type LSystems and RenderMan. &lt;/p&gt;
&lt;p&gt;He uses an xml form of eisenscript to define the design grammar. The above script looks like this in Philip's xml:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt; &lt;span class="na"&gt;max_depth=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 120&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rz 120&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx 1.3 rx 1.57 rz 6 ry 3 sa 0.99&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sa 4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sphere&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;call&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx -1.3 rz 6 ry 3 sa 0.99&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rule=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;R2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;instance&lt;/span&gt; &lt;span class="na"&gt;transforms=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sa 4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sphere&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From Little Grasshopper's &lt;a href="http://prideout.net/blog/?p=44"&gt;post&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every description must contain at least one rule named entry; this is the starting point for the evaluator. Note the mini-language used for specifying transformations. It’s a simple string consisting of translations, rotations, and scaling operations. For example, &lt;code&gt;tx n&lt;/code&gt;  means “translate n units along the x-axis”, &lt;code&gt;ry theta&lt;/code&gt;  means “rotate theta degrees about the y-axis”, and &lt;code&gt;sa f&lt;/code&gt; means “scale all axes by a factor of f“.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Philip's github &lt;a href="https://github.com/prideout/lsystem"&gt;repo&lt;/a&gt; he provides a python module (&lt;code&gt;LSystem.py&lt;/code&gt;) that parses the above type of xml strings and outputs a list of matrices and the name of the object to place at the location, scale and rotation defined by the matrix. This code is beautifully separated from any code used to implement or render the geometry and is perfect to incorporate in &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The module &lt;code&gt;LSystem.py&lt;/code&gt; has two dependencies, &lt;code&gt;elementtree&lt;/code&gt; for parsing the xml and &lt;code&gt;euclid&lt;/code&gt; for the matrix multiplication. I replaced &lt;code&gt;elementtree&lt;/code&gt; with &lt;code&gt;xml.etree.cElementTree&lt;/code&gt; avaliable in the standard python included with Blender, and replaced &lt;code&gt;euclid&lt;/code&gt; with the Blender &lt;code&gt;mathutils&lt;/code&gt; module. &lt;/p&gt;
&lt;p&gt;I also added a break to the code on reaching maximum number of objects as I kept crashing/locking Blender/Sverchok when I got more then a few 10s of thousands of objects. &lt;/p&gt;
&lt;p&gt;From there all we need is a simple "Scripted Node" in Sverchok with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sverchok.data_structure&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Matrix_listing&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;LSystem_blender&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;LSystem&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;GA_xml&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;

&lt;span class="n"&gt;max_mats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sv_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rseed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;in_sockets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rseed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rseed&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

    &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GA_xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GA_xml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;lsys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LSystem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LSystem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_mats&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;shapes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lsys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rseed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;mats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;shapes&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="n"&gt;mat_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Matrix_listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mats&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;out_sockets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;matrices&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mat_out&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;in_sockets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_sockets&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: The node code above is given to show how simple a Sverchok scripted node can be. I have since updated the code on my repository to do some other stuff.&lt;/p&gt;
&lt;p&gt;See &lt;a href="http://sverchok.readthedocs.org/en/latest/nodes/generator/scripted_intro.html"&gt;here&lt;/a&gt; if you need help working with the "Scripted Node" in Sverchok.&lt;/p&gt;
&lt;p&gt;That was too simple and it just works! It's fast too. Before doing this I played around trying to implement the object generation directly in Blender python and had trouble getting fast enough code, let alone getting lost in &lt;code&gt;bpy.ops&lt;/code&gt; and &lt;code&gt;bpy.context&lt;/code&gt; calls.&lt;/p&gt;
&lt;p&gt;The latest version of &lt;code&gt;LSystem_blender.py&lt;/code&gt; and my Sverchok nodes is available on my github &lt;a href="https://github.com/elfnor/lsystem"&gt;repo&lt;/a&gt; (forked from prideout/lsystem).&lt;/p&gt;
&lt;p&gt;To use the GA node in Blender first install the &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; addon. Download the lsystem code from &lt;a href="https://github.com/elfnor/lsystem"&gt;github&lt;/a&gt;. Then load the three python files in the Blender directory (&lt;code&gt;LSystem_blender.py, GA_xml.py, GA_node.py&lt;/code&gt;) as separate text blocks into a blend file. Add a "Scripted Node" to a Sverchok node tree. On the node select the &lt;code&gt;GA_node.py&lt;/code&gt; code from the lower drop down. Then click the plugin icon to the right of this field. The node should turn blue with some inputs and outputs. Wire the matrices output to a "Viewer Draw" node and you should see some geometry as below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GA node diagram" src="./images/Lsystem_pipe_05.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;The node has an input "rseed" which is used to set the random number generator. For a rule set that includes multiple definitions of rules, changing this will change the structure. &lt;/p&gt;
&lt;p&gt;The Library of xml rule sets is stored in the &lt;code&gt;GA_xml.py&lt;/code&gt; module. This allows you to easily change the rule set. In the last line of code &lt;code&gt;Library["Default"] = Library["Tree"]&lt;/code&gt; change &lt;code&gt;Tree&lt;/code&gt; to any of the other examples. You can also change the rules or add new ones. The geometry should change in the 3D View after clicking the "Update Node Tree" button in the Sverchok panel.&lt;/p&gt;
&lt;p&gt;My computer chokes if I try to feed too many matrices into Sverchok. The &lt;code&gt;max matrices&lt;/code&gt; sets a limit in the node to the number of matrices calculated and displayed. Change this depending on you and your computer's ability to cope with lockups and crashes. Note that the nodes get recalculated when you open a blend file. Saving a blend file with an LSystem that has a long calculating time will make it slow to open.&lt;/p&gt;
&lt;p&gt;Using the matrices output allows a separate object to be placed at each location. The vertices input and the mesh (vertices, edges, faces) output "skins" the mesh into a much smaller number of objects. The mask node can be used if the rule set has more than one type of object. I'll describe these further in the next post but here's a preview of the mesh mode (with a subdivison modifier applied).&lt;/p&gt;
&lt;p&gt;&lt;img alt="GA tube nodes and render/screenshot" src="./images/Fern.blend.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category><category term="structuresynth"></category></entry><entry><title>Shaders for Sverchok 03 - Image Texture Node</title><link href="http://www.elfnor.com/shaders-for-sverchok-03-image-texture-node.html" rel="alternate"></link><updated>2015-03-07T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-03-07:shaders-for-sverchok-03-image-texture-node.html</id><summary type="html">&lt;p&gt;&lt;img alt="random desert blocks" src="./images/random_block_image_pos9.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is the third of my Shaders for Sverchok tutorials. They follow on from  my &lt;a href="http://elfnor.com/tag/sverchok.html"&gt;Simple Sverchok&lt;/a&gt; series. The Shaders for Sverchok posts are mostly about Blender Cycles Materials and how I apply them to my &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; models rather than directly about Sverchok nodes.&lt;/p&gt;
&lt;p&gt;This post will show how to take the colours from an image and apply them to objects in a scene. It uses the object location given by the "Object Info" node, but see &lt;a href=""&gt;Shaders for Sverchok 01&lt;/a&gt; for other ways to use this node.  Of course this technique is useful for scenes with lots of objects generated by the dupliverts for example. Its a great way to try out different colour schemes on a scene very quickly.&lt;/p&gt;
&lt;p&gt;The cycles nodes for this is very simple.&lt;/p&gt;
&lt;p&gt;&lt;img alt="position to image nodes" src="./images/random_blocks_blog1.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;The object position is fed into the vector input of an "Image Texture" node via a "Mapping" node. As usual the input of the vector for the "Image Texture" node should be between (0, 0, 0) and (1, 1, 1). The colour at the top right of the image will be accessed with a vector  (1, 1, 0). The colour of the image at the bottom left will be accessed with a vector (0, 0, 0). Use the mapping node to change the location vectors into this range. If the values are outside the range they will loop around as if the image was tiled. For example (0.2, 0.2, 0) and (1.2, 1.2, 0) will map to the same place in the image. &lt;/p&gt;
&lt;p&gt;It makes sense to use the "Point" option of the "Mapping" node. With this option&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;output = Scale * input + Location
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Texture, Vector and Normal options do other things. To rotate the image colours about the scene use the "Z" value of the rotation field.&lt;/p&gt;
&lt;p&gt;Choose the image to use in the "Image Texture" node. This can be something especially created for the scene to paint particular colours to particular objects, the output of some other Blender render, or a landscape or other photo chosen for its colour balance.&lt;/p&gt;
&lt;p&gt;The alpha channel of the image can be used to effect transparency or any other input in the cycles nodes.&lt;/p&gt;
&lt;p&gt;It's possible to quickly change the colour scheme of a composition to try out different looks or to have very fine detail control of object colour by drawing over a render or screenshot of the scene taken looking down from +Z.&lt;/p&gt;
&lt;hr /&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Shaders for Sverchok 02 - Vertex Colors</title><link href="http://www.elfnor.com/shaders-for-sverchok-02-vertex-colors.html" rel="alternate"></link><updated>2015-02-26T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-02-26:shaders-for-sverchok-02-vertex-colors.html</id><summary type="html">&lt;p&gt;&lt;img alt="nested cubes demo of sverchok vertex colors" src="./images/vertex_color_blog_21.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is the second of my Shaders for Sverchok tutorials. They follow on from  my &lt;a href="http://elfnor.com/tag/sverchok.html"&gt;Simple Sverchok&lt;/a&gt; series. The Shaders for Sverchok posts are mostly about Blender Cycles Materials and how I apply them to my &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; models rather than directly about Sverchok nodes.&lt;/p&gt;
&lt;p&gt;This post will show how to apply vertex colors to a mesh with Blender python and then how to access the vertex color map to apply color or other variation to a material in Blender cycles.&lt;/p&gt;
&lt;p&gt;From this &lt;a href="http://blenderartists.org/forum/showthread.php?272679-Addon-WIP-Sverchok-parametric-nodes-for-architects&amp;amp;p=2813513&amp;amp;viewfull=1#post2813513"&gt;sneak preview&lt;/a&gt; it looks like Vertex Colors may be avaliable soon as Sverchok node, but currently I use a short bit of code to cover this step. I'll update this post when the node becomes available in a general release.&lt;/p&gt;
&lt;p&gt;Using vertex colors is easiest if the Sverchok output is a single mesh. If after baking your Sverchok output you have multiple meshes try the "Apply matrix to mesh" node or occasionally the "Mesh Join" node to consolidate everything into one mesh. It is also possible to select the objects after creation and join them with CTRL-J. I prefer using the "Apply Matrix" node as this preserves the creation order of the mesh elements. &lt;/p&gt;
&lt;p&gt;Vertex colors are normally applied by painting them on in "Vertex Paint" mode. To get them to show as painted in Blender cycles use a material as shown below. The "Attribute" node is found on the "Input" panel of the cycles nodes. The "Name" has to be set to the same as the name of the "Vertex Colors" layer found under the Objects Data panel.&lt;/p&gt;
&lt;p&gt;&lt;img alt="vertex color in blender" src="./images/vertex_colors_screen.png" /&gt;&lt;/p&gt;
&lt;p&gt;Rather than paint on our colors we're going to assign them to the vertices using Blender python. Each vertex in each face has its own vertex color. This means a vertex can have several different colors, one for each face it's on. The following code snippet gives a different vertex color for each sub-element of a mesh. Say for instance we've used a "Matrix Iterate" node to make 11 copies of a Box (10 iterations produces 11 copies). Then the code snippet will make all the vertices in each box the same color but each box will have a different color.&lt;/p&gt;
&lt;p&gt;&lt;img alt="nested boxes nodes" src="./images/nested_box_nodes.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;set vertex color to shades of grey, each cube in sverchok structure has its own shade&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="c"&gt;# start in object mode with object selected&lt;/span&gt;
&lt;span class="c"&gt;#need to set N to the number of sub-elements in mesh&lt;/span&gt;
&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="c"&gt;# no of elements&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_object&lt;/span&gt;
&lt;span class="n"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertex_colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertex_colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;color_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertex_colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;

&lt;span class="n"&gt;nvert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
&lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;poly&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polygons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;poly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop_indices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;nvert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;nvert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;nvert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;color_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before running the above code you need to set N in line 9 of the code to the number of sub-elements in the mesh. The code sets each sub-element to a shade of grey. You can fiddle with the code to produce different vertex colors, but I prefer to manipulate the color later with cycles nodes as this give me more flexibility.&lt;/p&gt;
&lt;p&gt;After running the code check in the Objects data panel to find the name of the vertex color layer. By default its "Col". Use this in a attribute node to access the values for the vertex color. This color can then be separated out into rgb components and used to vary the material properties across the sub-elements in the mesh. In the node diagram below it's used to control the "fac" of a "Mix Shader" to mix between two materials.&lt;/p&gt;
&lt;h2&gt;&lt;img alt="vertex color node mix" src="./images/nested_box_cycles_nodes.png" /&gt;&lt;/h2&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Shaders for Sverchok 01 - Object Info node.</title><link href="http://www.elfnor.com/shaders-for-sverchok-01-object-info-node.html" rel="alternate"></link><updated>2015-02-22T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-02-22:shaders-for-sverchok-01-object-info-node.html</id><summary type="html">&lt;p&gt;&lt;img alt="hydrangea abstract" src="./images/abstract_21.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've called this post Shaders for Sverchok and it follows on from  my &lt;a href="http://elfnor.com/tag/sverchok.html"&gt;Simple Sverchok&lt;/a&gt; series. It's mostly about Blender Cycles Materials and how I apply them to my &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; models rather than directly about Sverchok nodes.&lt;/p&gt;
&lt;p&gt;The structures I've been producing with Sverchok can have many elements. The one that featured in the title image for the &lt;a href="http://www.elfnor.com/simple-sverchok-05-interpolate-and-iterate-matrix.html"&gt;last post&lt;/a&gt; has 2400 copies of the box element. With the position, rotation and scale of each object being varied parametrically it would be neat to also systematically vary the colour or transparency of the elements. Applying individual materials to 2400 elements by hand is well beyond my pain threshold. The techniques used here to make systematic or random material variations can also be used for models with many elements produced in other ways, for example using dupliverts.&lt;/p&gt;
&lt;h1&gt;Object Info Node&lt;/h1&gt;
&lt;p&gt;Change the Node Editor window to show Shaders (materials). Make sure Cycles is chosen as the render engine. Start with an "Object Info" node ("Add &amp;gt; Input &amp;gt; Object Info"). This gives information  about the object or objects a Material is applied to. If the elements you want to shade are combined into a single mesh they will need to be separated. In edit mode a mesh can be separated into objects by hitting "P" and selecting "By loose parts".  It's a good idea to apply a material to the mesh before separating parts. This way all parts will have the same material which can be edited later. It is also possible to separate loose parts using the "Separate Loose Parts" node. &lt;/p&gt;
&lt;p&gt;Tip: In Blender if you need to apply the same material to lots of different objects, join them together, apply the material and then separate by parts again.&lt;/p&gt;
&lt;h2&gt;Location based Shading&lt;/h2&gt;
&lt;p&gt;The first output of the "Object Info" node is location. This gives the (x, y, z) coordinates of the object the material is applied to. Unfortunately the Shader nodes do not have the wonderfully useful "Viewer text" and "Stethoscope" nodes that Sverchok does. Without these we're running a bit blind and have to read the documentation a bit more and do lots of small bits of math.&lt;/p&gt;
&lt;p&gt;If the elements you want to shade were separated from a single mesh they may all have the same location. To fix this, select all the objects and "Object &amp;gt; Transform &amp;gt; Origin to Geometry". This will give each object its own location at the centre of its own mesh.&lt;/p&gt;
&lt;p&gt;The location of the object can be sent directly to the color input of any shader node. However the shader node expects the RGB values to be between 0 and 1. One easy way to do this is rescale your scene so that all the geometry lies in a box between (0, 0, 0) and (1, 1, 1). The colour of objects in this space will shade from black at the (0, 0, 0) corner to white at the far (1, 1, 1) corner. Objects in the (1, 0, 0) corner will be red and so on. In the following scene all objects have the same material. The wireframe cube extends from (0, 0, 0) to (1, 1, 1). It is a neutral grey colour because its location is (0.5, 0.5, 0.5). &lt;/p&gt;
&lt;p&gt;&lt;img alt="spiral in color cube" src="./images/spirals_in_color_cube_01.png" /&gt;&lt;/p&gt;
&lt;p&gt;Rather than scaling the geometry to lie within the (0,0,0) to (1,0,0) box we can scale the x, y, z coordinates within our node diagram.&lt;/p&gt;
&lt;p&gt;In the following scene the spheres (dupliverted onto a torus) have locations from -1.25 to +1.25 in x and y and from -0.25 to +0.25 in z. We can use the Vector mapping node to transform these location values to the interval (0, 1).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;r = 0.4 * x + 0.5
g = 0.4 * x + 0.5
b = 2.0 * x + 0.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Strange things happen when the rgb values are not within the range (0, 1). The top torus has no scaling bewteen the location and color while the torus on the bottom has the rgb values between (0, 1).&lt;/p&gt;
&lt;p&gt;EDIT: Jerryno's answer to my &lt;a href="http://blender.stackexchange.com/questions/26254/how-and-when-does-clipping-of-rgb-values-happen"&gt;question&lt;/a&gt; on stack exchange explains these strange things very well. &lt;/p&gt;
&lt;p&gt;&lt;img alt="torus location to rgb" src="./images/torus_color.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can also use the location as an index into a "Color Ramp" node. This requires reducing the three x, y, z coordinates to a single value between (0, 1). &lt;/p&gt;
&lt;p&gt;For instance we can shade our torus radially by calculating:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;radius = sqrt(x^2 +y^2 + z^2) to give radius between (0.75 and 1.25)

fac = 2*radius - 1.5 to give fac between (0, 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These calculations can be done a number of ways. Here I have used the "Normalize" node to give the radius and two "Math" nodes to do the scaling.&lt;/p&gt;
&lt;p&gt;&lt;img alt="torus radial color" src="./images/torus_radial.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Object Pass Index&lt;/h2&gt;
&lt;p&gt;The second output of the "Object Info" node is labeled "Object Index". This is the same parameter that is called "Pass Index" on the Object Relations Panel. It can be set in the Objects Relations panel or in python using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#set each of the selected objects to a separate pass index&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selected_objects&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pass_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again for input to most material nodes the pass index value will need to be scaled so it is in the interval (0, 1).&lt;/p&gt;
&lt;h2&gt;Material Pass Index&lt;/h2&gt;
&lt;p&gt;The third output of the "Object Info" node is labeled "Material Index". This output name is a little confusing as Blender has two different pass indexes (object and material) and two different material indexes (the pass index of the material and the material index of a face). Below I give an example of how to use it.  It's not that useful for scenes with a large number of objects as it requires a lot of manual steps but I've explained it here because I couldn't find a good example of using the material index of the Object info node anywhere else.&lt;/p&gt;
&lt;p&gt;The "Material Index" output of the "Object Info" node is the same parameter that is called "Pass Index" on the Settings panel of a material. &lt;/p&gt;
&lt;h3&gt;Example use of the "Material Index" of the "Object Info" node.&lt;/h3&gt;
&lt;p&gt;This uses three materials but of course you can create as many materials as required.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start with the default cube scene and set the render engine to cycles.&lt;/li&gt;
&lt;li&gt;Create a node material such as the "mat1" shown below that uses the "Material Index" output of the "Object Info" node.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="mat1 node setup" src="./images/material_index_blog-03.blend.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select all the nodes except the "Object Info" and "Material Output" and group them&lt;/li&gt;
&lt;li&gt;Use the "go to parent node tree" button at the bottom to collapse the node group. To edit it again click on the button at the top right of the node group&lt;/li&gt;
&lt;li&gt;Select all three nodes showing and copy them to the clipboard (Ctrl-C)&lt;/li&gt;
&lt;li&gt;Create a new material and call it "mat2"&lt;/li&gt;
&lt;li&gt;Delete any nodes in the material and paste (Ctrl-V) our nodes to the material&lt;/li&gt;
&lt;li&gt;Repeat the last two steps labeling the material "mat3"&lt;/li&gt;
&lt;li&gt;You should now have 3 materials that all use the same node group. Check that there is a 3 in the number of users for the node group.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="mat1 as node group" src="./images/material_index_blog-04.blend.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select an object and give it three material slots. Place the corresponding material in each slot.&lt;/li&gt;
&lt;li&gt;For each material set the pass index to 1 , 2, or 3. (Under Materials - Settings panel).&lt;/li&gt;
&lt;li&gt;As you do this the small icon beside the material slot should change color to match the color determined by the pass index&lt;/li&gt;
&lt;li&gt;In edit mode select different faces of the object and assign a material from one of the slots.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="material index result" src="./images/material_index_blog-05.blend.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Random Shading&lt;/h2&gt;
&lt;p&gt;The fourth output of the "Object Info" node is labeled  "Random". It produces a different random number between (0, 1) for each object the material is assigned to.&lt;/p&gt;
&lt;p&gt;It can be used directly as input to a "Color Ramp" node or anywhere else a single value is required. &lt;/p&gt;
&lt;p&gt;&lt;img alt="random color ramp" src="./images/color_random.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Simple Sverchok 05 - Interpolate and Iterate Matrix</title><link href="http://www.elfnor.com/simple-sverchok-05-interpolate-and-iterate-matrix.html" rel="alternate"></link><updated>2015-01-31T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-01-31:simple-sverchok-05-interpolate-and-iterate-matrix.html</id><summary type="html">&lt;p&gt;&lt;img alt="matrix iterate sample image" src="./images/matrix_iterate_13.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is part five of my introduction to &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; the parametric node geometry add-on for Blender. Other parts can be found &lt;a href="http://elfnor.com/tag/sverchok.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So far we've used various nodes to produce list of matrices that we've used to give the location, scale and rotation of objects. This post continues that idea.&lt;/p&gt;
&lt;p&gt;The "Matrix Interpolation" node takes one or two matrices as input and produces a list of matrices that describe transformations interpolated between the two matrices. If only one matrix is input the identity matrix (no transform) is used for the other matrix. This is great for example to make a whole line of objects.&lt;/p&gt;
&lt;p&gt;&lt;img alt="matrix interpolate nodes sverchok" src="./images/matrix_interpolate_nodes.png" /&gt;&lt;/p&gt;
&lt;p&gt;The input matrix could also include a scale and rotation.&lt;/p&gt;
&lt;p&gt;The "Matrix Interpolation" node can also be used to produce a list of identity matrices that are then altered by a "Matrix Deform" node. This allows non-linear variation in the object scales and rotations as shown in the example below. Here we've produced 21 identity matrices. The "Map Range" Node is used to change the values from the "Float Series" from 0 to 5 (used for the locations) to 0 to 360 (used for the angle of rotation about the Z axis). The same range is also mapped to the interval 0 to pi. The sine of this function is then used to scale the objects in the y direction.&lt;/p&gt;
&lt;p&gt;&lt;img alt="matrix interpolate node identity sverchok" src="./images/matrix_interpolation_map_03.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;EDIT: We don't really need to use a "Matrix Interpolation" node in the above example. We can replace the "Matrix Deform" node with a "Matrix In" node as shown below and acheive the same result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="matrix in nodeverchok" src="./images/matrix_interpolation_map_04.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;If we want to scale and shift the objects in the same direction, for example produce a stack of diminishing sized cubes sitting on top of each other, we can't do it with linear interpolation. In the image below the gaps between each cube centre are the same size. If the cubes are to sit on top of each other the gap has to decrease along with the cube size. &lt;/p&gt;
&lt;p&gt;&lt;img alt="matrix interpolate pyramid sverchok" src="./images/pyramid_interpolate_01.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;If we scale the 1st cube (size 2 units) by 0.75 to get our 2nd cube (size 1.5 units) we then need to move the 2nd cube 1.75 units to stack it on top of the 1st cube. What we need to do here is apply a transform matrix M that does a 0.75 scale and a 1.75 unit translation to the 1st object to get our second object.&lt;/p&gt;
&lt;p&gt;V2 = M * V1&lt;/p&gt;
&lt;p&gt;Then we apply the same transform again to V2 to get V3&lt;/p&gt;
&lt;p&gt;V3 = M * V2&lt;/p&gt;
&lt;p&gt;and so on. This will stack the cubes nicely on top of each other. Since version 0.5.1.0 Sverchok has a "Iterate Matrix Transform" node that does this repeated matrix transform. Its currently in the Beta node panel.&lt;/p&gt;
&lt;p&gt;&lt;img alt="matrix iterate pyramid sverchok" src="./images/pyramid_interpolate_iterate_04.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;Adding rotations to the matrix used as input to the iterate node will quickly produce some interesting structures. Below is the node diagram for the structure in the image at the top of this post. The same structure is used as the default start up script for the &lt;a href="http://structuresynth.sourceforge.net/"&gt;Structure Synth&lt;/a&gt; application. Many of the other examples provided with Structure Synth could be used as starting points for exploration with Sverchok.&lt;/p&gt;
&lt;p&gt;&lt;img alt="structure synth default sverchok" src="./images/matrix_iterate_01_demo.blend.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Arduino Bread Details</title><link href="http://www.elfnor.com/Arduino%20Bread%20Details.html" rel="alternate"></link><updated>2015-01-19T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-01-19:Arduino Bread Details.html</id><summary type="html">&lt;p&gt;&lt;img alt="arduino bread" src="http://www.elfnor.com/images/arduino_bread.png" /&gt;&lt;/p&gt;
&lt;p&gt;As mentioned in a &lt;a href="http://www.elfnor.com/Arduino Bread.html"&gt;previous post&lt;/a&gt; I've been working on a project to replace the "brain" of a bread-maker with an Arduino. &lt;/p&gt;
&lt;p&gt;The aim is to separate out the different stages in the breadmaker's cycle so I can make good sourdough bread. In general the sourdough takes longer to rise than dough made using store bought dried yeast granules. The rise time can also vary depending on how the sourdough starter is on any day. Also the longer the rise time the stronger the sour flavour of the bread.&lt;/p&gt;
&lt;p&gt;This project is ongoing. Currently I have made a breadmaker with an Arduino brain where I can set up programs with my own times for any part of the breadmaker cycle. To make a loaf of sourdough, I put the ingredients in the pan and select a program that mixes and kneads the dough then keeps the pan at rise temperature indefinitely. When I've checked the bread is sufficiently risen, I stop that program and run a bake only program.  Eventually, I'd like some way of measuring the height of the dough so the Arduino can track when the bread is risen and then switch to the bake cycle. The current rise temperature is the same as for the original breadmaker cycle (~37 °C). I'll probably add an option to rise the bread at a lower temperature for longer to get a stronger sour flavour.&lt;/p&gt;
&lt;p&gt;The model of breadmaker I'm using is a fairly old Sanyo "The Bread Factory Plus" (Model SBM-20). From other people's projects I suspect many breadmakers are quite similar internally and these notes could be applicable to many other models and brands.&lt;/p&gt;
&lt;p&gt;First of all pull your breadmaker apart to see how it works. Keep all the screws and take photos during the take apart. These are great when you need to put it back together again.&lt;/p&gt;
&lt;p&gt;A breadmaker is very simple, it has a motor to turn the paddle and a heater to warm the pan and a thermistor to give the pan's temperature. There's a set of buttons and a display to select a program and start the machine. All this is controlled by a micro controller. &lt;/p&gt;
&lt;p&gt;&lt;img alt="take apart breadmaker" src="./images/bm_insides.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;In the above photo the top board contains the buttons, the display and the micro controller. The bottom board controls the motor and heater. This makes our development simple and safe. We can replace the top board where the maximum voltage is 5 V without going any where near the nasty mains voltage on the motor and heater. The 5 pin connector goes from the control board to the lower motor and heater board. The two pin connector goes to the thermistor on the side of the baking area. &lt;/p&gt;
&lt;p&gt;For safety don't plug the machine into mains voltage when it looks like the above photo. Instead put it back together as much as possible while still having access to the control board.&lt;/p&gt;
&lt;p&gt;&lt;img alt="workable breadmaker" src="./images/bm_workable.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="control board" src="./images/control_board_original.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Carefully poking around the 5 pin connector while the breadmaker is going, gives the following designations for the pins. Pin 1 is on the right in the above image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1 - GND
2 - + 5V
3 - buzzer
4 - heater
5 - motor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pins 4 and 5 are normally held at 5V but are pulled to GND when the heater or motor are operating. Pin 3 is directly connected to a piezo buzzer.&lt;/p&gt;
&lt;p&gt;We can check the temperature sensor is a thermistor by heating the sensor up (disconnected from the board) and reading the resistance between the two contacts with a DVM. The resistance should drop with an increase in temperature. This shows the &lt;a href="http://en.wikipedia.org/wiki/Thermistor#NTC"&gt;thermistor&lt;/a&gt; has a negative temperature coefficient. The relationship between thermistor resistance and temperature will most likely be non-linear over the range of temperatures (20 °C to 230 °C) we are interested in. We could try and calibrate the thermistor at known temperatures to characterise its temperature versus resistance curve but we really only need to know the resistance at two points, the rising temperature and the baking temperature. We'll find these out by making a loaf of bread while we record what the breadmaker does.&lt;/p&gt;
&lt;h2&gt;Designing a system to record the bread maker&lt;/h2&gt;
&lt;p&gt;We will need to design a system to record the heater, motor and thermistor signals while the bread maker makes a loaf of bread. Having done this we can then duplicate those signals with our new Arduino control system. &lt;/p&gt;
&lt;p&gt;A thermistor has two connections and is usually read by micro controller using a voltage divider circuit like one of these (the thermistor can either be between the pin and ground or between +5V and the pin):&lt;/p&gt;
&lt;p&gt;&lt;img alt="thermistor read schematic" src="./images/thermistor_read_schem.png" /&gt;&lt;/p&gt;
&lt;p&gt;Checking the thermistor circuit shows pin 2 at +5V so we're looking at something like the left most schematic above. However the resistor on Pin 1 of the thermistor is connected to ground via a transistor. The base pin of this transistor is controlled via another micro controller pin. Below is a simplified schematic.&lt;/p&gt;
&lt;p&gt;&lt;img alt="thermistor original" src="./images/thermistor_original.png" /&gt;&lt;/p&gt;
&lt;p&gt;What's happening here is that the micro controller regularly enables the voltage divider via a set of clock pulses sent on the control pin. If we measure the voltage on Pin 1 of the thermistor it will jump between the correct voltage (when the control pin is high) and ground. &lt;/p&gt;
&lt;p&gt;This makes the design of the recording system a little bit harder. We could try to synchronize our measurements with the clock signal on the microelectronic but as we're mainly interested in the steady state value of the thermistor at the rise and bake temperatures we can simplify this and use a capacitor to convert the voltage to a steady value.&lt;/p&gt;
&lt;p&gt;An Arduino can also be used for the recording system. The circuit I used is shown below. As this is only needed once I made it up on a bread board. Keep the original control board connected to the bread maker and add in this recording system to the control and thermistor connectors. Load up the breadmaker_record.ino sketch from the &lt;a href="https://github.com/elfnor/arduino-bread"&gt;github repository&lt;/a&gt; and make a loaf of bread!&lt;/p&gt;
&lt;p&gt;&lt;img alt="breadmaker record schematic" src="./images/breadmaker_record.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Reverse Engineering a control system&lt;/h2&gt;
&lt;p&gt;The output of the recording system is shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="bread maker output" src="./images/breadmaker_graph.png" /&gt;&lt;/p&gt;
&lt;p&gt;The motor control signals are straight forward. The loaf program starts with 6 minutes of mixing where the motor is pulsed on for ~0.25 second and off for ~1 second. After mixing the bread is kneaded with the motor on continuously for ~29 minutes. There is another two short pulses of the motor about a third of the way through the rising time. &lt;/p&gt;
&lt;p&gt;The analog count on pin A0 of the Arduino has an average of 120 during the rising time. For baking it has an average of 330. To convert these counts to resistance values, connect up variable resistor to the recording circuit in place of the thermistor. Vary the resistor to find the resistance values that give analog counts on the Arduino of 120 and 330. Allow enough time after each change in resistance for the count to reach a steady value as the circuit has a long response time due to the large smoothing capacitor.&lt;/p&gt;
&lt;p&gt;During the rising time the heater is on for an average 3 seconds and off for 60 seconds. The on cycle varies between 1 second and 10 seconds. The variation in the on cycle time is  used to control the temperature. &lt;/p&gt;
&lt;p&gt;When the pan is being heated for the baking time the heater is on continuously. During the baking the heater pulses on every 15 seconds with the pulse width again varied to control the temperature. After the baking time the breadmaker keeps the bread pan warm. I haven't yet implemented this keep warm feature in my Arduino program as I don't tend to use it.&lt;/p&gt;
&lt;p&gt;Controlling the temperature of the breadmaker with the Arduino consists of reading the temperature sensor (the thermistor) and determining when and for how long to turn on the heater. I avoided getting into most of the complications of control theory by starting with a very simple control algorithm.  For example for the rise control:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Temperature T&lt;/th&gt;
&lt;th&gt;time on&lt;/th&gt;
&lt;th&gt;time off&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T &amp;lt; tlow&lt;/td&gt;
&lt;td&gt;10 s&lt;/td&gt;
&lt;td&gt;50 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tlow  &amp;lt; T &amp;lt; thigh&lt;/td&gt;
&lt;td&gt;6 s&lt;/td&gt;
&lt;td&gt;54 s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T &amp;gt; thigh&lt;/td&gt;
&lt;td&gt;1 s&lt;/td&gt;
&lt;td&gt;59 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This works well enough because of the long time constant between pulsing the heater and the thermistor responding, the large thermal mass of the system, and the low accuracy (~ +/- 5 °C) required to make bread.&lt;/p&gt;
&lt;p&gt;In the control system the thermistor is measured with a simple voltage divider. The motor and heater are controlled via transistors connected to digital lines on the Arduino.&lt;/p&gt;
&lt;p&gt;The final circuit is shown below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="breadmaker circuit" src="./images/breadmaker_schem.png" /&gt;&lt;/p&gt;
&lt;p&gt;This includes 5 switches to match the switches in use on the original breadmaker and a 4 digit display. The switches use the internal pull-up resistors on the Arduino board and so only need to be connected between the Arduino pin and ground. The 4 digit display is one that includes a TM1637 control chip (&lt;a href=""&gt;for example&lt;/a&gt;) and can be controlled from 2 lines on the Arduino. The LEDs in parallel with the transistors are useful for debugging the circuit and program but can be omitted in the final build.&lt;/p&gt;
&lt;p&gt;I made the fairly simple circuit board up on a piece of perfboard cut to match the size of the original board. The switches were carefully positioned to be in the same place underneath the pads on the breadmaker cover. The display was hung off the board on longish wires as this was the easiest way to get it to sit underneath the see through area on the cover. The Arduino nano was inserted into headers soldered onto the back of the board. This was to allow easy access for reprogramming. &lt;/p&gt;
&lt;p&gt;&lt;img alt="new board" src="./images/breadmaker_board.png" /&gt;&lt;/p&gt;
&lt;p&gt;The full code for the Arduino is available &lt;a href="https://github.com/elfnor/arduino-bread"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;When the bread maker is switched on with its new brain it behaves very much like it used to. Only now it has new programs as defined in the Arduino code. The programs are selected by using the SELECT button to cycle through them. The up and down keys can be used as before to add a delay time to the start of the program. The program is then started with the START button. It can be stopped at any time with the STOP button. &lt;/p&gt;
&lt;p&gt;The given Arduino code currently includes the following bread programs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;struct PGRMS
  {
    int min_pulseMix;  // 1/4 second pulse every 1 second
    int min_contMix;   // continuous kneading
    int min_rise1;     // pan kept at rising temperature 
    int min_punchDown; // two short mixing pulses 
    int min_rise2;     // 2nd rise 
    int min_heat;      // pan heated up to bake temperature 
    int min_bake;      // pan kept at bake temperature 
  };

const int N_PGRMS = 6;

const PGRMS pgrms[N_PGRMS] = 
    {
      {6, 29, 30, 1, 53, 8, 42},  // 0 : normal loaf
      {6, 29, 0, 0, 0, 0, 0},     // 1 : mix and knead only
      {0,  0, 1000, 0, 0, 0, 0},  // 2 : very long rise
      {6, 29, 1000, 0, 0, 0, 0},  // 3 : mix, knead and long rise
      {0, 0, 0, 0, 0, 8, 42},     // 4 : bake only
      {3,  3, 10, 0,  0, 0,  0},  // 5 : test nonsense     
    };
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first program &lt;code&gt;pgrms[0]&lt;/code&gt; bakes an ordinary loaf of bread, mixing it for 6 minutes, kneading for 29 minutes, rising for 30 mintute. Then it quickly "punches down" the bread (two short mixing pulse) and rises the bread for another 53 minutes. Then it heats the pan up and bakes the bread for 42 minutes. Any part of the program can be skipped by setting its value to zero. &lt;/p&gt;
&lt;p&gt;Add another program by increasing &lt;code&gt;N_PGRMS&lt;/code&gt; and adding a line to &lt;code&gt;PGRMS&lt;/code&gt; with the correct times for each part of the cycle.&lt;/p&gt;
&lt;p&gt;The next thing I'd like to add to this project is a sensor to determine when the bread is risen. Either a simple optical beam break when the bread reaches the top of the pan or some way of measuring the height of the dough. Choice of sensors will be limited by the high temperatures the breadmaker reaches. But for now my re-brained bread maker makes a pretty good loaf of bread.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category></entry><entry><title>Simple Sverchok 04 - Apply Matrix</title><link href="http://www.elfnor.com/simple-sverchok-04-apply-matrix.html" rel="alternate"></link><updated>2015-01-04T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2015-01-04:simple-sverchok-04-apply-matrix.html</id><summary type="html">&lt;p&gt;&lt;img alt="3D T Square Fractal" src="./images/copy_cubes_wireframe_25a.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is part four of my introduction to &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; the parametric node geometry add-on for Blender. This post I'm sticking to my theme of copying one object to the structure (either the vertices or polygons) or another mesh. There is an awful lot more than just copying that can be done with Sverchok (see &lt;a href="http://blendersushi.blogspot.co.nz/"&gt;here&lt;/a&gt; for example) but copying is good for explaining the basics.&lt;/p&gt;
&lt;p&gt;The very simple node tree below takes a copy of the cube, scales it to half size and places a copy on each each of the corners of the original large cube. The scale values are accessed by clicking on the scale drop down. We could also connect a "Vector In" node here to give the three scale values.&lt;/p&gt;
&lt;p&gt;&lt;img alt="first level cube copy" src="./images/copy_cube_post_01.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;Very straight forward. How would we continue this copy in a recursive fashion to produce a fractal structure? That is copy a small cube (64 in total) to each corner of the eight mid-sized cubes. Then repeat this with 512 tiny cubes etc.  This would produce  a 3D  version of the &lt;a href="http://en.wikipedia.org/wiki/T-square_%28fractal%29"&gt;T-square fractal&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The "Viewer Draw" node takes a list of vertices from the "Object In" node and a list of matrices defining the location of each of vertices of the original cube and a scale factor to apply to each of the copies.  To do another level of copying we need a list of matrices that give the location of the corners of the eight mid-sized cubes. &lt;/p&gt;
&lt;p&gt;The "Matrix Apply" node takes a list of vertices and a list of matrices and produces a nested list of vertices for all the mid sized cubes. Take a look at the output of the "Matrix Apply" node with the "Viewer Text" node. It consists of a nested list with three levels. The outermost level (level 1) contains 8 objects, one for each cube. Each of these level 1 objects contains eight lists (level 2), one for each corner of a cube. Each of these level 2 list contains three numbers (level 3) for the x, y, z coordinates of the vertex. &lt;/p&gt;
&lt;p&gt;&lt;img alt="matrix apply node" src="./images/copy_cube_post_02.blend.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vertices: 
(8) object(s)
=0=   (8)
(1.5, 1.5, -1.5)
(1.5, 0.5, -1.5)
(0.5, 0.5, -1.5)
(0.5, 1.5, -1.5)
(1.5, 1.5, -0.5)
(1.5, 0.5, -0.5)
(0.5, 0.5, -0.5)
(0.5, 1.5, -0.5)
=1=   (8)
(1.5, -0.5, -1.5)
(1.5, -1.5, -1.5)
(0.5, -1.5, -1.5)
(0.5, -0.5, -1.5)
(1.5, -0.5, -0.5)
(1.5, -1.5, -0.5)
(0.5, -1.5, -0.5)
(0.5, -0.5, -0.5)
....
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to flatten this list so it contains 1 object with a  list of 64 vertices. This is done using the "List Join" node with the "JoinLevelLists" set to 2. Check with the "Viewer Text" node that this is what happened.&lt;/p&gt;
&lt;p&gt;&lt;img alt="List join node" src="./images/copy_cube_post_03.blend.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vertices: 
(1) object(s)
=0=   (64)
(1.5, 1.5, -1.5)
(1.5, 0.5, -1.5)
(0.5, 0.5, -1.5)
(0.5, 1.5, -1.5)
(1.5, 1.5, -0.5)
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We then feed this list into another "Matrix In" node, set the scale values and send the resulting list of 64 matrices to another "Viewer Draw" node. We can repeat this process as many times as we like to get a fractal structure.&lt;/p&gt;
&lt;p&gt;&lt;img alt="t square fractal node tree" src="./images/copy_cube_post_04.blend.png" /&gt;
&lt;img alt="t square fractal levels" src="./images/copy_cube_post_05.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;Another simple 3D fractal is the &lt;a href="http://en.wikipedia.org/wiki/Menger_sponge"&gt;Menger Sponge&lt;/a&gt;. The sponge (right) and its negative space (left) are shown below. The sponge and its negative would fit together to completely fill a cube. &lt;/p&gt;
&lt;p&gt;&lt;img alt="menger sponge neagtive and positive" src="images/menger_sponge_06.png" /&gt;&lt;/p&gt;
&lt;p&gt;Looking at these, the negative sponge looks easier to build by copying. The basic underlying structure is shown below. The structure consists of ever smaller copies of the central cross. The cross can be made by extruding each face of a cube. The positions to copy to are given by the wire frame cube. This is made by deleting the faces from a cube and subdividing each edge. The cross should be three units across and the wire frame cube 2 units across.&lt;/p&gt;
&lt;p&gt;&lt;img alt="menger sponge cross unit" src="images/copy_cube_post_08.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;For the first level of copying (the bottom row on the following node tree) we just copy the Cross to the Cube vertices of the wireframe. The second level of copying is done in the top row. The scale factors for each "Matrix In" node can be calculated or found by trial and error. They are for the two nodes in the top row (from left to right) 0.33 (1/3) and 0.1666 (1/6) and 0.5 (1/2) for the "Matrix In" node in the bottom row.&lt;/p&gt;
&lt;p&gt;&lt;img alt="negative menger sponge node tree" src="images/copy_cube_post_11.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="negative menger sponge levels" src="images/copy_cube_post_09.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;More levels of smaller copies can be made in a similar way.&lt;/p&gt;
&lt;p&gt;Once we understand the use of a separate mesh to define the copy to points, constructing  the positive Menger Sponge is just as simple. We start by making the base unit which is the boolean difference between a cube and our previous base cross object. The wire frame object is the same as for the negative sponge. Once having set up the recursive scaled copy of the wire frame mesh we only need to copy one size of unit sponge object to each vertex position. The scale factor is 1/9  for a a basic sponge unit of dimension 3 and three levels of recursion.&lt;/p&gt;
&lt;p&gt;&lt;img alt="positive menger sponge base unit" src="images/copy_cube_post_13.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="positive menger sponge node tree" src="images/copy_cube_post_12.blend.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Simple Sverchok 03 - Slope Dependent Trees</title><link href="http://www.elfnor.com/simple-sverchok-03-slope-dependent-trees.html" rel="alternate"></link><updated>2014-12-30T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-12-30:simple-sverchok-03-slope-dependent-trees.html</id><summary type="html">&lt;p&gt;&lt;img alt="landscape with slope dependent trees" src="./images/forest_mountain_15.png" /&gt;&lt;/p&gt;
&lt;p&gt;The first two posts (&lt;a href="http://www.elfnor.com/simple-sverchok-01-centers-polygons.html"&gt;01&lt;/a&gt;, &lt;a href="http://www.elfnor.com/simple-sverchok-02-matrix-deform.html"&gt;02&lt;/a&gt; ) in this gentle introduction to Sverchok covered copying objects to the centers of polygons and scaling the copied objects according to some pattern. &lt;/p&gt;
&lt;p&gt;In this post we'll look at applying what we've learnt to planting trees across a landscape. We'll make the trees only grow on reasonably flat land and make different types of trees grow at different heights.&lt;/p&gt;
&lt;p&gt;First off activate the Ant Landscape add-on available under user preferences. (It should be included in the default install). Use Add &amp;gt; Mesh &amp;gt; Landscape to generate a mesh. Fiddle with the landscape parameters in the tool panel until the landscape looks good. Add some flat spots using the Strata drop down near the bottom of the tool panel. These will be where we'll plant the trees.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ant landscape" src="./images/slope_greeble_01.png" /&gt;&lt;/p&gt;
&lt;p&gt;We could copy the trees to the centers of the polygons of our mesh similar to the previous two posts but to try something new this time we'll copy them onto the vertices of the mesh instead.&lt;/p&gt;
&lt;p&gt;To copy an object on to every vertex just requires this simple node diagram. All the copied objects z vectors point in the same direction as the original object, as we've only provided information about location and none about rotation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="copy to vertices" src="./images/slope_greeble_02_a.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Slope Dependence&lt;/h2&gt;
&lt;p&gt;To determine the slope at any point on the landscape we use the "Vertex Normals" node found under "Analyzers". This node outputs a list of vectors, one for each vertex. The angle between the vertex normal and the z-axis will give us a value for the slope that is zero degrees for flat land and 90 degrees for vertical cliffs. To calculate this angle use the "Vector Math" node from the "Vector" group and set its function to "Angle degrees". Use the "Vector X|Y|Z" node as the other input. Check with the "Viewer text" node that this gives a list of angles for each vertex of the landscape.&lt;/p&gt;
&lt;p&gt;&lt;img alt="slope sverchok" src="./images/slope_greeble_03_a.png" /&gt;&lt;/p&gt;
&lt;p&gt;Next we want to select some of these vertices depending on this slope value. Add a "Logic" node and set its function to "&amp;lt;" (less than).  Set a suitable value (say 10) for the second input. This will output  a list of True or False values (booleans)  for each vertex of the landscape depending on its slope. &lt;/p&gt;
&lt;p&gt;&lt;img alt="slope sverchok" src="./images/slope_greeble_04_a.png" /&gt;&lt;/p&gt;
&lt;p&gt;The "Mask List" node takes a list of booleans (mask) and a data list and separates the data into two lists one for when the matching values in the mask are True and one for when they are False. &lt;/p&gt;
&lt;p&gt;&lt;img alt="slope sverchok" src="./images/slope_greeble_05_a.png" /&gt;&lt;/p&gt;
&lt;p&gt;The landscape should now have little cubes only on the flat spots. Changing the value in the "LESS X" logic node will change the maximum slope on which cubes are placed. &lt;/p&gt;
&lt;h2&gt;Height Dependence&lt;/h2&gt;
&lt;p&gt;To keep things simple I'll explain the construction of a node diagram for different types of trees at different heights separately then combine the two node diagrams at the end. &lt;/p&gt;
&lt;p&gt;Add a different low polygon object to the scene. I'd suggest a cube with the top four vertices merged at the center. For speed, I tend to use low polygon meshes at this early stage, later I will bake the Sverchok results using the same low polygon copies as placeholders. Then I link the data and materials of the desired real object to the copies produced by Sverchok.&lt;/p&gt;
&lt;p&gt;The node diagram for height dependence is roughly similar to that for slope dependence. The z-component of the vertex position is compared to a float value with a logic node. This list of booleans is fed to a "Mask List" node which separates the matrices for transforming an object to the vertex position into two lists. The "dataTrue" list is fed to the matrix input of one "Viewer Draw" node, the "dataFalse" list is fed to a different "Viewer Draw" node. Each "Viewer Draw" node gets its vertices and polygons from a different "Object In" node. The low elevation vertices ("dataTrue") are connected to the cube and the high elevation vertices ("dataFalse") are connected to  the pyramid.&lt;/p&gt;
&lt;p&gt;&lt;img alt="height dependence sverchok" src="./images/slope_greeble_06_a.png" /&gt;&lt;/p&gt;
&lt;p&gt;The node diagram including both slope and height dependence is shown here. (Click for a larger view). &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.elfnor.com/images/slope_greeble_07.png"&gt;&lt;img alt="height and slope node tree" src="./images/slope_greeble_07_a.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unless its a plantation forest, our trees will look better with some variation in the x and y locations,  z-scale and rotation about the z-axis. This is done with a number of "Random" nodes similar to how we randomized the z-scale of the objects in the last post. This node diagram gets very messy so I've colapsed all the nodes except those for randomizing the rotation about the z-axis. You can examine the full diagram after downloading the blend file. The "Map Range" node is used to map the [0, 1] range of the output of the "Random" node to the needed range of [0, 360] for the angle input of the "Matrix Deform" node.&lt;/p&gt;
&lt;p&gt;&lt;img alt="random height dependence sverchok" src="./images/slope_greeble_08.png" /&gt;&lt;/p&gt;
&lt;p&gt;An aerial view of the landscape showing the random location and rotation of the objects.&lt;/p&gt;
&lt;p&gt;&lt;img alt="aerial view of landscape" src="./images/slope_greeble_09.png" /&gt;&lt;/p&gt;
&lt;p&gt;Download &lt;a href="/downloads/slope_greeble.blend"&gt;blend file&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: Credit and thanks to &lt;a href="http://www.techmonkeybusiness.com/"&gt;TechMonkey&lt;/a&gt; for the textures and tree models used in the image at the top of the post. The slope dependent texturing in that image was done following &lt;a href="http://vimeo.com/28922937"&gt;this tutorial&lt;/a&gt; by David Miller.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Simple Sverchok 02 - Matrix Deform</title><link href="http://www.elfnor.com/simple-sverchok-02-matrix-deform.html" rel="alternate"></link><updated>2014-12-27T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-12-27:simple-sverchok-02-matrix-deform.html</id><summary type="html">&lt;p&gt;&lt;img alt="demo sverchok image" src="./images/flower_head_18_top.png" /&gt;&lt;/p&gt;
&lt;p&gt;My  &lt;a href="http://www.elfnor.com/simple-sverchok-01-centers-polygons.html"&gt;previous post&lt;/a&gt; introduced some of the basic concepts of &lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; via the "Centers Polygons" node. &lt;/p&gt;
&lt;p&gt;Here we'll try to gradually increase the complexity of our node diagram to do some more interesting things. Things that become increasingly harder to do outside Sverchok without using Blender python directly.&lt;/p&gt;
&lt;p&gt;Last time we made a simple node diagram that copied one object of the scene onto the centers' of the polygons of another object in the scene. How would we apply a different scale to each of the copied objects? This scale could be random or structured in some way.&lt;/p&gt;
&lt;p&gt;We know from playing last time with the "Matrix Out" and the "Text Viewer" node that the scale information is stored in the objects transform matrix. The "Centres Polygon" node produces a list of transform matrices for each of the copied objects. So to scale each object we going to intercept this list of matrices on its way from the "Centers Polygons" node to the "Viewer Draw" node.&lt;/p&gt;
&lt;p&gt;A look around the nodes available finds a "Scale" node under Transforms and a "Matrix Deform" node under Matrix. &lt;/p&gt;
&lt;p&gt;&lt;img alt="sverchok scale node and Matrix deform node" src="./images/scale_matrix_nodes.png" /&gt;&lt;/p&gt;
&lt;p&gt;The "Scale" node has vertices as inputs and outputs. This would be useful for scaling the vertices of a single object (think of  working in "EDIT" mode) but isn't for working with the transform matrices (think of working in "OBJECT" mode).&lt;/p&gt;
&lt;p&gt;The "Matrix Deform" node looks more what we want. It has matrix (blue) inputs and outputs and further inputs for location, scale,  rotation and angle. To apply an individual scale to each object we need a vector (x, y, z) for each object. This is produced in the next diagram with a "Vector" node and a "Random" node.  The X and Y scales are set to 1 and the Z scale is connected to "Random" node.  The "Random" node produces uniformly distributed numbers of the interval [0, 1].  This node diagram  randomly scales each of the copied objects in their Z directions (along the normal of the polygon they've been copied to). &lt;/p&gt;
&lt;p&gt;&lt;img alt="sverchok random scale" src="./images/centers_polygons3.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sverchok random scale result" src="./images/centers_polygons3.blend_result-crop.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here we have set the "Count" of the "Random" node to 20 as we know that's how many faces our mesh has. If we change the mesh it would be nice if this updated automatically to the number of polygons in the mesh. This is done via the "List Length" node as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="sverchok random scale list length" src="./images/centers_polygons4.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;What if we wanted to scale the spike objects in a more structured way? Its just a matter of getting a list of scale vectors of the right length and feeding them to our matrix deform node.&lt;/p&gt;
&lt;p&gt;&lt;img alt="sverchok z scale" src="./images/centers_polygons6.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sverchok z scale result" src="./images/centers_polygons6.blend_result.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here we've scaled the length of the cylinders by the z location of the polygon the cylinder is copied to. This is done by using a "Matrix Out" node to separate out the location of the center of each polygon, then a "Vectors Out" node to separate out just the z component of the location vector.&lt;/p&gt;
&lt;p&gt;Hiding the Icosphere will show that the bottom half of the cylinders have negative scale due to the z location of their polygon being neagtive. One solution is to add a "Math" node to take the absolute value of the z location of the face before passing it to the "Matrix Deform" node.&lt;/p&gt;
&lt;p&gt;&lt;img alt="sverchok abs z scale " src="./images/centers_polygons7.blend.png" /&gt;
&lt;img alt="sverchok abs z scale result" src="./images/centers_polygons7.blend_result.png" /&gt;&lt;/p&gt;
&lt;p&gt;Node diagrams can quickly look busy. To make node diagrams easier to read Frames can be added and named. Select the nodes then "Join in New Frame" from the node menu. The whole frame can then be moved around as one item.&lt;/p&gt;
&lt;p&gt;&lt;img alt="sverchok abs z scale frame " src="./images/centers_polygons8.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;There is also a SV Groups feature on the right hand panel of the Node Editor window. This collapses a number of nodes down to a single node.&lt;/p&gt;
&lt;h2&gt;Example Image&lt;/h2&gt;
&lt;p&gt;&lt;img alt="demo sverchok image" src="./images/flower_head_07.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Simple Sverchok 01 - Centers Polygons</title><link href="http://www.elfnor.com/simple-sverchok-01-centers-polygons.html" rel="alternate"></link><updated>2014-12-20T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-12-20:simple-sverchok-01-centers-polygons.html</id><summary type="html">&lt;p&gt;&lt;img alt="final render sverchok centres polygon demo" src="./images/centers_polygon_demo_image.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nikitron.cc.ua/sverchok_en.html"&gt;Sverchok&lt;/a&gt; is an add-on for Blender. It allows you to generate geometry in Blender in a parametric way by wiring visual nodes together rather than programming in Blender python.&lt;/p&gt;
&lt;p&gt;This is the first of hopefully a series on very simple examples of using Sverchok. I'm learning this as I blog about it (the best way of learning something is to try and teach someone else) so if I make mistakes or find a better way of doing something later I'll try and come back and update these posts.&lt;/p&gt;
&lt;h2&gt;Installation and setup&lt;/h2&gt;
&lt;p&gt;Get the latest version of Sverchok from github.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download Sverchok from github &lt;a href="https://github.com/nortikin/sverchok/archive/master.zip"&gt;https://github.com/nortikin/sverchok/archive/master.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;User Preferences &amp;gt; Addons &amp;gt; install from file &amp;gt;&lt;/li&gt;
&lt;li&gt;Choose zip-archive &amp;gt; activate flag beside Sverchok&lt;/li&gt;
&lt;li&gt;Enable permanently in the startup.blend using Ctrl + U and Save User Settings from the  Addons menu. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My preferred layout for working in Sverchok is to start with the Compositing screen layout and change the bottom left window to a Text Editor. At the bottom of the Node Editor select the node tree type to Sverchok and add a new node tree.&lt;/p&gt;
&lt;h2&gt;Centers Polygons&lt;/h2&gt;
&lt;p&gt;Here is the first node set up we're going to look at.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.elfnor.com/images/centers_polygons1.blend.png"&gt;&lt;img alt="centers polygons node example" src="images/centers_polygons1.blend_low_res.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a very simple node diagram (click for a larger image). All it does is copy one object from the scene onto the centers' of the polygons of another object in the scene.&lt;/p&gt;
&lt;p&gt;I'll explain it in some detail to help us get a feel for how Sverchok handles the data for a mesh.&lt;/p&gt;
&lt;p&gt;The two green "Objects_in" Scene nodes allow access to the data from objects in the scene. Select the scene object and press the "Get Selection" button to read in the data.&lt;/p&gt;
&lt;p&gt;Each of the connections on the right side of the "Object_in" node outputs some of the mesh data for its object. To see what this data looks like connect a "Viewer_text" Text node to one of the outputs. Change one of  the panels in the blender window to a  text editor and select  the "Sverchok_viewer" from the data block selector. When the "VIEW" button on the "Viewer_text" node is pressed the data stream connected to the node will be written to this panel.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Viewer text node" src="./images/centers_polygons1a.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;A blender mesh is described as the (x, y, z) coordinates of the vertices of the object. These are given relative to the origin of the object.&lt;/p&gt;
&lt;p&gt;The edges and polygons describe how the vertices are connected to form the mesh. The edges are list of pairs that are connected by an edge. For instances (1, 5) means there is an edge between the &lt;code&gt;obj.data.vertices[1]&lt;/code&gt; and &lt;code&gt;obj.data.vertices[5]&lt;/code&gt;*. The polygons are similarly a list of the vertices connected by each polygon in the mesh.&lt;/p&gt;
&lt;p&gt;In Sverchok it only makes sense to wire the same colored nodes together. Orange vertices coordinates  to orange vertices coordinates, Green lists of vertices (edges or polygons) to other lists etc.&lt;/p&gt;
&lt;p&gt;The matrix of an object describes the position, scale and rotation of the object. The position is given as the position of the object's origin with respect to the Scene origin. "Get Selection" the data from a simple cube and look at its matrix with a "Viewer_text" node. Move, rotate and scale the cube and compare the values in the "Transform" panel to the matrix that Sverchok displays. (You'll need to use the "Get Selection" and "VIEW" buttons to update the data after each change to the object).&lt;/p&gt;
&lt;p&gt;A little playing will show that the location and scale are stored in the matrix&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[sx, 0,  0, x]&lt;/span&gt;
&lt;span class="k"&gt;[0, sy,  0, y]&lt;/span&gt;
&lt;span class="k"&gt;[0,  0, sz, z]&lt;/span&gt;
&lt;span class="k"&gt;[0,  0,  0, 1]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where x, y, z are the location and sx, sy, sz, are the scale values.&lt;/p&gt;
&lt;p&gt;Rotations affect the 3 x 3 top left corner of the matrix. If you're interested in more detail on how transform matrices really work see these &lt;a href="http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/geometry/geo-tran.html"&gt;notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To separate out the various parts of the transform matrix use the "Matrix out" node from the "Matrix" node set.  This takes a matrix (or many matrices) and outputs separately the location, scale, rotation and angle represented by that transform matrix. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Matrix out node" src="./images/centers_polygons1b.blend.png" /&gt;&lt;/p&gt;
&lt;p&gt;The rotation output of the node is a list of three numbers which correspond to the X, Y, Z values of the rotation given in the transform panel of the 3D view when the "Axis Angle" display option is selected. The Angle  output of the node is the W value (in degrees) from the transform panel. In the "Axis Angle" mode,  X, Y, Z describe an axis and W describes a angle that the object is rotated about this axis. &lt;/p&gt;
&lt;p&gt;If you apply the transform (CTRL-A) (location, scale and rotation to the object the transfrom matrix will be reset to the identity matrix (diagonal 1s, 0s everywhere else), the origin of the object will be moved to the scene origin and the vertices of the object will be recalculated to reflect this change in origin. The edges and polygons do not need to be updated through any of these transforms as they are only lists of the connections between vertices and as such contain no positional information.&lt;/p&gt;
&lt;p&gt;Also play with moving, rotating or scaling the mesh in "EDIT" mode. You will find that this effects the vertex coordinates but not the transform matrix.&lt;/p&gt;
&lt;p&gt;Getting back to the "Centers Polygons" node from the "Analysers" node set. It takes a set of vertex coordinates and a list of polygon connections as its inputs and outputs data about the centers of each of those polygons.&lt;/p&gt;
&lt;p&gt;&lt;img alt="centers polygon nodes only" src="./images/centers_polygons1.blend_diagram.png" /&gt;&lt;/p&gt;
&lt;p&gt;The "Centers" output of the node is colored blue, meaning its going to output matrices. 
In the node diagram the "Centers" output from the "Centers Polygons" node is connected to the matrix input of a "Viewer Draw" node. Connecting another mesh to the "Vertices" "Edge pol" inputs produces a copy of the second mesh at the center of each polygon on the first mesh.&lt;/p&gt;
&lt;p&gt;Moving the second mesh with respect to its own origin will move (when everything is updated) the copies with respect to the polygon on the second mesh. The orientation of the copy is such that the copied objects z-direction is normal to the face. To see how the x and y directions map to the face select a face of the first object and change the transformation display to "Normal" mode. A little experimentation will show that the x axis of the second object is mapped to the y axis of the face normal.&lt;/p&gt;
&lt;p&gt;The origins output of the "Centers Polygons" node output just a list of the centers of each polygon. The "Normals" and "Norm_abs" outputs are as described in the &lt;a href="http://sverchok.readthedocs.org/en/latest/main.html"&gt;docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Normals is normals from global zero coordinates, vector. Norm_abs is normals shifted to centers of polygons. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To turn the output of the "Viewer Draw" node into ordinary Blender meshes click the "Bake" button on the node. If its not showing check the properties in the right hand panel.&lt;/p&gt;
&lt;p&gt;Alternatively if a "Viewer Bmesh" node is used instead of the "Viewer Draw" node, SV will update Blender meshes as changes are made. (Still need to click the "Update" button on the right hand panel.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; I've used the python code here that you could use to access the same data in the python console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    obj = bpy.context,active_object
    print(obj.data.vertices[1].co)
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category><category term="sverchok"></category></entry><entry><title>Arduino Bread</title><link href="http://www.elfnor.com/Arduino%20Bread.html" rel="alternate"></link><updated>2014-12-12T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-12-12:Arduino Bread.html</id><summary type="html">&lt;p&gt;I'm working on a project to replace the "brain" of a bread-maker with an Arduino. &lt;/p&gt;
&lt;p&gt;My partner makes all the household's bread from a sourdough starter. He uses the current bread-maker to knead the bread and sometimes to bake the bread but a bread-maker with its fixed cycle doesn't't make a successful loaf of sourdough. The rising time for bread made with sourdough starter is variable and unpredictable. Also the standard bread-maker cycle has a "punch down" (a quick mix in the middle of the rising cycle). This helps to make a fine texture for ordinary bread but can disrupt the rising of a sourdough loaf.&lt;/p&gt;
&lt;p&gt;By replacing the bread-maker control circuit with an arduino, we'll have more control over the stages in the bread-maker cycle. For instance a leave to rise until the human baker switches to the bake cycle will cover the variation in rise time we often get with the sourdough. Eventually, I'd like some way of measuring the height of the dough so the arduino can track when the bread is risen and then switch to the bake cycle. &lt;/p&gt;
&lt;p&gt;Also a programmable temperature environment with optional mixing has potential for other projects. Pasta dough, jam, dyeing wool, risotto, &lt;a href="https://www.youtube.com/watch?v=wgUw5Sj5HK0"&gt;beer making&lt;/a&gt;, &lt;a href="http://hackaday.com/2010/01/29/another-take-on-roasting-those-beans/"&gt;roasting coffee&lt;/a&gt;, &lt;a href="http://www.instructables.com/id/Mr-Compost-How-to-make-an-in-kitchen-compost-tur/"&gt;compost&lt;/a&gt;, desoldering etc.&lt;/p&gt;
&lt;p&gt;Note : don't try these in the same bread-maker or at least don't make the jam after trying the desolder or compost. Note I only found the compost making instructable after I'd mostly finished my version, (for some reason I didn't search for compost and bread machine) but it looks a great place to start. What's interesting is the basic board layout in the compost making Zojirushi BBCC-V20 looks similar internally to the Sanyo "The Bread Factory Plus" (Model SBM-20) I'm working on.&lt;/p&gt;
&lt;p&gt;I'll post some detailed notes when I'm a bit further along in the project. But so far I've managed to duplicate the basic bread-making cycle on the arduino. Here's the proof. Arduino baked bread.&lt;/p&gt;
&lt;p&gt;&lt;img alt="arduino bread" src="http://www.elfnor.com/images/arduino_bread.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category></entry><entry><title>Notes to Father Christmas re 3D Printer Filament</title><link href="http://www.elfnor.com/notes-to-father-christmas-re-3d-printer-filament.html" rel="alternate"></link><updated>2014-11-30T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-11-30:notes-to-father-christmas-re-3d-printer-filament.html</id><summary type="html">&lt;p&gt;I was doing some research to help Father Christmas fill my request for "some interesting printer filament" in my Christmas stocking. I thought I'd share that research here in case its useful to anyone else. Feel free to include or modify it for your own Christmas letter to Santa. (Under a creative commons share alike license.)&lt;/p&gt;
&lt;p&gt;I have an Ultimaker original which takes 3 mm diameter filament and as my heated bed is currently in use &lt;a href="http://www.elfnor.com/a-novel-use-for-a-3d-heated-printer-bed.html"&gt;keeping the ducklings warm&lt;/a&gt;, I'm mainly looking at filaments that will print on an unheated bed.&lt;/p&gt;
&lt;p&gt;As I'm in New Zealand I've looked at filaments available locally. I have to consider the &lt;a href="http://visual.ly/santas-carbon-footprint"&gt;carbon emissions&lt;/a&gt; for sleigh travel from the North Pole. &lt;/p&gt;
&lt;p&gt;I'm also looking for "interesting" filament by this I mean something other than plain coloured ABS or PLA. If a supplier also stocks the plain stuff I've normally included their base price in the list below, but I haven't included any suppliers that just stock ABS and PLA.&lt;/p&gt;
&lt;p&gt;If you know of any other NZ stockists of interesting filament please add a comment.
I've tried to get the prices correct, including GST but not necessarily shipping. Add any corrections in a comment and I'll fix.&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://diamondage.co.nz"&gt;Diamond Age&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Diamond Age have ASA ($78.20/125 m) a UV stabilised version of ABS which needs the same equipment to print as ABS.&lt;/p&gt;
&lt;p&gt;HIPS (High Impact Polystyrene) ($71.88/125 m) which is used in dual extrudes as a support material for ABS.&lt;/p&gt;
&lt;p&gt;PET-G (no heated bed required) ($94.88/125 m) is a transparent clear.&lt;/p&gt;
&lt;p&gt;IMPLA and HIPLA ($57.50/125 m), these are PLA with additives to increase strength and reduce brittleness. I've tried the HIPLA and its certainly flexible in the filament but can delaminate when a printed piece is flexed too much.  &lt;/p&gt;
&lt;p&gt;Diamond Age has PLA for ($50.88/125 m). The Ivory prints very nicely. The 125 m spools of 3 mm diameter filament are approximately 1 kg.  &lt;/p&gt;
&lt;p&gt;Diamond Age have the best tips on printing each filament of any of the NZ suppliers. They make their own filaments here in NZ and have a lot of experience in 3D printing. &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://www.mindkits.co.nz"&gt;Mindkits&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mindkits probably have the largest range of filament types, all non-branded.  &lt;/p&gt;
&lt;p&gt;Mindkits have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3 mm wood PLA ($50.47/kg), &lt;/li&gt;
&lt;li&gt;TPE Flexible filament ($87.92/kg), &lt;/li&gt;
&lt;li&gt;PLA filament that changes color with temperature ($64.50/kg), &lt;/li&gt;
&lt;li&gt;PETG T-glase ($69.30/kg), &lt;/li&gt;
&lt;li&gt;Nylon ($59.75/kg), &lt;/li&gt;
&lt;li&gt;Conductive ABS ($69.44/kg).  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mindkits price for ordinary PLA is around $50/kg.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://nicegear.co.nz/3d-printing/"&gt;Nicegear&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nicegear have NinjaFlex in 3 mm diameter (black and white) ($110/0.75 kg). I've seen some nice stuff printed in this. I've got some FilaFlex which I've found hard but not impossible to print with the Ultimaker's Bowden tube extruder. When my partner's Reprap is done I'll try the direct extruder and see if I get better results. Until then I'll pass on getting more flexible filament.&lt;/p&gt;
&lt;p&gt;Nicegear's price for ordinary PLA is $84/kg.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.noelleeming.co.nz"&gt;Noel Lemming&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Noel Lemming's have Makerbot PETG ($69.99/kg).&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://www.reeltoreal.co.nz"&gt;Reel to Real&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Reel to Real only have black and white ABS/PLA in 3mm ($42/kg). They also have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wood ABS ($65/kg) in 1.75 mm diameter &lt;/li&gt;
&lt;li&gt;flexi ABS (1.75 mm)&lt;/li&gt;
&lt;li&gt;conductive ABS (1.75 mm) ($65/0.5kg).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="http://www.vivenda.co.nz/buildingMaterial/"&gt;Vivenda&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Vivenda have &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Taulman 618 Nylon ($55/0.45 kg), &lt;/li&gt;
&lt;li&gt;645 Nylon ($72.50/0.45 kg) &lt;/li&gt;
&lt;li&gt;t-glase ($79.90/0.45 kg) all in 3 mm diameter (and 1.75 mm). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The T-glase looks like it might require a heated printer bed. &lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="3D Printing"></category></entry><entry><title>Translate cache descriptions and logs</title><link href="http://www.elfnor.com/translate-cache-descriptions-and-logs.html" rel="alternate"></link><updated>2014-11-16T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-11-16:translate-cache-descriptions-and-logs.html</id><summary type="html">&lt;p&gt;I recently did a European cycle trip and as described &lt;a href="http://www.elfnor.com/off-line-caching-along-a-route.html"&gt;here&lt;/a&gt; I made some gpx files of geocaches along my intended route. &lt;/p&gt;
&lt;p&gt;The trouble is most of the cache descriptions were in German and my German is practically non-existent. I wanted to do all my caching offline so I wrote a small python script to use Google Translate to translate all the descriptions and logs in the GPX file.&lt;/p&gt;
&lt;p&gt;The code uses the &lt;code&gt;minidom&lt;/code&gt; module in the python standard library to parse the &lt;code&gt;xml&lt;/code&gt; in the GPX file.    &lt;/p&gt;
&lt;p&gt;It uses the &lt;a href="http://pythonhosted.org/goslate/"&gt;goslate&lt;/a&gt; library to query Google translate. The &lt;code&gt;codecs&lt;/code&gt; module also in the python standard library is used to correctly write out the unicode characters.&lt;/p&gt;
&lt;p&gt;The script attempts to translate the description and logs for each geocache into English and append them after the original text.&lt;/p&gt;
&lt;p&gt;WARNING: This code only translates some descriptions and logs, if there is a lot of formatting in the description it fails to translate and just returns a second copy of the original text. I haven't spent much time trying to resolve this bug. Feel welcome to improve the script for your on use. Also use at your own discretion after reading Google Translate's terms and conditions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.dom&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;minidom&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;goslate&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;gs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;goslate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Goslate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;route-caches.gpx&amp;#39;&lt;/span&gt;


&lt;span class="n"&gt;xmldoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minidom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;descs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;xmldoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;groundspeak:long_description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;descs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;descs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstChild&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;endesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstChild&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;lt;hr&amp;gt; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;endesc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; of &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;texts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmldoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;groundspeak:text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstChild&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;entext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstChild&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;lt;hr&amp;gt; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;entext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; of &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;route-caches-en.gpx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;xmldoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writexml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;</summary><category term="think"></category><category term="geocaching"></category></entry><entry><title>A novel use for a 3D heated printer bed.</title><link href="http://www.elfnor.com/a-novel-use-for-a-3d-heated-printer-bed.html" rel="alternate"></link><updated>2014-11-12T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-11-12:a-novel-use-for-a-3d-heated-printer-bed.html</id><summary type="html">&lt;p&gt;My partner came home from his run on Saturday with a box full of baby ducklings he'd rescued from certain death by cat. The mother duck was nowhere to be found. After ringing partner's mother and googling duckling care (the two best sources of information) the ducklings were homed in a large box (ex radio controlled plane). We used a lamp with the only old style incandescent bulb we had to keep them warm and fed them up on chick feed begged from neighbours who keep chickens. &lt;/p&gt;
&lt;p&gt;This worked well for a couple of days until I got to thinking of a more efficient way to keep them warm...&lt;/p&gt;
&lt;p&gt;&lt;img alt="design" src="http://www.elfnor.com/images/DuckWarmer.png" /&gt;&lt;/p&gt;
&lt;p&gt;A while ago I'd built a heated bed for my Ultimaker 3D printer following a design similar to &lt;a href="http://www.thingiverse.com/thing:12727"&gt;this one&lt;/a&gt;. Mine had stripboard soldered in parallel in sets of four then those sets wired in series to give and overall resistance of about 3.5 Ohms. I sandwiched the board between the glass from the door of a small bench top oven (with thermal paste) and some wool insulation and MDF board on the other side. &lt;/p&gt;
&lt;p&gt;With 19 V across the stripboard, the glass surface could reach 230 deg C after a long warm up time (20+ minutes) and was controlled by the provided circuit on the Ultimaker board. It worked, but was mostly unused as I mainly print in PLA and I got better at the tricks to make prints stick to the original unheated acrylic bed.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="heater" src="http://www.elfnor.com/images/duckling_heater_crop.png" /&gt;&lt;/p&gt;
&lt;p&gt;So this looked perfect for a new use. A bit of experimenting with a controlled voltage power supply and a thermocouple showed I could get a consistent 30 to 35 deg C temperature at a constant 6 V without any need for a control circuit. Perfect for our new fosterlings. I swapped a car battery charger for the fancy power supply, wrapped the bed well in fleece (ducklings are messy) and installed it in the ducklings' box. After a day of duckling satisfaction testing we built an insulated enclosure over half the bed to provide them with a choice of a warmer enclosed space.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ducklings" src="http://www.elfnor.com/images/ducklings_crop_02.png" /&gt;&lt;/p&gt;
&lt;p&gt;Result, Happy Ducklings.&lt;/p&gt;</summary><category term="make"></category></entry><entry><title>Off-line caching along a route</title><link href="http://www.elfnor.com/off-line-caching-along-a-route.html" rel="alternate"></link><updated>2014-11-09T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-11-09:off-line-caching-along-a-route.html</id><summary type="html">&lt;p&gt;I recently did a European cycle trip and wanted the opportunity to collect a few geocaches along the way. This post and the next &lt;a href="http://www.elfnor.com/translate-cache-descriptions-and-logs.html"&gt;one on translation&lt;/a&gt;, describe the tools I used to wrangle the data from &lt;a href="http://www.geocaching.com"&gt;geocaching.com&lt;/a&gt; in to a GPX file and attempt to translate the cache descriptions and logs into English.&lt;/p&gt;
&lt;p&gt;First the tools I use for geocaaching:&lt;/p&gt;
&lt;p&gt;I use an android phone (rooted with cyanogenmod, but these tools all work on an unrooted phone) for geocaching. When I wanted something more suitable for geocaching than my old Garmin Etrex I looked at Garmin and other dedicated GPS, but decided a phone was more flexible and one third the price. My Motorola Defy+ is reasonably robust, and supposedly waterproof (not tested (yet!) although I use it happily in the rain). The GPS appears more accurate and works better than the Etrex when signals are weak (inside buildings) but can take along time to get a fix without access to the AGPS  data via wifi.&lt;/p&gt;
&lt;p&gt;I use off-line maps from &lt;a href="http://www.openandromaps.org"&gt;www.openandromaps.org&lt;/a&gt;. These are based on data from the &lt;a href="http://www.openstreetmap.org"&gt;openstreetmap&lt;/a&gt; project. I use &lt;a href="http://www.locusmap.eu/"&gt;Locus Pro&lt;/a&gt; for viewing the maps on the phone, but &lt;a href="http://cgeo.org/"&gt;c:geo&lt;/a&gt; and &lt;a href="http://www.oruxmaps.com/index_en.html"&gt;Orux maps&lt;/a&gt; are also very good.&lt;/p&gt;
&lt;p&gt;Locus Pro can import caches stored in GPX format files. &lt;/p&gt;
&lt;p&gt;Below I describe how I created a GPX file of the caches I expected to cycle past on my trip.&lt;/p&gt;
&lt;p&gt;All this is described for running on a Linux machine with &lt;a href="http://code.google.com/p/geotoad/"&gt;geotoad&lt;/a&gt; and &lt;a href="http://www.gpsbabel.org/"&gt;GPSBabel&lt;/a&gt; installed, and assumes you're reasonably adept at working out how to use various bits of software.&lt;/p&gt;
&lt;p&gt;The first step is to get a KML file of the the cycle trip route.&lt;/p&gt;
&lt;h2&gt;Using Google maps to get a KML file of the route&lt;/h2&gt;
&lt;p&gt;The ways to save directions from Google maps and export them to a KML seems to vary and change depending on exactly which interface to Google maps you are using. The following worked on 2014-11-09.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go to &lt;a href="https://mapsengine.google.com/map/"&gt;https://mapsengine.google.com/map/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;create a new map&lt;/li&gt;
&lt;li&gt;select the icon for add directions&lt;/li&gt;
&lt;li&gt;enter the start and end points for your cycle trip, and change the mode to cycle.&lt;/li&gt;
&lt;li&gt;click on the folder icon near the top left, and select export to KML&lt;/li&gt;
&lt;li&gt;select directions and download the file.&lt;/li&gt;
&lt;li&gt;this file is a KMZ file which is just a zipped up KML file, extract the KML file using an appropriate archive tool&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Convert the KML file to a GPX file&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Either use an on-line tool such as &lt;a href="http://kml2gpx.com"&gt;kml2gpx&lt;/a&gt; or &lt;a href="http://www.gpsvisualizer.com/"&gt;gpsvisualizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or use GPSBabel &lt;a href="http://www.gpsbabel.org/"&gt;http://www.gpsbabel.org/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other methods&lt;/h2&gt;
&lt;p&gt;An alternative using the ordinary Google maps interface and gpsbabel is described &lt;a href="http://www.gpsbabel.org/htmldoc-1.5.1/fmt_google.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.openrouteservice.org"&gt;openrouteservice.org&lt;/a&gt; allows you to save a route directly as a GPX file, but only works for places in Europe.&lt;/p&gt;
&lt;h2&gt;Get the caches along the route in the GPX file&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install geotoad and follow &lt;a href="https://code.google.com/p/geotoad/wiki/OtherSearches#Searches_along_a_given_track/route"&gt;these instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Copy the geotoad instruction output by the script, add your own login name and password for geocaching.com, save this new command as a bash file, make executable and run.&lt;/li&gt;
&lt;li&gt;The output of this last step should be a GPX file that can be importing into your caching software. It should contain all the caches within the specified distance of your cycle route.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See this &lt;a href="http://www.elfnor.com/translate-cache-descriptions-and-logs.html"&gt;next blog post&lt;/a&gt; if you want to translate the cache descriptions and logs into English (or another language). &lt;/p&gt;
&lt;p&gt;Note: Use geotoad at your own discretion it may not be strictly compatible with the terms of service of geocaching.com.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="think"></category><category term="geocaching"></category></entry><entry><title>Drop down and button select menus for Blender Operator add-ons</title><link href="http://www.elfnor.com/drop-down-and-button-select-menus-for-blender-operator-add-ons.html" rel="alternate"></link><updated>2014-09-14T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-09-14:drop-down-and-button-select-menus-for-blender-operator-add-ons.html</id><summary type="html">&lt;p&gt;Note: Examples were tested in Blender 2.71 running on Linux Mint.&lt;/p&gt;
&lt;p&gt;While making the fancy new interface for my &lt;a href="http://elfnor.com/copy-2-add-on-for-blender.html"&gt;copy2 add-on&lt;/a&gt; I needed to work out how to display choices to the user. There are many examples around for drop down menus etc. So many examples that I got rather confused to start with. Here is my best attempt at simplifying this to the essentials.&lt;/p&gt;
&lt;p&gt;If you're new to writing an operator add-on this is the best place to start is with this add-on tutorial at &lt;a href="http://www.blender.org/documentation/blender_python_api_2_71_release/info_tutorial_addon.html"&gt;blender.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Any add-on tool you write to add new objects or manipulate objects will typically be a blender &lt;code&gt;Operator&lt;/code&gt; class. This will give you a tool that can be accessed from the existing menus or via a keyboard shortcut. This class gives heaps of functionality such as an easily constructed options panel for the user to interact with and automatically see their changes update.  &lt;/p&gt;
&lt;h2&gt;Simple drop down&lt;/h2&gt;
&lt;p&gt;The following add-on has a simple drop down menu. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;    

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="n"&gt;fixed_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The zeroth item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    
                                                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The first item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    
                                                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The second item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    
                                                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The third item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                                                 &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fixed list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fixed item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixed_items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All we had to do was add the &lt;code&gt;bpy.props.EnumProperty&lt;/code&gt; as a class attribute. When this code is run blender adds an item &lt;code&gt;Drop Downs&lt;/code&gt; (the name is defined by &lt;code&gt;bl_label&lt;/code&gt;) to the &lt;code&gt;Object&lt;/code&gt; menu in the &lt;code&gt;VIEW3D&lt;/code&gt;. When clicked this new menu item runs the add-on, and blender creates a sub-panel in the tool panel automatically constructing a drop down with the defined items on it. Each time the user changes the selection on the drop down the &lt;code&gt;execute&lt;/code&gt; method is called. In this case it simply prints the value of the selection to the terminal (if blender was started from a terminal). &lt;/p&gt;
&lt;p&gt;The items list contains a list of tuples like so: &lt;code&gt;(value, label, description)&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; is what blender return when the attribute is referenced as in the &lt;code&gt;print(self.fixed_items)&lt;/code&gt; will print the &lt;code&gt;value&lt;/code&gt; of the selected item. The &lt;code&gt;label&lt;/code&gt; is what blender displays on the drop down. The &lt;code&gt;description&lt;/code&gt; is what the user sees when they hover the mouse over the item.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; is the label displayed above the drop down. Set this to an empty string to have no label.&lt;/p&gt;
&lt;p&gt;&lt;img alt="drop down 01" src="images/Screenshot-drop_down_01.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Selection buttons&lt;/h2&gt;
&lt;p&gt;You can have more control over how the &lt;code&gt;EnumProperty&lt;/code&gt; is displayed to the user by adding a &lt;code&gt;draw&lt;/code&gt; method to the class. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;layout.prop(self, "radio", expand=True)&lt;/code&gt; changes the drop down to what are sometimes called "radio buttons".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;    

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="n"&gt;radio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SW&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shortwave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The zeroth item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;      
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;AM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;AM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The first item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;      
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;FM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;FM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The second item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Internet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;The third item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;  
                                   &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;radio buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;radio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fixed item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="drop down 02" src="images/Screenshot-drop_down_02.png" /&gt;&lt;/p&gt;
&lt;p&gt;Within the draw method quite complex layouts can be defined if necessary. See these &lt;a href="http://wiki.blender.org/index.php/Dev:2.5/Py/Scripts/Cookbook/Code_snippets/Interface"&gt;examples&lt;/a&gt; on the blender site.&lt;/p&gt;
&lt;h2&gt;Icons&lt;/h2&gt;
&lt;p&gt;The text can be replaced with icons if desired. In this case each item tuple now has 5 entries.&lt;br /&gt;
&lt;code&gt;(value, label, description, icon name, unique number)&lt;/code&gt;&lt;br /&gt;
The icons avaliable and their names can be found using the &lt;code&gt;Development: Icons&lt;/code&gt; add-on. This adds a panel to the properties panel (&lt;code&gt;CTRL-T&lt;/code&gt;) of the Text Editor view. Hovering the mouse over an icon gives it name and clicking and icon copies its name to the clipboard. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;    

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 


    &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;V&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;use vertices&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;VERTEXSEL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;use edges&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;EDGESEL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    
                                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;use faces&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;FACESEL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;  
                                   &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Copy To:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
                                   &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;place to copy to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;icon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fixed item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="drop down 03" src="images/Screenshot-drop_down_03.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Dynamic Lists&lt;/h2&gt;
&lt;p&gt;A callback function can be used to generate the items for the list dynamically. This is useful, for example, for making a list of the objects in the scene for the user to select from. The callback needs to go at the top of the class above the &lt;code&gt;bpy.props.EnumProperty&lt;/code&gt; that uses it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;  

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;item_cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;ob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ob&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

    &lt;span class="n"&gt;objname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;item_cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
                                         &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
                                         &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Choose object here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                               

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;object name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_PT_tools_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_PT_tools_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="drop down 04" src="images/Screenshot-drop_down_04.png" /&gt;&lt;/p&gt;
&lt;p&gt;The callback should return a list of tuples. The above example will update the list of objects every time the user changes the selection. This may not be what you want if the add-on adds lots of new objects to a scene. For the Copy2 add-on I wanted the list to only contain objects that were in the scene when the user started the add-on.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;invoke&lt;/code&gt; method of the class is only called when the add-on is started. In the following example this is the only place the object list is updated. I've added some code that duplicates the object selected in the drop down 10 times. The new objects are not added to the drop down list until the add-on is rerun from the menu. Note also that as you change which object is selected in the drop down any previously duplicated objects are removed from the scene. This is part of the default undo behaviour of an Operator.&lt;/p&gt;
&lt;p&gt;Of course if you where to make this into a real add-on, it would be best to add the number of objects and the vector direction as user selections. These would be a &lt;code&gt;bpy.props.IntProperty&lt;/code&gt; and a &lt;code&gt;bpy.props.FloatVectorProperty&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mathutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="n"&gt;obj_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;obj_list_cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;DropDownExample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj_list&lt;/span&gt; 

    &lt;span class="n"&gt;objname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;obj_list_cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                         &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
                                         &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Choose object here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;DropDownExample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;                             

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;object name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;copy_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;copy_obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy_obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_PT_tools_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_PT_tools_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you add the duplication code to the 1st example in this section, the list will update with all the new objects. Not only does this clutter up the list, strange things happen to which item blender thinks is selected.&lt;/p&gt;
&lt;h2&gt;Selections changing other list items.&lt;/h2&gt;
&lt;p&gt;A callback function for the items list can be used to make one list update its items in response to a user selection in another list.  I needed this in the Copy2 add-on where the user needs to select a primary and secondary axis. The primary and secondary axes can't be the same. I could of offered the user a single choice of one of the six pairs but I decided to make the secondary axis list update in response to the primary axis choice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;    

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DropDownExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;bl_idname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Drop Downs&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;bl_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UNDO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sec_axes_list_cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;priaxes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;sec_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;priaxes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;sec_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;priaxes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;sec_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;       
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sec_list&lt;/span&gt;

    &lt;span class="n"&gt;priaxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;along X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
                                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;along Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
                                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;along Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;  
                                             &lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="n"&gt;secaxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sec_axes_list_cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Secondary Axis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;  

        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;primary axis:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;priaxes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;secondary axis:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
        &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;secaxes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

        &lt;span class="k"&gt;return&lt;/span&gt;                   


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;axes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;priaxes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secaxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FINISHED&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mesh.dropdownexample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLUGIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIEW3D_MT_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_to_menu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Selections changing which properties are displayed&lt;/h2&gt;
&lt;p&gt;Another way the panel can be made responsive to user selection, is to offer additional properties based on what selections are already made. In the Copy2 plugin the scale options only work in edge mode, so I made it so they are only drawn when edge mode is selected. This is done with some &lt;code&gt;if&lt;/code&gt; statements in the draw method.&lt;/p&gt;
&lt;p&gt;For a example of all these ideas in a real add-on have a look at the source code of the &lt;a href=""&gt;Copy2 add-on&lt;/a&gt;&lt;/p&gt;</summary><category term="make"></category><category term="think"></category><category term="copy2"></category></entry><entry><title>Copy 2 add-on for blender</title><link href="http://www.elfnor.com/copy-2-add-on-for-blender.html" rel="alternate"></link><updated>2014-09-02T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-09-02:copy-2-add-on-for-blender.html</id><summary type="html">&lt;p&gt;After forgetting about it for a few years I found my old "copy 2" blender python script. (there's an old thread &lt;a href="http://blenderartists.org/forum/showthread.php?193616-Copy-object-to-face-edge-or-vertex-script-%28updated-to-2-5-3-1%29"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I've completely rewritten it into a proper add-on with a panel interface. It now works in Blender 2.71. It can be downloaded from my github repository &lt;a href="https://github.com/elfnor/copy2_blender_addon"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The add-on copies an object to either the selected vertices, edges or faces of another object. Here are a couple of examples of the kind of output possible.&lt;/p&gt;
&lt;p&gt;&lt;img alt="radiolaria" src="images/radiolaria.png" /&gt;&lt;/p&gt;
&lt;p&gt;To produce this image an icosphere with a single subdivision was used as the destination object. The spike is an edited cone and was copied to the vertices, the silver torus was copied to the faces and the gold rings to the edges of the icosphere. The icosphere was then deleted.&lt;/p&gt;
&lt;p&gt;By making use of the random select in edit mode prior to using Copy 2 and the randomize transform afterwards, the add-on can be used to quickly greeble objects.&lt;/p&gt;
&lt;p&gt;It can also be used to make ball and stick models of a mesh. Copy a sphere to the vertices and a cylinder to the edges. When copy to an edge is selected, the additional option to scale an object to the edge length is given.&lt;/p&gt;
&lt;p&gt;&lt;img alt="twisted torus" src="images/twisted_torus.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Basic steps&lt;/h2&gt;
&lt;p&gt;&lt;img alt="screenshot" src="images/screenshot.png" /&gt;&lt;/p&gt;
&lt;p&gt;Install the add-on through the User Preferences dialog.&lt;/p&gt;
&lt;p&gt;Create a destination object, use &lt;code&gt;CTRL-A&lt;/code&gt; to apply any scale and rotation to the object.&lt;br /&gt;
In &lt;code&gt;EDIT&lt;/code&gt; mode select the vertices, edges or faces to which you want to copy the source object.  &lt;/p&gt;
&lt;p&gt;Create a source object,&lt;br /&gt;
In &lt;code&gt;EDIT&lt;/code&gt; mode move the object relative to the object origin. The object origin is the point that is copied onto the mesh.&lt;br /&gt;
In &lt;code&gt;OBJECT&lt;/code&gt; mode use &lt;code&gt;CTRL-A&lt;/code&gt; to apply any scale and rotation to the source object.  &lt;/p&gt;
&lt;p&gt;Select the destination object, and run the add-on, &lt;code&gt;Object &amp;gt; Copy 2&lt;/code&gt;.&lt;br /&gt;
A sub panel will appear on the tool panel.&lt;br /&gt;
Choose the source object from the drop down menu.&lt;br /&gt;
Choose by selecting the appropriate icon, whether to copy to the vertices, edges or faces of the destination object.&lt;br /&gt;
Select the primary and secondary axes to determine the orientation of the source object with respect to the normals of the destination object.  &lt;/p&gt;
&lt;p&gt;For the vertex option;&lt;br /&gt;
the primary axis is aligned along the vertex normal;&lt;br /&gt;
the secondary axis is aligned to point along one edge of the mesh.&lt;/p&gt;
&lt;p&gt;For the edge option;&lt;br /&gt;
the primary axis is aligned along the average of the edge's vertex normals;&lt;br /&gt;
the secondary axis is aligned along the edge.&lt;/p&gt;
&lt;p&gt;In edge mode, the option to scale the source object to the length of the edge appears.
One can also change the scale factor.&lt;/p&gt;
&lt;p&gt;For the face option; &lt;br /&gt;
the primary axis is aligned along the face normal;&lt;br /&gt;
the secondary axis is aligned to point to one vertex of the face.&lt;/p&gt;
&lt;p&gt;Otherwise click the axes alignment buttons until it looks right.&lt;/p&gt;
&lt;p&gt;When finished the copied objects are selected, if desired further operators can be applied such as the &lt;code&gt;Object &amp;gt; Transform &amp;gt; Randomize Transform&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The copied objects' data are also linked to the source object.  This is useful to make further refinements to the scale or position of the source mesh relative to the source object origin.  If this is not desired they can easily be unlinked. Select them all (select one, then &lt;code&gt;Select &amp;gt; Linked &amp;gt; Object Data&lt;/code&gt;) then &lt;code&gt;Object &amp;gt; Make Single User &amp;gt; Object &amp;amp; Data&lt;/code&gt; for one mesh per object.&lt;/p&gt;</summary><category term="make"></category><category term="think"></category><category term="copy2"></category><category term="blender"></category></entry><entry><title>Parametric Surfaces in Blender</title><link href="http://www.elfnor.com/parametric-surfaces-in-blender.html" rel="alternate"></link><updated>2014-08-03T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-08-03:parametric-surfaces-in-blender.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://www.blender.org/"&gt;Blender&lt;/a&gt; 3D modeling and rendering package has an add-on for mathematically defined surfaces. It is enabled via the Extra Objects add-on under &lt;code&gt;File &amp;gt; User Preferences&amp;gt; Addons&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;XYZ Math Surface&lt;/code&gt; can be used to construct meshes for parametric surfaces. The parametric surface is defined by three functions of two variables &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(v\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
x = X(u,v)
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
y = Y(u,v)
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
z = Z(u,v)
$$&lt;/div&gt;
&lt;p&gt;The &lt;a href="http://wiki.blender.org/index.php/Extensions:2.6/Py/Scripts/Add_Mesh/Add_3d_Function_Surface"&gt;documentation page&lt;/a&gt; for the add-on has a number of example surfaces, but there are a lot more interesting named surfaces out there.&lt;/p&gt;
&lt;p&gt;Its fairly easy to enter any formulae you find for a parametric 3D surface into Blender and save it as an &lt;code&gt;Operator Preset&lt;/code&gt;. I've uploaded my collection of saved presets to a github &lt;a href="https://github.com/elfnor/blender_XYZ_surface_presets"&gt;repo&lt;/a&gt;. I haven't included every named surface out there, just ones I think might make interesting images. &lt;/p&gt;
&lt;p&gt;Here are a couple of images produced using the XYZ Math Surface add-on.&lt;/p&gt;
&lt;h2&gt;Dini&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Dini Surface" src="images/dini_01.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Twisted Torus&lt;/h2&gt;
&lt;p&gt;&lt;img alt="twisted torus" src="images/twisted_torus_02.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Stereosphere&lt;/h2&gt;
&lt;p&gt;A stereosphere is the projection of a plane grid onto a sphere with the projection lines going through the top pole of the sphere. In the following image there is a point source light at the north pole of the stereosphere (the light is represented by the yellow dot). This light then does a stereographic projection of the sphere back onto the plane producing the grid present on the ground plane.&lt;/p&gt;
&lt;p&gt;&lt;img alt="stereosphere" src="images/stereosphere_01.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript'; 
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="make"></category><category term="think"></category><category term="blender"></category></entry><entry><title>Responsive Theme for gthumb Web Albums</title><link href="http://www.elfnor.com/responsive-theme-for-gthumb-web-albums.html" rel="alternate"></link><updated>2014-07-26T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-07-26:responsive-theme-for-gthumb-web-albums.html</id><summary type="html">&lt;p&gt;I want to include a lot of the art works stuff I have on my &lt;a href="http://elfnor.deviantart.com/"&gt;Deviant Art&lt;/a&gt; on this site. I'm looking at the basic format of a static web album with a title, image and description for each art work. I looked at a number of packages including &lt;a href="https://github.com/saimn/sigal"&gt;sigal&lt;/a&gt; and &lt;a href="http://home.gna.org/llgal/"&gt;llgal&lt;/a&gt; but settled on &lt;a href="https://wiki.gnome.org/Apps/gthumb"&gt;gthumb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Gthumb is mainly a image viewer and browser for the GNOME desktop, but it also includes a static web album generator. It has themes based on a set of templates and CSS files. &lt;/p&gt;
&lt;p&gt;Of course I couldn't help fiddling with the templates and the Responsive Dark theme is the result. On a wide screen the description is to the right of the image, on a narrow screen the description is below the image. &lt;/p&gt;
&lt;p&gt;The theme requires the description and title for each image to be entered into their respective exif tags. This is easy to do using gthumb itself. You can use some basic html such as &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tags in the description field to give basic formatting.&lt;/p&gt;
&lt;p&gt;To install the theme, download this &lt;a href="https://github.com/elfnor/gthumb_responsive_theme"&gt;repository&lt;/a&gt; (see download zip button on the right of the github page). Unzip and copy the &lt;code&gt;Responsive_Dark&lt;/code&gt; folder to the gthumb theme location. On my Linux Mint installation this is &lt;code&gt;/usr/share/gthumb/albumthemes/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Start gthumb, choose the files for the web album, select &lt;code&gt;File&amp;gt;Export To&amp;gt;Web Album&lt;/code&gt;. Select the &lt;code&gt;Responsive Dark&lt;/code&gt; theme from the Theme box. Make sure &lt;code&gt;Adapt to the window width&lt;/code&gt; is set on the &lt;code&gt;Index Page&lt;/code&gt; tab.&lt;/p&gt;
&lt;p&gt;Other settings I also used:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Index Page&lt;/code&gt; tab:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Thumbnail Caption&lt;/code&gt;  set to &lt;code&gt;Title&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;All images on a single page&lt;/code&gt; set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Image Page&lt;/code&gt; tab:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Show the description, if available&lt;/code&gt; set&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Show the following attributes:&lt;/code&gt; set to &lt;code&gt;Title&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Screenshots&lt;/h2&gt;
&lt;h3&gt;Index Page&lt;/h3&gt;
&lt;p&gt;&lt;img alt="index screen shots" src="http://www.elfnor.com/images/index_screen.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Image Page&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image screen shots" src="http://www.elfnor.com/images/image_screen.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Demo Album&lt;/h2&gt;
&lt;p&gt;There's a demo album &lt;a href="http://elfnor.github.io/artworksgallery/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="webalbum"></category></entry><entry><title>Symmetry Group Links and Notation</title><link href="http://www.elfnor.com/Symmetry%20Group%20Links%20and%20Notation.html" rel="alternate"></link><updated>2014-07-18T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-07-18:Symmetry Group Links and Notation.html</id><summary type="html">&lt;p&gt;There are many great resources on the 17 plane symmetry groups.&lt;/p&gt;
&lt;p&gt;I made great use of a couple of on-line apps while writing my &lt;a href="http://www.elfnor.com/Symmetry Tile plug-in for GIMP.html"&gt;Symmetry Tile plug-in.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Morenaments&lt;/h2&gt;
&lt;p&gt;&lt;img alt="morenaments" src="http://www.elfnor.com/images/morenaments.png" /&gt;&lt;/p&gt;
&lt;p&gt;This great Java applet can either be used &lt;a href="http://www.morenaments.de/euc/applet"&gt;here on-line&lt;/a&gt; or &lt;a href="http://www.morenaments.de/euc/"&gt;downloaded&lt;/a&gt; as a &lt;code&gt;jar&lt;/code&gt; file and run locally.&lt;/p&gt;
&lt;p&gt;It allows you to draw on a canvas that automatically completes the chosen symmetry group.Be sure to investigate the menu on the top-right. Selecting tile and/or cell under the grid menu will show these on the pattern canvas and help with seeing the structure underlying a particular symmetry. Look in the manual under help for more information. Be sure to try dragging the coloured dots in the tile view around. These can show how the same symmetry pattern can have different shaped cell or tile.&lt;/p&gt;
&lt;h2&gt;Kali&lt;/h2&gt;
&lt;p&gt;&lt;img alt="kali" src="http://www.elfnor.com/images/kali.png" /&gt;&lt;/p&gt;
&lt;p&gt;This on-line Java applet can be used &lt;a href="http://www.scienceu.com/geometry/handson/kali/"&gt;here&lt;/a&gt;. Its much easier to do straight lines in this app. It uses the orbifold notation for the symmetry groups.&lt;/p&gt;
&lt;h2&gt;Books&lt;/h2&gt;
&lt;p&gt;The two books I consulted the most while working on this plug-in were:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Handbook-Regular-Patterns-Introduction-Dimensions/dp/0262690888"&gt;"Handbook of Regular Patterns: An Introduction to Symmetry in Two Dimensions" by Peter S. Stevens&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Designing-Tessellations-Secrets-Interlocking-Patterns/dp/0809228661/"&gt;"Designing Tessellations: The Secret of Interlocking Patterns" by Jinny Beyer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these references use different notations and descriptions for the symmetry groups. I've summarised them in the following table for easy reference. The Symmetry Tile plug-in uses the notation in the left most column.&lt;/p&gt;
&lt;h2&gt;Notation for Symmetry Groups&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Crystallography&lt;/th&gt;
&lt;th&gt;full&lt;/th&gt;
&lt;th&gt;Terrazo&lt;/th&gt;
&lt;th&gt;Jinny Beyer's description&lt;/th&gt;
&lt;th&gt;Orbifold&lt;/th&gt;
&lt;th&gt;Peter S. Stevens's description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;p1&lt;/td&gt;
&lt;td&gt;p1&lt;/td&gt;
&lt;td&gt;Gold Brick&lt;/td&gt;
&lt;td&gt;Translation&lt;/td&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;td&gt;Two Nonparallel Translations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p2&lt;/td&gt;
&lt;td&gt;p211&lt;/td&gt;
&lt;td&gt;Hither &amp;amp; Yon&lt;/td&gt;
&lt;td&gt;Midpoint or Half-Turn Rotation&lt;/td&gt;
&lt;td&gt;2222&lt;/td&gt;
&lt;td&gt;Four Half-Turns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pm&lt;/td&gt;
&lt;td&gt;p1m1&lt;/td&gt;
&lt;td&gt;Wings&lt;/td&gt;
&lt;td&gt;Mirror&lt;/td&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;Two Parallel Mirrors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pg&lt;/td&gt;
&lt;td&gt;p1g1&lt;/td&gt;
&lt;td&gt;Card Tricks&lt;/td&gt;
&lt;td&gt;Glide&lt;/td&gt;
&lt;td&gt;xx&lt;/td&gt;
&lt;td&gt;Two Parallel Glide Reflections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pgg&lt;/td&gt;
&lt;td&gt;p2gg&lt;/td&gt;
&lt;td&gt;Honey Bees&lt;/td&gt;
&lt;td&gt;Double Glide&lt;/td&gt;
&lt;td&gt;22x&lt;/td&gt;
&lt;td&gt;Two Perpendicular Glide Reflections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pmm&lt;/td&gt;
&lt;td&gt;p2mm&lt;/td&gt;
&lt;td&gt;Prickly Pear&lt;/td&gt;
&lt;td&gt;Double Mirror&lt;/td&gt;
&lt;td&gt;*2222&lt;/td&gt;
&lt;td&gt;Reflections in Four Sides of a Rectangle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pmg&lt;/td&gt;
&lt;td&gt;p2mg&lt;/td&gt;
&lt;td&gt;Lightning&lt;/td&gt;
&lt;td&gt;Glided Staggered Mirror&lt;/td&gt;
&lt;td&gt;22*&lt;/td&gt;
&lt;td&gt;A Mirror and a Perpendicular Reflection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cm&lt;/td&gt;
&lt;td&gt;c1m1&lt;/td&gt;
&lt;td&gt;Crab Claws&lt;/td&gt;
&lt;td&gt;Staggered Mirror&lt;/td&gt;
&lt;td&gt;*x&lt;/td&gt;
&lt;td&gt;A Reflection and a Parallel Glide Reflection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmm&lt;/td&gt;
&lt;td&gt;c2mm&lt;/td&gt;
&lt;td&gt;Spider Web&lt;/td&gt;
&lt;td&gt;Staggered Double Mirror&lt;/td&gt;
&lt;td&gt;2*22&lt;/td&gt;
&lt;td&gt;Perpendicular Mirrors and Perpendicular Glide Reflections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p4&lt;/td&gt;
&lt;td&gt;p4gm&lt;/td&gt;
&lt;td&gt;Pinwheel&lt;/td&gt;
&lt;td&gt;Pinwheel or Quarter-Turn Rotation&lt;/td&gt;
&lt;td&gt;442&lt;/td&gt;
&lt;td&gt;Quarter-Turns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p3m1&lt;/td&gt;
&lt;td&gt;p3m1&lt;/td&gt;
&lt;td&gt;Winding Ways&lt;/td&gt;
&lt;td&gt;Mirror and Three Rotations&lt;/td&gt;
&lt;td&gt;*333&lt;/td&gt;
&lt;td&gt;Reflections in an Equilateral Triangle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p3&lt;/td&gt;
&lt;td&gt;p3&lt;/td&gt;
&lt;td&gt;Storm at Sea&lt;/td&gt;
&lt;td&gt;Three Rotation&lt;/td&gt;
&lt;td&gt;333&lt;/td&gt;
&lt;td&gt;Three Rotations through 120°&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p4g&lt;/td&gt;
&lt;td&gt;p4gm&lt;/td&gt;
&lt;td&gt;Primrose Path&lt;/td&gt;
&lt;td&gt;Mirrored Pinwheel&lt;/td&gt;
&lt;td&gt;4*2&lt;/td&gt;
&lt;td&gt;Reflections of Quarter-Turns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p4m&lt;/td&gt;
&lt;td&gt;p4mm&lt;/td&gt;
&lt;td&gt;Sunflower&lt;/td&gt;
&lt;td&gt;Traditional Block&lt;/td&gt;
&lt;td&gt;*442&lt;/td&gt;
&lt;td&gt;Reflections on the Sides of a 45°-45°-90° Triangle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p6&lt;/td&gt;
&lt;td&gt;p6&lt;/td&gt;
&lt;td&gt;Whirlpool&lt;/td&gt;
&lt;td&gt;Six Rotation&lt;/td&gt;
&lt;td&gt;632&lt;/td&gt;
&lt;td&gt;Sixfold Rotation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p31m&lt;/td&gt;
&lt;td&gt;p31m&lt;/td&gt;
&lt;td&gt;Monkey Wrench&lt;/td&gt;
&lt;td&gt;Three Rotations and a Mirror&lt;/td&gt;
&lt;td&gt;3*3&lt;/td&gt;
&lt;td&gt;Refections of 120° Turns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p6m&lt;/td&gt;
&lt;td&gt;p6mm&lt;/td&gt;
&lt;td&gt;Turnstile&lt;/td&gt;
&lt;td&gt;Kaleidoscope&lt;/td&gt;
&lt;td&gt;*632&lt;/td&gt;
&lt;td&gt;Refections in the Sides of a 30°-60°-90° Triangle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The symmetry groups that can be made with rectangular or square cells can be defined using the &lt;a href="http://www.elfnor.com/Symmetry Tile plug-in for GIMP.html#bdpq"&gt;"bdpq" notation&lt;/a&gt;. If the "bdpq" string contains a plus sign then the cell must be square. The strings for all the symmetry groups start with a "b". Each of the symmetry groups could be created with an alternative string starting with one of the other letters.&lt;/p&gt;
&lt;p&gt;The 32 strings here are this produced by the Symmetry Tile plugin when "all square cells" is selected and "Multiple" is set to "Yes". When "Multiple" is set to "No" only one string from each symmetry group is used.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Symmetry Group&lt;/th&gt;
    &lt;th&gt;bdpq string&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;p1&lt;/td&gt;
    &lt;td&gt;b&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;p2&lt;/td&gt;
    &lt;td&gt;bq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b|q&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bq|qb&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pm&lt;/td&gt;
    &lt;td&gt;bd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b|p&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;cm&lt;/td&gt;
    &lt;td&gt;bp|pb&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bd|db&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;cmm&lt;/td&gt;
    &lt;td&gt;bdpq|pqbd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bd|qp|db|pq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bqpd|pdbq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bd|pq|db|qp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pg&lt;/td&gt;
    &lt;td&gt;bp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b|d&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bd+|d+b&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bp+|p+b&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pgg&lt;/td&gt;
    &lt;td&gt;bp|dq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bq|dp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bp|qd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pmg&lt;/td&gt;
    &lt;td&gt;bd|qp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b|p|d|q&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;b|q|d|p&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bdpq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bqpd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bq|pd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pmm&lt;/td&gt;
    &lt;td&gt;bd|pq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;p4&lt;/td&gt;
    &lt;td&gt;bb+|q+q&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bq+|b+q&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;p4g&lt;/td&gt;
    &lt;td&gt;bdp+b+|pqq+d+|p+b+bd|q+d+pq&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bdd+q+|b+p+pq|d+q+bd|pqb+p+&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bb+p+d|q+qpd+|p+dbb+|pd+q+q&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;bq+d+d|pp+b+q|d+dbq+|b+qpp+&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="symmetrytile"></category></entry><entry><title>Symmetry Tile with non-rectangular cells</title><link href="http://www.elfnor.com/Symmetry%20Tile%20with%20non-rectangular%20cells.html" rel="alternate"></link><updated>2014-07-13T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-07-13:Symmetry Tile with non-rectangular cells.html</id><summary type="html">&lt;p&gt;With the Symmetry Tile plug-in the user selects an area using the rectangle select tool, before running the plug-in. The plug-in then derives a cell to use to form the user's choice of symmetry pattern. For many of the symmetries that derived cell is the same as the selected rectangle. Some of the symmetries need a cell shape other than the rectangle. Those cell shapes and their relation to the user's rectangle are shown below, along with the symmetry groups that use that cell shape.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Derived Cells" src="images/derived_cells.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Square&lt;/strong&gt; - p4, p4g, pg (some)&lt;br /&gt;
&lt;strong&gt;Equilateral Triangle&lt;/strong&gt; - p3m1, p6&lt;br /&gt;
&lt;strong&gt;Half square triangle&lt;/strong&gt; - p4m&lt;br /&gt;
&lt;strong&gt;90, 60 and 30 degree triangle&lt;/strong&gt; - p6m&lt;br /&gt;
&lt;strong&gt;Diamond&lt;/strong&gt; - p3&lt;br /&gt;
&lt;strong&gt;Kite&lt;/strong&gt; - p31m  &lt;/p&gt;
&lt;p&gt;In many cases the user may want to create specific content to fill the required cell shape. It would be easier to have this shape on the screen to help you to draw the cell content in the correct place. Here's how to do that. I'll use the kite shaped cell here as an example but this method applies to any of the non-rectangular cells.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new image with a transparent background. &lt;/li&gt;
&lt;li&gt;Select a rectangle about the size you want your cell to be. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="odd_cells_01" src="images/Screenshot-GIMP-odd_cells_01.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run the Symmetry Tile plug-in, choosing a symmetry group that uses the desired cell (p31m for the kite). This will produce a blank transparent image which can be discarded. The plug-in will also leave the correct shaped cell selected in the original image.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="odd_cells_02" src="images/Screenshot-GIMP-odd_cells_02.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert that selection to a path. (Select&amp;gt; To Path). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="odd_cells_03" src="images/Screenshot-GIMP-odd_cells_03.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The path can now be used as a guide to the cell shape. Use it to draw the cell content in the correct place, filling the cell area with brush strokes etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="odd_cells_04" src="images/Screenshot-GIMP-odd_cells_04.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the path, convert it back to a selection  and re run the plug-in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="odd_cells_05" src="images/Screenshot-GIMP-odd_cells_05.png" /&gt;&lt;/p&gt;
&lt;p&gt;Credit for this method is due to lylejk who posted it over on &lt;a href="http://www.gimpchat.com/viewtopic.php?f=9&amp;amp;t=10683&amp;amp;start=30#p141775"&gt;gimpchat&lt;/a&gt;.&lt;/p&gt;</summary><category term="make"></category><category term="think"></category><category term="symmetrytile"></category></entry><entry><title>Using the Symmetry Tile plug-in for Quilt Design</title><link href="http://www.elfnor.com/Using%20the%20Symmetry%20Tile%20plug-in%20for%20Quilt%20Design.html" rel="alternate"></link><updated>2014-07-12T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-07-12:Using the Symmetry Tile plug-in for Quilt Design.html</id><summary type="html">&lt;p&gt;The block patterns used in quilts are a great example of a pattern with repeating symmetry. Using a computer to play with these repeating symmetry patterns is a great way to design quilts. &lt;/p&gt;
&lt;p&gt;I've written a plug-in for a image editing program called &lt;a href="http://www.gimp.org/"&gt;GIMP&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GIMP is an acronym for GNU Image Manipulation Program. It is a freely distributed program for such tasks as photo retouching, image composition and image authoring.&lt;/p&gt;
&lt;p&gt;It has many capabilities. It can be used as a simple paint program, an expert quality photo retouching program, an online batch processing system, a mass production image renderer, an image format converter, etc.&lt;/p&gt;
&lt;p&gt;GIMP is expandable and extensible. It is designed to be augmented with plug-ins and extensions to do just about anything. The advanced scripting interface allows everything from the simplest task to the most complex image manipulation procedures to be easily scripted.&lt;/p&gt;
&lt;p&gt;GIMP is written and developed under X11 on UNIX platforms. But basically the same code also runs on MS Windows and Mac OS X. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The plug-in I've written is called Symmetry Tile and instructions on downloading and installing it can be found &lt;a href="http://elfnor.github.io/lookthinkmake/Symmetry%20Tile%20plug-in%20for%20GIMP.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This plug-in takes the selection from an image ("cell") and produces a new image according to 
one of the &lt;a href="http://en.wikipedia.org/wiki/Wallpaper_groups"&gt;17 plane symmetry groups &lt;/a&gt;. These are also known as wallpaper groups or plane crystallographic groups. &lt;/p&gt;
&lt;p&gt;Basically it rotates and or flips copies of the cell, combines them to form a tile and then copies that tile to fill a new image.&lt;/p&gt;
&lt;p&gt;Some galleries of images produced with this plug-in can be found &lt;a href="http://elfnor.github.io/symmetrytilegallery"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post gives some examples of how you might use Symmetry Tile for quilt design. It presumes you're familiar with the basics of using GIMP, but should be able to be followed by someone who has used similar programs such as Photoshop or Photopaint.&lt;/p&gt;
&lt;h2&gt;The basic block element of the design.&lt;/h2&gt;
&lt;p&gt;Create a new image from the file menu. Start off fairly small say 200 x 200 pixels. We're going to end up with lots of copies of this across the screen, and there's not a lot of point in working at very high resolution.&lt;/p&gt;
&lt;p&gt;Turn on the grid and 'snap to grid' from the edit menu. Choose the pencil from the toolbox and set it to maybe 1 or 2 pixels in size.&lt;/p&gt;
&lt;p&gt;Draw a square 120 X 120 pixels, and then some straight lines inside to make the seam lines on a basic block. You'll make more different patterns if your basic block is non-symmetric. The block on the left is non-symmetric. The block on the right would look the same if it was flipped or mirrored about the dotted blue line. &lt;/p&gt;
&lt;p&gt;&lt;img alt="line blocks" src="images/two_cells_lines.png" /&gt;&lt;/p&gt;
&lt;p&gt;Use the fill tool (bucket) to fill each piece with a colour or pattern. Once coloured in a symmetric block can become non-symmetric. The block on the right with the coloured fill, no longer looks the same if it is flipped or mirrored. &lt;/p&gt;
&lt;p&gt;&lt;img alt="filled blocks" src="images/two_cells.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Playing with symmetry&lt;/h2&gt;
&lt;p&gt;Use the rectangular select tool to select the block. Find the Symmetry Tile Plug-in under Render on the Filters menu.
Choose the image size to be a multiple of the block size, say 720 x 720 pixels. Choose one of the symmetry groups and click OK to see the result. Experiment with different symmetry groups to see what they do. For the complete effect choose &lt;code&gt;all square cells&lt;/code&gt; from the Symmetry Groups menu and set Multiple images to &lt;code&gt;Yes&lt;/code&gt;. Your screen should fill up with 32 images (they may all be hiding under the top image). &lt;/p&gt;
&lt;p&gt;If you used the original cell, I used above, then amongst all those images will be some familiar to traditional quilters. &lt;/p&gt;
&lt;h3&gt;Pinwheels&lt;/h3&gt;
&lt;p&gt;&lt;img alt="pinwheels" src="images/p4_bbtlqtq.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Flying Geese&lt;/h3&gt;
&lt;p&gt;&lt;img alt="flying geese" src="images/cm_bplpb.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Double Zigzag&lt;/h3&gt;
&lt;p&gt;&lt;img alt="double zigzag" src="images/cmm_bdlqpldblpq.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Hourglass&lt;/h3&gt;
&lt;p&gt;&lt;img alt="hourglass" src="images/p4g_bbtptdlqtqpdtlptdbbtlpdtqtq.png" /&gt;&lt;/p&gt;
&lt;p&gt;Where you go from here is up to you. A sampler quilt with a selection of these design separated by borders is one possibility. &lt;/p&gt;
&lt;p&gt;I next opened a new much larger image and copied then pasted as layer some of the designs I liked the look of. With each designed as a separate layer they can be moved around and under each other until a potential quilt design is arrived at. The design below has about 5 different patterns arranged so the design morphs from one pattern to the next. It takes a little bit of time to catch on that only one basic block is used to achieve the different patterns.&lt;/p&gt;
&lt;p&gt;&lt;img alt="quilt design" src="images/quilt_02.png" /&gt;&lt;/p&gt;</summary><category term="make"></category><category term="think"></category><category term="symmetrytile"></category></entry><entry><title>Symmetry Tile plug-in for GIMP</title><link href="http://www.elfnor.com/Symmetry%20Tile%20plug-in%20for%20GIMP.html" rel="alternate"></link><updated>2014-07-05T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-07-05:Symmetry Tile plug-in for GIMP.html</id><summary type="html">&lt;p&gt;These are the docs for my Symmetry Tile plug-in for GIMP.&lt;/p&gt;
&lt;p&gt;The plug-in can be obtained &lt;a href="https://www.github.com/elfnor/symmetrytile"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This plug-in takes the selection from an image ("cell") and produces a new image according to 
one of the &lt;a href="http://en.wikipedia.org/wiki/Wallpaper_groups"&gt;17 plane symmetry groups &lt;/a&gt;. These are also known as wallpaper groups or plane crystallographic groups. &lt;/p&gt;
&lt;p&gt;Basically it rotates and or flips copies of the cell, combines them to form a tile and then copies that tile to fill a new image.&lt;/p&gt;
&lt;p&gt;Some galleries of images produced with this plug-in can be found &lt;a href="http://elfnor.github.io/symmetrytilegallery"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Requires &lt;a href="http://www.gimp.org/"&gt;GIMP&lt;/a&gt; to be installed.&lt;/p&gt;
&lt;p&gt;From within GIMP find out where your plug-in directory is:&lt;/p&gt;
&lt;p&gt;Edit&amp;gt;Preferences&amp;gt;Folders&amp;gt;Plug-ins&lt;/p&gt;
&lt;p&gt;For Linux the plug-in directory will probably be &lt;code&gt;~/.gimp-2.8/plugins&lt;/code&gt;
Copy the file &lt;code&gt;symmetry_tile.py&lt;/code&gt; to this folder and make it "executable". To do this: select the plug-in from your file browser, click properties and check the box "Allow executable" under the permissions tab.&lt;/p&gt;
&lt;p&gt;For Windows the plug-in directory will be probably be &lt;code&gt;C:\Users\username\gimp-2.8\plug-ins&lt;/code&gt;. Copy the file &lt;code&gt;symmetry_tile.py&lt;/code&gt; to this folder.&lt;/p&gt;
&lt;p&gt;Restart GIMP to activate the plugin.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Select an area on an image using the rectangle select tool.
Start the plug-in via Filters&amp;gt;Render&amp;gt;Symmetry Tile&lt;/p&gt;
&lt;p&gt;You should see the following dialog. &lt;/p&gt;
&lt;p&gt;&lt;img alt="plugin dialog" src="images/plugin_dialog.png" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Height&lt;/code&gt; and &lt;code&gt;Width&lt;/code&gt; parameters determine the size of the new image.
The &lt;code&gt;Symmetry group&lt;/code&gt; drop down gives you the choice of one of the 17 symmetry groups p1, p2 through to p6m. The last three entries I'll cover later. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Multiple Images&lt;/code&gt; toggle is set by default to &lt;code&gt;No&lt;/code&gt;. In this mode it produces one image for the chosen symmetry group. Some groups (p2, pm, cm, cmm, pg, pgg, pmg, p4, p4g, p6) can produce different patterns depending on, for example, which corner of the cell a copy is rotated around to form the tile. If the &lt;code&gt;Multiple Images&lt;/code&gt; toogle is set to &lt;code&gt;Yes&lt;/code&gt;, a separate image is produced for each of these different patterns.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;bdpq string&lt;/code&gt; entry box is covered below under Escher's Potato Game.&lt;/p&gt;
&lt;h3&gt;Deriving the initial cell&lt;/h3&gt;
&lt;p&gt;Many of the symmetry groups can be produced from a rectangular cell (p1, p2, pm, cm, cmm, pg, pgg, pmg, pmm). These groups use the user selection unmodified. Some groups (p4, p4g) require an initial square cell. In this case, a square primary cell is derived from the user's initial rectangular selection. The left most side of the rectangle is used as the left edge of the square.&lt;/p&gt;
&lt;p&gt;Two groups (p3m1, p6) are produced from a equilateral triangle shaped cell. This cell is derived from the user's rectangular selection with the triangle sharing the rectangle's left side, and the triangle pointing to the right.&lt;/p&gt;
&lt;p&gt;The p4m group requires a half square triangle for the initial cell.  The left most side of the user's rectangle is used as the left edge of the triangle, with the rectangle and triangle sharing the top left corner.&lt;/p&gt;
&lt;p&gt;The p6m group requires a triangle with internal angles of 90, 60 and 30 degrees for the initial cell. The left most side of the rectangle is used as the left longer edge of the triangle, with the rectangle and triangle sharing the top left corner. &lt;/p&gt;
&lt;p&gt;The p3 group needs a diamond shape (rhombus) with internal angles of 30 and 60 degrees for the initial cell. The diamond shares the rectangle's left side and the diamond points down and to the right.&lt;/p&gt;
&lt;p&gt;The p31m group uses a kite shape for the initial cell. The kite shares the rectangle's left side and the top left corner.&lt;/p&gt;
&lt;p&gt;The figure below  illustrates this, with the user's rectangular selection shown as a dotted line and the derived initial cell as a solid line.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Derived Cells" src="images/derived_cells.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Last 3 Symmetry group options&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;17 groups&lt;/code&gt; option makes all the patterns from the same user selection. If &lt;code&gt;Multiple Images&lt;/code&gt; is set to &lt;code&gt;No&lt;/code&gt; this will produce 17 images. If it is set to &lt;code&gt;Yes&lt;/code&gt;, 40 images will be produced. Depending on your machine's capability its probably not a good idea to make 40 very large images!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;all square cells&lt;/code&gt; option derives a square cell and uses it for all the groups that can be made with a square cell. There are 11 images produced without &lt;code&gt;Multiple Images&lt;/code&gt; set and 32 images when &lt;code&gt;Multiple Images&lt;/code&gt; is set.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Escher's Potato Game&lt;/code&gt; is briefly described &lt;a href="http://www.eschertiles.com/index.html"&gt;here&lt;/a&gt; along with an interactive app. This paper &lt;a href="http://www.combinatorics.org/Volume_4/PDF/v4i2r17.pdf"&gt;(pdf)&lt;/a&gt; by Doris Schattschneider describes the idea more fully. In the Symmetry Tile plug-in, if the &lt;code&gt;bdpq string&lt;/code&gt; entry is left blank, choosing the &lt;code&gt;Escher's Potato Game&lt;/code&gt; option will produce from the user's selection a random pattern conforming to the rules of the Potato Game.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;bdpq string&lt;/code&gt; entry is filled with an appropriate string that string will be used to construct an image from the user's selection.&lt;/p&gt;
&lt;p&gt;&lt;a name="bdpq"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;How to write a bdpq string&lt;/h3&gt;
&lt;p&gt;The "bdpq" notation is a useful shorthand to describe patterns built from square and rectangular cells.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;bdpq string&lt;/code&gt; entry takes a string similar  to &lt;code&gt;bq|qb&lt;/code&gt; and builds a tile for a pattern based on the user selected rectangular cell.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;The syntax for the string:  
    b  is the original user selected cell
    d is the cell flipped horizontally  
    p is the cell flipped vertically  
    q is the cell rotated 180 deg

    | denotes a new line

That is &amp;#39;bq|qb&amp;#39; will build this tile

bq  
qb

and hence this pattern (symmetry group p2)

bqbqbq
qbqbqb
bqbqbq
qbqbqb

b+, d+, p+, q+  represent each cell rotated 90 deg (clockwise),
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the original user selection contains the letter 'b', then if the cell is flipped around a vertical axis it will look like the letter 'd'. If the letter 'b' is flipped around the horizontal axis it will look like the letter 'p'. if the letter 'b' is rotated 180 degrees it will look like the letter 'q'. (this depends a bit on the font of course).&lt;/p&gt;
&lt;p&gt;If the original cell is square then 90 degree rotations of copies of it can also be used to build a tile from the cell. Unfortunately there are no suitable letters to easily describe these and I've chosen to call these cells 'b+', 'd+', 'p+' and 'q+'. Each is the respective cell rotated 90 degrees clockwise.&lt;/p&gt;
&lt;p&gt;The eight different variations of the original tile are shown here.&lt;/p&gt;
&lt;p&gt;&lt;img alt="bdpq cells" src="images/bdpq_cells.png" /&gt;&lt;/p&gt;
&lt;p&gt;The string can be arbitrarily long, but each row should have the same number of cells. The plug-in does not check to see whether the bdpq string is properly formed. Odd results will probably occur for odd strings.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;bdpq string&lt;/code&gt; entry is blank when the &lt;code&gt;Escher's Potato Game&lt;/code&gt; option is chosen the plug-in will make up a tile from  4 cells in 2 rows of 2. Each cell will be picked from a random selection of the b, b+, d, d+, p, p+, q, q+ transformations of the original selection. The string used can be seen in the file name of the new image. (the '+' sign is replaced by a 't' and the '|' by a 'l')&lt;/p&gt;
&lt;p&gt;As an example this initial cell.&lt;/p&gt;
&lt;p&gt;&lt;img alt="epg_cell.png" src="images/epg_cell.png" /&gt;&lt;/p&gt;
&lt;p&gt;and &lt;code&gt;bdb+d+|pqp+q+&lt;/code&gt; entered into the &lt;code&gt;bdpq string&lt;/code&gt; entry, produces this pattern&lt;/p&gt;
&lt;p&gt;&lt;img alt="epg_bdbtdtlpqptqt.png" src="images/epg_bdbtdtlpqptqt.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Extra tip:&lt;/h3&gt;
&lt;p&gt;If after generating 40 images you want to save them all, here is some code to type into the python console. (Filters&amp;gt;Python-Fu&amp;gt;Console)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;img&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;gimp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;image_list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
   &lt;span class="s-Atom"&gt;new_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/tmp/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s-Atom"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[:-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.png&amp;quot;&lt;/span&gt;
   &lt;span class="s-Atom"&gt;pdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gimp_file_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s-Atom"&gt;new_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;new_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There ought to be a plug-in for saving all the images...&lt;/p&gt;
&lt;hr /&gt;</summary><category term="make"></category><category term="think"></category><category term="symmetrytile"></category></entry><entry><title>Image alignment with markdown</title><link href="http://www.elfnor.com/image-alignment-with-markdown.html" rel="alternate"></link><updated>2014-06-21T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-06-21:image-alignment-with-markdown.html</id><summary type="html">&lt;p&gt;The standard syntax for inserting an image into a markdown document &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;![avatar]({filename}/images/El_Avatar2.jpeg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produces this html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;avatar&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./images/El_Avatar2.jpeg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and aligns an image to the left margin.&lt;/p&gt;
&lt;p&gt;&lt;img alt="avatar" src="http://www.elfnor.com/images/El_Avatar2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;The text then continues underneath the image.&lt;/p&gt;
&lt;p&gt;To float an image left or right so that the text flows around the image you can include a style in the attribute list after the image filename.  Pelican automatically has the Attribute Lists extension to markdown enabled.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;![avatar]({filename}/images/El_Avatar2_face_left.jpeg){: style=&amp;quot;float:right; margin: 20px 20px&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produces this html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;avatar&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./images/El_Avatar2_face_left.jpeg&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;float:right; margin: 20px 20px&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;img alt="avatar" src="http://www.elfnor.com/images/El_Avatar2_face_left.jpeg" style="float:right; margin: 20px 20px" /&gt;&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="avatar" src="http://www.elfnor.com/images/El_Avatar2.jpeg" style="float:left; margin: 20px 20px" /&gt;&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Better practive would be to define a pair of styles in the &lt;code&gt;main.css&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;/* Images */&lt;/span&gt;
&lt;span class="nc"&gt;.floatright&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.floatleft&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then reference this in the markdown as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;![avatar]({filename}/images/El_Avatar2_face_left.jpeg){: .floatright}
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;img alt="avatar" class="floatright" src="http://www.elfnor.com/images/El_Avatar2_face_left.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There is a pelican plugin called &lt;a href="http://duncanlock.net/blog/2013/05/29/better-figures-images-plugin-for-pelican/"&gt;Better Figures and Images&lt;/a&gt; but it seems only designed for writing in reStructured Text not markdown.&lt;/p&gt;</summary><category term="think"></category><category term="pelican"></category><category term="markdown"></category></entry><entry><title>Pelican and markdown styling cheat-sheet</title><link href="http://www.elfnor.com/pelican-and-markdown-styling-cheat-sheet.html" rel="alternate"></link><updated>2014-06-19T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-06-19:pelican-and-markdown-styling-cheat-sheet.html</id><summary type="html">&lt;p&gt;A &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; blog consists of:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;markdown&lt;/strong&gt; text files containing &lt;strong&gt;content&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; jinga2&lt;/strong&gt; html template files defining the pages &lt;strong&gt;layout&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS&lt;/strong&gt; style file that determine how the page elements &lt;strong&gt;look&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These elements are processed by the Pelican python software to produce the static html pages that make up this blog.&lt;/p&gt;
&lt;p&gt;Lots of blogs (I used &lt;a href="http://www.circuidipity.com/github-pages.html"&gt;this one&lt;/a&gt; mainly) have very good information on installing Pelican. Many &lt;a href="http://www.krisyu.org/blog/posts/2013/06/markdown-and-latex-reference"&gt;for example&lt;/a&gt; also have the markdown codes used in text files to define what parts of the text are code blocks, what parts are quotes. But I couldn't find a post that described where and how to edit the CSS style files that determine how the the different elements look on the finished blog.&lt;/p&gt;
&lt;p&gt;I'll try and write that post. &lt;/p&gt;
&lt;p&gt;A warning: I'm fairly new and no expert on html or CSS and most of this information comes from poking pelican themes and seeing what happens. Most of this should apply to any Pelican theme, but mostly I'll be fiddling about with the pelican-simplegrey theme.&lt;/p&gt;
&lt;h2&gt;In-line Code&lt;/h2&gt;
&lt;p&gt;This is text such as &lt;code&gt;this&lt;/code&gt; that is normally used for a short piece of code in a a paragraph. It is enclosed in back quote marks, the key in the extreme top left of a US keyboard.&lt;/p&gt;
&lt;p&gt;It might also be used when a variable name or file name &lt;code&gt;~\file.txt&lt;/code&gt; is referred to in a paragraph.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;This is text such as `this` that is normally...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The static html produced by Pelican is:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is text such as &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;this&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; that is normally used for a short piece of code in a a paragraph. &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This format of the in-line code element is given by a piece of CSS such as this, included in the theme &lt;code&gt;main.css&lt;/code&gt; or &lt;code&gt;style.css&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;code&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Source Code Pro&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.9em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;letter-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.015em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Code Blocks&lt;/h2&gt;
&lt;p&gt;This is a block set of from the main text, normally containing a longer piece of code.
The blocks can be defined in a number of different ways, indenting, four &lt;code&gt;~~~~&lt;/code&gt;, but I'll show examples with triple back quote marks (```).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;```  
# python code  
mystr = &amp;#39;Hello world&amp;#39;  
print(&amp;#39;%s&amp;#39;%(mystr))  
```   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produces this html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;# python code&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;mystr&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;=&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;Hello world&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;print&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;si&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;%s&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;%&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;mystr&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;))&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and this output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# python code&lt;/span&gt;
&lt;span class="n"&gt;mystr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mystr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The style for the &lt;code&gt;pre&lt;/code&gt; element is defined in the &lt;code&gt;main.css&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;pre&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Source Code Pro&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt; &lt;span class="k"&gt;repeat&lt;/span&gt; &lt;span class="k"&gt;scroll&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;#F0F0F0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.9em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;letter-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.015em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;130%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.7em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;white-space&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;break&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and mostly defines fonts and backgrounds. All the span elements are produced by pygments code and coloured according to the css normally stored in &lt;code&gt;pygments.css&lt;/code&gt;.  The easiest way to change this is to use a predefined css from another style (pelican-bootstrap3 has lots).&lt;/p&gt;
&lt;p&gt;To add line numbers to the displayed code block use &lt;code&gt;#!&lt;/code&gt; at the start of the first line of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;```python  
#! python code  
mystr = &amp;#39;Hello world&amp;#39;  
print(&amp;#39;%s&amp;#39;%(mystr))  
```   
&lt;/pre&gt;&lt;/div&gt;


&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#! python code  &lt;/span&gt;
&lt;span class="n"&gt;mystr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mystr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Block Quotes&lt;/h2&gt;
&lt;p&gt;Blockquotes can be indicated with &amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here's a blockquote.&lt;/p&gt;
&lt;p&gt;This a much longer multi paragraph block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; Here&amp;#39;s a blockquote.

&amp;gt; This a much longer multi paragraph block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines. 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produced by this html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;blockquote&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Here&amp;#39;s a blockquote.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This a much longer multi paragraph block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines.  This a much longer block quote that is intended to extend over multiple lines. &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The style for the &lt;code&gt;blockquote&lt;/code&gt; element is defined in the &lt;code&gt;main.css&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;italic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Attribute lists&lt;/h2&gt;
&lt;p&gt;If you want to have several different types of an element, each with its own style, you can use attribute lists. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;For example different coloured in-line `code in red`{: .red} and `green`{: .green}.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example different coloured in-line &lt;code class="red"&gt;code in red&lt;/code&gt; and &lt;code class="green"&gt;green&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;For example different coloured in-line &lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;code in red&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; and &lt;span class="nt"&gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;green&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Along with the following css in &lt;code&gt;main.css&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="nc"&gt;.red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="nc"&gt;.green&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Headings&lt;/h2&gt;
&lt;p&gt;Headings can be made in markdown by underlining with equal signs (===========) to give h1 tags, underlining with underscores (---------) to give h2 tags, or by enclosing the headings with hash (#Heading#) symbols. The number of hash symbols gives the heading depth.&lt;/p&gt;
&lt;h1&gt;H1&lt;/h1&gt;
&lt;h1&gt;H1&lt;/h1&gt;
&lt;h2&gt;H2&lt;/h2&gt;
&lt;h2&gt;H2&lt;/h2&gt;
&lt;h3&gt;H3&lt;/h3&gt;
&lt;p&gt;markdown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#H1#
H1
==
##H2##
H2
--
###H3###
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HTML&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;H1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;H1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;H2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;H2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;H3&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CSS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#711&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Source Sans Pro&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="k"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;text-shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1em&lt;/span&gt; &lt;span class="m"&gt;0.1em&lt;/span&gt; &lt;span class="m"&gt;0.1em&lt;/span&gt; &lt;span class="m"&gt;#EFEFEF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;125%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.67em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.7em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Learning more&lt;/h2&gt;
&lt;p&gt;I could carry on with examples for styling other elements such as lists and links, but the learning process is fairly straight forward.
On your blog, or someone else's, right click on an element (Firefox or Chrome) and choose inspect element. A window opens at the bottom of the screen with the html for the element highlighted on the left and the style css highlighted on the right. If the element has its own css, look that up in your theme's css files and alter it to suit. A web search will give you lots of examples for styling each element. If all of the css is inherited from &lt;code&gt;body&lt;/code&gt; for your chosen element then look at the tags that wrap the element in the html file. Add a section to the css for that type of element tag and continue as above.&lt;/p&gt;
&lt;p&gt;I'll follow this up with a post on the basics of layout using Jinja2 templates.&lt;/p&gt;</summary><category term="pelican"></category><category term="markdown"></category></entry><entry><title>Cat Scan</title><link href="http://www.elfnor.com/Cat%20Scan.html" rel="alternate"></link><updated>2014-06-13T22:00:00+12:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-06-13:Cat Scan.html</id><summary type="html">&lt;p&gt;The next step on from all the &lt;a href="http://www.elfnor.com/material-cats.html"&gt;Material Cats&lt;/a&gt; was to make a cat on my 3D printer (an &lt;a href="https://www.ultimaker.com/"&gt;Ultimaker original&lt;/a&gt;). This required a 3D model of the cat. Years ago I played around with  a home built laser scanner using the software from this project (&lt;a href="http://www.david-3d.com/"&gt;David laser scanner&lt;/a&gt;), but the model results required a lot of painstaking clean up and I moved on to something else. Also 3d scanning is a bit close to my day job to spend too much of my own time on it.&lt;/p&gt;
&lt;p&gt;More recently I've seen lots of blog posts on making 3D models from large collections of photos as well as using devices based on Kinect sensor.&lt;/p&gt;
&lt;p&gt;The most mentioned software for making a model from photos (photogrametry) is &lt;a href="http://www.123dapp.com/catch"&gt;Autodesk's 123d Catch&lt;/a&gt;. I gave it a go using the plaster cat as a model and was really surprised at the quality of the mesh I got for the effort put in.&lt;/p&gt;
&lt;p&gt;Basically you take a large number of photos of an object from all angles, then feed these into the software which analyses them. By matching points in the photos, the software determines where the camera was for each shot and what the 3D shape of the object is.&lt;/p&gt;
&lt;p&gt;The first step is to take photos. Like a lot of photo shoots its best to put some effort in to getting this right as fixing bad photos always takes longer than taking good photos in the first place. These &lt;a href="https://i.materialise.com/blog/entry/guest-blog-deepak-mehta-123dcatch-it-if-you-can"&gt;tips&lt;/a&gt; and &lt;a href="http://forum.123dapp.com/123d/topics/shooting_tips_for_123d_catch"&gt;these&lt;/a&gt; are a good place to start. I choose to take photos of the plaster model of the cat because it had an evenly coloured non reflective surface. I used some plasticine to stick it to the top of a bottle so I'd be able to get photos of the underside of the cat.&lt;/p&gt;
&lt;p&gt;Some people use fancy rigs for the camera but I just used a mini-tripod and worked on the floor. I drew a circle on the newspaper and marked of 18 positions even divisions around the circle. For each photo I placed the front leg of the tripod on a division and took a photo. The newspaper gives lots of detail in each shot for the software to work out camera positions. I took photos at three heights, one level with the cat, one looking doen on it and one looking up. I used a couple of desk lamps to evenly light the model. I made sure each photo was taken with the same zoom level, but didn't take any precautions to fix the exposure or aperture. (I was using an Olympus mu 790).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cat Scan Setup" src="http://www.elfnor.com/images/setup_cat_scan.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;This gave me 54 photos. Some of these photos were out of focus so I deleted them. This left me with 49 OK photos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example Photo" src="http://www.elfnor.com/images/example_photo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The autodesk web app requires google chrome on a windows machine. This was a nuisaance as I almost only run linux at home. But using a borrowed machine I used the web app to upload the photos. The instructions provided are pretty straight forward.&lt;/p&gt;
&lt;p&gt;Upload the photos:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Upload screenshot" src="http://www.elfnor.com/images/123_screen-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;The model produced has the 3D mesh with the colours from the photos mapped onto the mesh.&lt;/p&gt;
&lt;p&gt;&lt;img alt="123D screenshot" src="http://www.elfnor.com/images/123_screen-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;The 3D model produced includes the newspaper part of the bookcase and some of the couch. The cat sitting on its bottle is the very small white piece in the centre of the above screen capture.&lt;/p&gt;
&lt;p&gt;I installed and played around with the autodesk tools for cleaning up the image, but found them a bit cumbersome to use. Instead I exported the model as a stl file and cleaned it up in &lt;a href="http://www.blender.org"&gt;Blender&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blender screenshot" src="http://www.elfnor.com/images/screen-02_web.png" /&gt;&lt;/p&gt;
&lt;p&gt;The model mesh imported into blender with the cat and support selected.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blender screenshot 2" src="http://www.elfnor.com/images/screen-03_web.png" /&gt;&lt;/p&gt;
&lt;p&gt;Everything but the cat and support deleted&lt;/p&gt;
&lt;p&gt;First I deleted everything extra in the imported mesh.&lt;/p&gt;
&lt;p&gt;I then used a boolean operation with a cube to remove the support from the cat and give it a flat base suitable for printing.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blender screenshot 3" src="http://www.elfnor.com/images/screen-04_web.png" /&gt;&lt;/p&gt;
&lt;p&gt;There were a few pimple shaped artifacts and a few dings which I cleaned up by deleting mesh triangles and then filling the gap. I also smoothed the mesh a bit and scaled it to match the original size.&lt;/p&gt;
&lt;p&gt;To distinguish cats made from the digital model from the cats made from the silicon mould, I transformed the mesh to its mirror image.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blender screenshot 4" src="http://www.elfnor.com/images/cat_scan5-blend_web.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here's the final digital model and a set of three printed cats at 100%, 75% and 50% of original size. Making scale copies is so much easier in a digital process.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PLA Cat prints" src="http://www.elfnor.com/images/cat_scan_pla.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The printed cat is reasonably similar to the original, the indent above the tail is not nearly as deep or as sharp as the original. A concave indent in a object is harder for photogrametry to capture than the outside contour of the object.&lt;/p&gt;
&lt;p&gt;Overall I was very pleased with how well the model turned out for the effort involved. Particularly how little clean up the mesh required.&lt;/p&gt;
&lt;p&gt;Next I'd like to try the &lt;a href="http://arc-team-open-research.blogspot.com.br/2012/12/how-to-make-3d-scan-with-pictures-and.html"&gt;open source alternatives&lt;/a&gt;, particularly the python photogrametry toolbox &lt;/p&gt;</summary><category term="cats"></category><category term="make"></category><category term="materials"></category><category term="3D printing"></category></entry><entry><title>Material Cats</title><link href="http://www.elfnor.com/material-cats.html" rel="alternate"></link><updated>2014-02-23T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-02-23:material-cats.html</id><summary type="html">&lt;p&gt;I had a friend who after some self-reflection decided his primary hobby wasn't wood work but was collecting wood working tools. This left him feeling much less guilty about the number of wood working planes he had in his shed.&lt;/p&gt;
&lt;p&gt;If I was honest my major hobby or interest is collecting techniques for making things as much as actually making stuff. I've been to a lot of workshops and researched a lot of techniques on the web. A while back I started documenting some of these using the same cat mould for any technique that I possibly could.&lt;/p&gt;
&lt;p&gt;Here's the collection so far:&lt;/p&gt;
&lt;p&gt;&lt;img alt="collected cats" src="http://www.elfnor.com/images/collected_cats.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The original cat is the grey and brown cat shown here. She was modeled in clay, burnished and saggar fired in an electric kiln.&lt;/p&gt;
&lt;p&gt;&lt;img alt="raku cat" src="http://www.elfnor.com/images/raku_cat.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;For a saggar firing the piece is placed inside a larger pot filled with sawdust, wood shavings and colourants such as copper sulphate and copper wire. The pot is sealed and fired in an electric kiln. This give a reducing atmosphere (not enough oxygen for clean burning). The colourants used in ceramics, produce different colours in a reducing atmosphere than they do in a normal electric kiln firing. The process produces a bit of smoke outside the kiln. The kiln I fired this in was in a garage on a school site so we got away with it. The kilns I use now are in a community arts facility inside a building and I can't do saggar firings there. I like the randomness of this type of process, the result isn't known until the piece is taken from the kiln. Pit firing and raku firing are other processes I enjoy for their random or serendipitous results.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cat mould" src="http://www.elfnor.com/images/cat_mould.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The mould is made in two parts. The inner part is flexible and is made with co-polymer sealant (the clear stuff you buy at the hardware store for sealing bathroom tiles). Professional mould makers use expensive (at least here in NZ) two-part silicon moulding compounds. Sealant is way cheaper and easier to get. The cons are its thick consistency make it easy to trap air against the mould, giving unsightly pimples on the casting. Also the  sealant sets by releasing a gas, so thick layers can take a long time (or forever) to cure. Years ago I picked up a tip&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; to add mineral turpentine to the sealant to thin it. This can then be painted on as a thin layer on to the object being cast. Allow this first thin layer to dry. It will take a lot longer than plain sealant due to the turps. When its dry build up the mould with more plain sealant filling in all the gaps until there are no undercuts. Let this dry again.&lt;/p&gt;
&lt;p&gt;When the sealant is dry an outer "mother mould" of plaster is made to support the sealant inner mould.&lt;/p&gt;
&lt;p&gt;I follow this post up with a cat photo and explanation for each material. There's bronze and aluminum, leather and paper mache as well as various plastics and ceramics. The next step is to produce a digital model to try with different digital fabrication (3d printing, laser cutting layers, milling?...) processes.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I got this tip on thinning the sealant with turps, years ago from the blog of a trans-gender engineer who was experimenting with cheap ways to make falsies. The blog was a fascinating mix of their work on the west coast of the US, their experiments with mould making and their trips to Las Vegas to test the latest version.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="cats"></category><category term="materials"></category></entry><entry><title>The almost invisible kite</title><link href="http://www.elfnor.com/the-almost-invisible-kite.html" rel="alternate"></link><updated>2014-01-31T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-01-31:the-almost-invisible-kite.html</id><summary type="html">&lt;p&gt;&lt;img alt="parasled" class="floatleft" src="http://www.elfnor.com/images/parasled.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Polythene sheeting, the type you buy at a garden shop that's about 125 μm thick, is great for kite making. It comes in black and clear, the black is boring but the clear can be a bit hard to photograph against the sky.&lt;/p&gt;
&lt;p&gt;This kite is a cross between a sled and a para foil. I based it on plans found &lt;a href="http://www.kiteplans.org/pln_1074/"&gt;here&lt;/a&gt;. The instructions are in French but fairly easy to follow with the help of a dictionary or google translate if you don't read French.&lt;/p&gt;
&lt;p&gt;I combined the pattern for the Dos (back) and the tubes into one piece. Draw them up directly onto the polythene with a felt pen. If you're likely to make more than one it might be worth making a paper pattern. Draw the seam lines onto the sheet. Then cut the two pieces out of the polythene and sew them together with four lines of machine stitching.&lt;/p&gt;
&lt;p&gt;The polythene is pretty slippery on the sewing machine. Use a long stitch length and keep one hand behind the needle and one in front feeding the material through.&lt;/p&gt;
&lt;p&gt;I reinforced the front edge with some left over end lengths of line trimmer line. This is nylon line about 2.5 mm in diameter used in line trimmer for cutting weeds. Pick some up at the garden shop when you get the polythene if you haven' got any sitting about.  I stuck the line to the front edges with squares of duct tape. These didn't hold all that well so I stapled through each square to hold it in place.&lt;/p&gt;
&lt;p&gt;You'll also need a drogue, mine is a truncated cone, about 400 mm long, top circumference 500 mm, bottom circumference 300 mm. Sew two sections together and add line trimmer line along the leading edge as for the main kite.&lt;/p&gt;
&lt;p&gt;That's it. No spars, or dowels. It flies fairly well in most winds. I intend to use it to do some kite photography. Maybe with some first person view camera gear.&lt;/p&gt;</summary><category term="kites"></category></entry><entry><title>Software for managing (e)books</title><link href="http://www.elfnor.com/software-for-managing-ebooks.html" rel="alternate"></link><updated>2014-01-28T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-01-28:software-for-managing-ebooks.html</id><summary type="html">&lt;p&gt;Adding the links to the &lt;a href="http://www.elfnor.com/reading-lists.html"&gt;last post&lt;/a&gt;, I realised I'd dropped a lot of names of bits of software I use into the post. Here's a list with an explanation of what I do with each:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.readerware.com"&gt;Readerware&lt;/a&gt; - &lt;a href="http://www.readerware.com"&gt;http://www.readerware.com&lt;/a&gt;
We use this to keep a computer list of the paper books we own. This is both for interest - it's faster to search the database than to search the shelves - and for insurance purposes.&lt;/p&gt;
&lt;p&gt;To add books to Readerware you only need to enter ISBN numbers rather than the whole author, title etc. The software then looks the ISBN up on line and downloads information on the book including the tile, author, synopsis, cover etc. The initial entry of the majority of our books was done with a cuecat bar-code scanner. With this you scan the book's bar-code, the software converts this to an ISBN and then looks up the books details from there.&lt;/p&gt;
&lt;p&gt;Readerware is commercial software and these days I'd probably choose an open source alternative like &lt;a href="http://www.zotero.org/"&gt;Zotero&lt;/a&gt;‎. I use Zotero mostly for pdfs of scientific papers but it can do books via ISBN.  &lt;a href="http://www.datacrow.net"&gt;Datacrow&lt;/a&gt;, and &lt;a href="http://tellico-project.org/"&gt;Tellico&lt;/a&gt; also look to have similar functionality to Readerware.&lt;/p&gt;
&lt;p&gt;Related: I have used &lt;a href="http://griffith.cc"&gt;Griffith&lt;/a&gt; which is a similar open source program for cataloging DVD collections.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.dotepub.com"&gt;dotEPUB&lt;/a&gt; - &lt;a href="http://www.dotepub.com"&gt;http://www.dotepub.com&lt;/a&gt;
DotEPUB works as a bookmarklet (a bookmark with some javascript code included) that you add to the bookmark bar or list in your browser. On a web page click the dotEPUB bookmarklet and the main text from the page is saved as an epub or mobi to transfer to your ereader. dotEPUB strips a lot of the extras (including images) from the page for a nice clean ebook. This is great for on-line short stories or long articles.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.grabmybooks.com"&gt;grabmybooks&lt;/a&gt; - &lt;a href="http://www.grabmybooks.com"&gt;http://www.grabmybooks.com&lt;/a&gt;
Grabmybooks works similarly to dotEPUB but is installed as an extension in Firefox. It allows more control over which part of the web page is grabbed and handles pages with lots of images well. It allows for multiple web pages to be grabbed as separate articles or chapters to one book. This is great for how-to articles, or for capturing someone's page of links to their best web reads.&lt;/p&gt;
&lt;p&gt;With grabmybooks you can also edit the ebook or add more articles to it from within firefox. On its own it saves in the epub format, if you have calibre (see below) installed you can also save your ebook in the mobi format.&lt;/p&gt;
&lt;p&gt;There are a number of other similar services around including &lt;a href="http://getpocket.com/‎"&gt;Pocket&lt;/a&gt;,  &lt;a href="https://www.readability.com"&gt;Readability&lt;/a&gt;,  &lt;a href="http://www.instapaper.com/"&gt;Instapaper&lt;/a&gt; but these all require you to create an account with the provider. This seems a bit invasive but come with web storage, web syncing and social media type functions.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://calibre-ebook.com/"&gt;Calibre&lt;/a&gt; - &lt;a href="http://calibre-ebook.com/"&gt;http://calibre-ebook.com/&lt;/a&gt;
Calibre is open source software for managing ebook collections. It is also good at converting between ebook formats, epub to mobi, or even docx or pdf to mobi.&lt;/p&gt;
&lt;p&gt;Calibre handles syncing between the ebook collection on your PC and the files on your ebook and includes an ebook viewer that can handle lots of formats. I store all my bought ebooks, and those created with grabmybooks and dotEPUB in calibre. You can also add user fields to the database which I'm using to classify the authors by country and gender.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zotero.org/"&gt;Zotero&lt;/a&gt;‎- &lt;a href="http://www.zotero.org/"&gt;http://www.zotero.org/&lt;/a&gt;
Zotero is an amazing open source tool for managing research papers. It can also be used for managing many types of media. It installs as a firefox extension or as a plug-in plus standalone app for other browsers.&lt;/p&gt;
&lt;p&gt;When on a web page that lists papers, zotero provides an icon to click to save all the info (metadata) on the paper to your zotero database. You can also save the full pdf of the paper to your database/library. The database can be  searched on the full pdf text. The bibliographic reference part of a paper you are writing can easily be generated in any style needed from either within the zotero app or using plug-ins for open-office or word. If you have a pdf file you've downloaded separately, zotero can search it for meta-data and add it to your database as well.&lt;/p&gt;
&lt;p&gt;The above describes how I use zotero for managing scientific papers but it can be used for almost any type of file or to save web pages off line.  Have a look at its website for a heap more features including on line syncing of your library, adding notes to papers, or sharing a library of papers amongst a group of users.&lt;/p&gt;
&lt;p&gt;So there's a few ways to help with taming the ereading pile.&lt;/p&gt;</summary><category term="ebook"></category><category term="reading"></category></entry><entry><title>Reading Lists</title><link href="http://www.elfnor.com/reading-lists.html" rel="alternate"></link><updated>2014-01-26T22:00:00+13:00</updated><author><name>elfnor</name></author><id>tag:www.elfnor.com,2014-01-26:reading-lists.html</id><summary type="html">&lt;p&gt;I love to read and reading lists fascinate me.&lt;/p&gt;
&lt;p&gt;I bought a Kindle ereader in 2011 and its resulted in some large changes in my reading habits. I own a lot of paper books, there's 1300+ in the house according to our &lt;a href="http://www.readerware.com"&gt;Readerware&lt;/a&gt; database (databases are even fancier lists), but pre ereader most of what I read came from the local library. Every three weeks I'd come back with a pile of 6 to 8 books, at least one non-fiction and one book for looking at (art, craft photography). I'd look on the recently returned shelves, the books the librarians had put on display, and keep a special look out for local authors and writers outside the WEIRD (western, educated, industrialised, rich, democratic). So there was a lot of serendipity in what I bought home. I don't think I've been back to the library since I got the ereader.&lt;/p&gt;
&lt;p&gt;Post Kindle, the choice of potential books is huge. Not just from amazon.com. I also make use of &lt;a href="http://www.dotepub.com"&gt;dotepub&lt;/a&gt; and &lt;a href="http://grabmybooks.com"&gt;grabmybooks&lt;/a&gt; to make copies of online short stories and blogs to read later. This large choice has a downside in that I'm sure&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I now read less local authors and more in the science fiction fantasy (sff) genre than previously. The upside is that if I hear about a book then I can be reading it that day&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Reading lists can be about what someone else thinks you should read (eg. "The Western Canon") or about challenges to change what or how much you read. This blogger's project &lt;a href="http://ayearofreadingtheworld.com"&gt;http://ayearofreadingtheworld.com&lt;/a&gt; where she read one book from each of the 196 countries in one year and her previous project &lt;a href="http://ayearofreadingwomen.wordpress.com/"&gt;http://ayearofreadingwomen.wordpress.com/&lt;/a&gt; really inspire me to widen my reading. Being a data freak and a rule bender I'm in the process of going through my ebook collection (stored in &lt;a href="http://calibre-ebook.com/"&gt;Calibre&lt;/a&gt; - more lists) and tagging the books with the author's country and gender. Any countries I've already bagged in the last year (maybe two years) I'll discount from the 196. After that I'm going to try and fill in the rest not with full novels but as many short stories as possible, preferably ones available online so I can share. I'm sure my bias to sff will prevail and I'll also try for a 50/50 male/female split.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I think if I log on the the local library site I can download a copy of my borrowing history (more lists) and do a comparison of pre and post ereader reading. No, too geeky.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Most books. I'll write a post soon about the odd gaps in availability of ebooks for non-USA customers on amazon.com. Also the differences in pricing and how to set up a proxy server on the amazon e3 cloud to help with these issues.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="ebook"></category><category term="reading"></category></entry></feed>